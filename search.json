[{"path":"na.html/articles/auto_colwidths.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"TrueType-Aware Automatic Column Widths","text":"TrueType fonts (.e., different characters different printed widths) complicate calculation column widths based contents table listing, particularly combined verbose human readable column -row labels. junco provides default algorithms calculating appropriate column widths tables listings exporting RTF via tt_to_tlgrtf. can invoked explicitly calling def_colwidths function TableTree listng_df object, along font specification.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"TrueType-Aware Automatic Column Widths","text":"Many tables column labels many times longer data column’s cells; width cell data tends bounded fact set one three numbers interspersed punctuation, rather words case labels.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"pagination-assumptions","dir":"Articles","previous_headings":"Tables","what":"Pagination Assumptions","title":"TrueType-Aware Automatic Column Widths","text":"tt_to_tlgrtf allows horizontal rtables-style pagination, perform vertical pagination; vertical strip table (, mind, comes horizontal pagination) written separate file. combined_rtf argument indicates whether single combined rtf also generated stacking separate sections table single RTF (different table objects).","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"algorithm-and-optimality-criterion","dir":"Articles","previous_headings":"Tables","what":"Algorithm And Optimality Criterion","title":"TrueType-Aware Automatic Column Widths","text":"column-width algorithm tables relatively simple. table columns, calculates widths required cell values word-wrapped. essentially rtables:::propose_column_widths , exception including column labels, found practice much wider cells. def_colwidths also constrains maximum width row labels width (inches) specified via label_width_ins, default two inches.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"examples","dir":"Articles","previous_headings":"Tables","what":"Examples","title":"TrueType-Aware Automatic Column Widths","text":"can see tables structure value contents varying verbosity column row labels. rtables’ default column widths (implemented via formatters::propose_column_widths) takes maximum width required label value column (row-label pseudo column): means width third column slightly smaller tbl2 column label longer wider group summary cell values. first second columns remain cell value widths already slightly larger labels tbl1. Meanwhile, verbose column labels tbl3 result dramatically wider column widths, propose_column_widths enforces wrapping even within column labels: Meanwhile, def_colwidths gives widths 3 columns tbl2 3 tables: see, however, label-row width reduced due label_width_ins constraint, can vary maximum width row labels need wrapping: done examples default monospace font used rtables formatters, difference often particularly large using TrueType font verbose labels, many letters larger print widths punctuation numeric digit characters: note (fictional realistically verbose) column labels tbl3, default behavior formatters fit single page even without padding columns, widths take space-character widths (unit formatters calculates widths ) standard page spaces width available. column widths calculated def_colwidths, however, easily fit single page.","code":"library(junco) #> Loading required package: formatters #>  #> Attaching package: 'formatters' #> The following object is masked from 'package:base': #>  #>     %||% #> Loading required package: rtables #> Loading required package: magrittr #>  #> Attaching package: 'rtables' #> The following object is masked from 'package:utils': #>  #>     str #> Registered S3 method overwritten by 'tern': #>   method   from  #>   tidy.glm broom  adsl2 <- ex_adsl adsl2$ARM2 <- adsl2$ARM levels(adsl2$ARM2) <- c(\"A\", \"B\", \"C\") adsl2$ARM3 <- adsl2$ARM levels(adsl2$ARM3) <- c(\"Full Drug Name Of Drug X\", \"Current Best-Practice Standard Of Care\", \"The Weird Other Arm\")  ## col-labels unmodified (middling width) lyt1 <- basic_table() |>   split_cols_by(\"ARM\") |>   split_rows_by(\"RACE\") |>   summarize_row_groups(format = \"xx (xx.xx%)\") |>   analyze(\"DCSREAS\")  tbl1 <- build_table(lyt1, adsl2)  head(tbl1)  #>                                    A: Drug X    B: Placebo    C: Combination #> ———————————————————————————————————————————————————————————————————————————— #> ASIAN                             68 (50.75%)   67 (50.00%)    73 (55.30%)   #>   ADVERSE EVENT                        4             4              5        #>   LACK OF EFFICACY                     5             5              2        #>   PHYSICIAN DECISION                   2             4              4        #>   PROTOCOL VIOLATION                   1             7              5        #>   WITHDRAWAL BY PARENT/GUARDIAN        3             1              2  ## super narrow column labels lyt2 <- basic_table() |>   split_cols_by(\"ARM\", labels_var = \"ARM2\") |>   split_rows_by(\"RACE\") |>   summarize_row_groups(format = \"xx (xx.xx%)\") |>   analyze(\"DCSREAS\")  tbl2 <- build_table(lyt2, adsl2)  head(tbl2) #>                                        A             B             C      #> ————————————————————————————————————————————————————————————————————————— #> ASIAN                             68 (50.75%)   67 (50.00%)   73 (55.30%) #>   ADVERSE EVENT                        4             4             5      #>   LACK OF EFFICACY                     5             5             2      #>   PHYSICIAN DECISION                   2             4             4      #>   PROTOCOL VIOLATION                   1             7             5      #>   WITHDRAWAL BY PARENT/GUARDIAN        3             1             2  ## super wide column labels lyt3 <-  basic_table() |>   split_cols_by(\"ARM\", labels_var = \"ARM3\") |>   split_rows_by(\"RACE\") |>   summarize_row_groups(format = \"xx (xx.xx%)\") |>   analyze(\"DCSREAS\")  tbl3 <- build_table(lyt3, adsl2) head(tbl3) #>                                   Full Drug Name Of Drug X   Current Best-Practice Standard Of Care   The Weird Other Arm #> ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                                   68 (50.75%)                       67 (50.00%)                     73 (55.30%)     #>   ADVERSE EVENT                              4                                 4                               5          #>   LACK OF EFFICACY                           5                                 5                               2          #>   PHYSICIAN DECISION                         2                                 4                               4          #>   PROTOCOL VIOLATION                         1                                 7                               5          #>   WITHDRAWAL BY PARENT/GUARDIAN              3                                 1                               2 propose_column_widths(tbl1) #> [1] 41 11 11 14 propose_column_widths(tbl2) #> [1] 41 11 11 11 propose_column_widths(tbl3) #> [1] 41 24 38 19 def_colwidths(tbl1, fontspec = font_spec(), label_width_ins = 2, col_gap = 0) #> [1] 30 11 11 11 def_colwidths(tbl2, fontspec = font_spec(), label_width_ins = 2, col_gap = 0) #> [1] 30 11 11 11 def_colwidths(tbl3, fontspec = font_spec(), label_width_ins = 2, col_gap = 0) #> [1] 30 11 11 11 ## bigger than 2, but not what we got from propose_column_labels def_colwidths(tbl1, fontspec = font_spec(), label_width_ins = 2.2, col_gap = 0) #> [1] 33 11 11 11 ## bigger than required so we get same row label width as propose_column_widths def_colwidths(tbl1, fontspec = font_spec(), label_width_ins = 6, col_gap = 0) #> [1] 41 11 11 11 fspec_times <- font_spec(\"Times\", 9) propose_column_widths(tbl3, fontspec = fspec_times ) #> [1] 93 45 65 36 def_colwidths(tbl3, fontspec = fspec_times, label_width_ins = 2, col_gap = 0) #> [1] 64 20 20 20 sum(propose_column_widths(tbl3, fontspec = fspec_times)) #> [1] 239 formatters::page_lcpp(fontspec = fspec_times )$cpp #> [1] 224"},{"path":"na.html/articles/auto_colwidths.html","id":"listings","dir":"Articles","previous_headings":"","what":"Listings","title":"TrueType-Aware Automatic Column Widths","text":"Listings, unlike tables, often text cell values, sometimes even concatenations multiple demographic variables single column. also row-labels pseudo-column present tables. , need different, much complicated, algorithm calculate good column widths.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"pagination-assumptions-1","dir":"Articles","previous_headings":"Listings","what":"Pagination Assumptions","title":"TrueType-Aware Automatic Column Widths","text":"def_colwidths assumes listings horizontally paginated, columns, gaps , must fit within width single page.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"optimality-criterion","dir":"Articles","previous_headings":"Listings","what":"Optimality Criterion","title":"TrueType-Aware Automatic Column Widths","text":"listings, optimize number total lines listing require print, including repetition table header. helps control total size resulting RTF file, well generally providing better reading experience listing. constrain column widths words within cell values need broken word wrapping, possible. define “words” purpose string characters separated space(s) “-”. reason, recommend concatenation values listing column values split e.g., \" / \" rather \"/\", even though makes value slightly longer gives algorithm much flexibility find column widths don’t break individual “words”. translates, generally finding widths wrapping, single column isn’t wrapped many times others within majority rows. practice, found results listings legible aesthetically reasonable.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"algorithm","dir":"Articles","previous_headings":"Listings","what":"Algorithm","title":"TrueType-Aware Automatic Column Widths","text":"algorithm selecting column widths two parts. First, column individually, widths result different numbers total lines cells columns determined; constraint words within cells broken key , dramatically reduces number widths actually result different numbers lines. second step search space candidate column widths collectively optimal set, combines less total available space. use following data illustrate:","code":"library(rlistings) #> Loading required package: tibble  adae <- pharmaverseadam::adae adae$AEOUT <- gsub(\"/\", \" / \", adae$AEOUT) adsl <-  pharmaverseadam::adsl  adsl <- adsl[, c(\"USUBJID\", setdiff(names(adsl), names(adae)))]  lstdat <- merge(adae, adsl, by = \"USUBJID\") var_labels(lstdat) <- c(var_labels(adae), var_labels(adsl)[-1]) lstdat$demog <- with_label(paste(lstdat$RACE, lstdat$SEX, lstdat$AGE, sep = \" / \"), \"Demographic Information\")  lsting <- as_listing(lstdat,key_cols = c(\"USUBJID\"),                      disp_cols = c(\"ACTARM\", \"COUNTRY\", \"demog\", \"AESEV\", \"AEBODSYS\", \"AEDECOD\", \"ASTDTM\", \"AENDTM\", \"AEOUT\", \"EOSSTT\"))"},{"path":"na.html/articles/auto_colwidths.html","id":"candidate-column-widths","dir":"Articles","previous_headings":"Listings > Algorithm","what":"Candidate Column Widths","title":"TrueType-Aware Automatic Column Widths","text":"example, last cell demographics column contains value Broken according definition, contains following “words” must remain whole column width selection. Assuming monospace font simplicity, , smallest possible width column using width, first two words fit line, third another, fourth , “words” five 8 fit final line, total four lines. call packing lines Recall care words allocated , total number lines required, colwidth 10, allow fifth word (/) packed line fourth, resulting AMERICAN /, results number total lines, considered distinct possible column width respect cell. next column width results fewer lines cell one words one three able packed single line, spaces , 16 case. column width, get three lines enough room space required consolidate final two lines one. Increasing column width 17, however, allows us get two lines: Finally, last possible width different line total smallest width fit entire value, .e., 34. cell, four, four, candidate column widths.","code":"demcell <- lstdat$demog[nrow(lstdat)] demcell #> [1] \"BLACK OR AFRICAN AMERICAN / F / 74\" wrds <- strsplit(demcell, \"[ -]\")[[1]] wrds #> [1] \"BLACK\"    \"OR\"       \"AFRICAN\"  \"AMERICAN\" \"/\"        \"F\"        \"/\"        #> [8] \"74\" max(nchar(wrds)) #> [1] 8 packed_widths <- function(...) {   lst <- list(...)   nchar(vapply(lst, paste, collapse = \" \", \"\")) } packed_widths(wrds[1:2],               wrds[3],               wrds[4],               wrds[5:8]) #> [1] 8 7 8 8 packed_widths(wrds[1:3], wrds[4], wrds[5:8]) #> [1] 16  8  8 packed_widths(wrds[1:3],               wrds[4:8]) #> [1] 16 17"},{"path":"na.html/articles/auto_colwidths.html","id":"selecting-the-optimal-set-of-widths","dir":"Articles","previous_headings":"Listings > Algorithm","what":"Selecting The Optimal Set Of Widths","title":"TrueType-Aware Automatic Column Widths","text":"full set candidate widths column individually, algorithm selecting optimal collective set follows: Remove candidate widths result column labels requiring allowable lines (default 3) Initialize smallest candidate width column Determine column requires largest total lines , select column width goto step (1) otherwise, end search spread remaining available space equally among columns able end search step (2b) even another column candidate width available require less lines, total lines document determined solely column requires lines, changing won’t affect outcome.","code":""},{"path":"na.html/articles/auto_colwidths.html","id":"example","dir":"Articles","previous_headings":"Listings","what":"Example","title":"TrueType-Aware Automatic Column Widths","text":"def_colwidths calls listing_column_widths default values passed listing_df object. call latter directly explicitness, make column widths directly comparable via export_as_txt output. Versus giving column equal portion width (admittedly ill-conceived strategy) see algorithm saved 9.11 percent total lines required (set ) naive column widths instance.","code":"fspec_times8 <- font_spec(\"Times\", 8, 1) cw <- listing_column_widths(lsting, col_gap = 0, fontspec = fspec_times8, verbose = TRUE) #> Optimizng Column Widths #> Initial lines required: 3979 #> Available adjustment: 33 spaces #> COL 10 width: 26->51 lines req: 3825->1914 #> COL 6 width: 40->48 lines req: 3415->2974  txt <- export_as_txt(lsting, pg_width = inches_to_spaces(8.88, fontspec = fspec_times8),                      lpp = NULL, colwidths = cw,                      fontspec = fspec_times8, col_gap = 0)  txt2 <- strsplit(txt, \"\\n\", fixed = FALSE)[[1]] head(txt2) #> [1] \"Unique Subject    Description of                                                                                                                                                                              Analysis Start    Analysis End                                                                                    \" #> [2] \"  Identifier        Actual Arm        Country    Demographic Information      Severity/Intensity                 Body System or Organ Class                           Dictionary-Derived Term                    Date/Time        Date/Time                 Outcome of Adverse Event                   End of Study Status      \" #> [3] \"————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\" #> [4] \"  01-701-1015        Placebo            USA           WHITE / F / 63                 MILD                GENERAL DISORDERS AND ADMINISTRATION SITE                   APPLICATION SITE ERYTHEMA                  2014-01-03           NA                   NOT RECOVERED / NOT RESOLVED                      COMPLETED           \" #> [5] \"                                                                                                                         CONDITIONS                                                                                                                                                                                             \" #> [6] \"                     Placebo            USA           WHITE / F / 63                 MILD                GENERAL DISORDERS AND ADMINISTRATION SITE                   APPLICATION SITE PRURITUS                  2014-01-03           NA                   NOT RECOVERED / NOT RESOLVED                      COMPLETED           \" length(txt2) #> [1] 2096 txtbad <- export_as_txt(lsting, pg_width = inches_to_spaces(8.88, fontspec = fspec_times8),                      lpp = NULL, colwidths = rep(floor(320/11), 11),                      fontspec = fspec_times8, col_gap = 0) txt2bad <- strsplit(txtbad, \"\\n\", fixed = TRUE)[[1]] head(txt2bad) #> [1] \"  Unique Subject Identifier    Description of Actual Arm             Country              Demographic Information        Severity/Intensity       Body System or Organ Class     Dictionary-Derived Term     Analysis Start Date/Time      Analysis End Date/Time      Outcome of Adverse Event        End of Study Status     \" #> [2] \"———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\" #> [3] \"         01-701-1015                    Placebo                        USA                    WHITE / F / 63                    MILD                 GENERAL DISORDERS AND      APPLICATION SITE ERYTHEMA           2014-01-03                       NA              NOT RECOVERED / NOT RESOLVED           COMPLETED          \" #> [4] \"                                                                                                                                                      ADMINISTRATION SITE                                                                                                                                                      \" #> [5] \"                                                                                                                                                          CONDITIONS                                                                                                                                                           \" #> [6] \"                                        Placebo                        USA                    WHITE / F / 63                    MILD                 GENERAL DISORDERS AND      APPLICATION SITE PRURITUS           2014-01-03                       NA              NOT RECOVERED / NOT RESOLVED           COMPLETED          \" length(txt2bad) #> [1] 2306"},{"path":"na.html/articles/junco.html","id":"junco-tabulation","dir":"Articles","previous_headings":"","what":"junco Tabulation","title":"Tabulation","text":"junco R package provides functions create analyses clinical trials R. considered add-/alternative tern package, first package available NEST framework analysis functions main focus clinical trials. core functionality tabulation built general purpose rtables package. New users first begin reading “Introduction tern” “Introduction rtables” vignettes. packages used vignette : datasets used vignette : common data manipulation /datasets, adding extra variables defining tabulation settings, like treatment variable, control group table.","code":"library(rtables) library(junco) library(tern) library(dplyr) adsl <- ex_adsl adae <- ex_adae advs <- ex_advs trtvar <- \"ARM\" ctrl_grp <- \"B: Placebo\"  non_ctrl_grp <- setdiff(levels(adsl[[trtvar]]), ctrl_grp)  adsl$colspan_trt <- factor(ifelse(adsl[[trtvar]] == ctrl_grp, \" \", \"Active Study Agent\"),   levels = c(\"Active Study Agent\", \" \") )  adsl$rrisk_header <- \"Risk Difference (%) (95% CI)\" adsl$rrisk_label <- paste(adsl[[trtvar]], paste(\"vs\", ctrl_grp)) adsl$rrisk_header_vs <- \"Difference in Mean Change (95% CI)\"  # define colspan_trt_map colspan_trt_map <- create_colspan_map(adsl,   non_active_grp = ctrl_grp,   non_active_grp_span_lbl = \" \",   active_grp_span_lbl = \"Active Study Agent\",   colspan_var = \"colspan_trt\",   trt_var = trtvar )  # define reference group specification ref_path <- c(\"colspan_trt\", \" \", trtvar, ctrl_grp)  adae[[\"TRTEMFL\"]] <- \"Y\"  # add adsl variables to adae adae <- adae %>% left_join(., adsl)  advs <- advs %>% left_join(., adsl)   advs[advs[[\"ABLFL\"]] == \"Y\", \"CHG\"] <- NA"},{"path":"na.html/articles/junco.html","id":"junco-analysis-functions","dir":"Articles","previous_headings":"","what":"junco Analysis Functions","title":"Tabulation","text":"junco analysis functions used combination rtables layout functions, rtables::analyze rtables::summarize_row_groups, pipeline creates rtables table. apply statistical logic layout rtables table. table layout materialized rtables::build_table function data. junco analysis functions functions can applied afun either rtables::analyze cfun rtables::summarize_row_groups function. slightly different approach tern, table layout constructed using analyze functions, wrappers around rtables::analyze. Just like tern analyze functions, junco analysis functions offer various methods useful perspective clinical trials statistical projects. Examples junco analysis functions a_freq_j, a_freq_subcol_j, a_summarize_aval_chg_diff_j a_summarize_ex_j. complete list analysis functions can found junco website functions reference.","code":""},{"path":"na.html/articles/junco.html","id":"tabulation-examples-using-a_freq_j","dir":"Articles","previous_headings":"","what":"Tabulation Examples using a_freq_j","title":"Tabulation","text":"present example usage a_freq_j common AE table clinical trials. standard table adverse events summary system organ class preferred term. frequency counts preferred term, multiple occurrences AE individual count . junco package, table can created several calls a_freq_j function tabulation pipeline using rtables::analyze rtables::summarize_row_groups. next paragraph, ’ll describe difference versus using tern package, similar AE table. Differences define layout well differences resulting table. Using junco analysis function a_freq_j define layout, using 2 analyze calls (overall summary - TRTEMFL preferred term - AEDECOD), 1 summarize_row_groups call (system organ class - AEBODSYS) Note specifications, extra_args_rr can re-used first second analyze call, well -call summarize_row_groups. overall summary, add extra specification restrict TRTEMFL = “Y” values label show row. Now just build view resulting table.","code":"## extra args for a_freq_j controlling specification of ## reference group, denominator used to calculate percentages, ## and other details extra_args_rr <- list(   denom = \"n_altdf\",   riskdiff = TRUE,   ref_path = ref_path,   method = \"wald\",   .stats = c(\"count_unique_fraction\") ) lyt <- basic_table(   top_level_section_div = \" \",   colcount_format = \"N=xx\" ) %>%   ## main columns   split_cols_by(\"colspan_trt\", split_fun = trim_levels_to_map(map = colspan_trt_map)) %>%   split_cols_by(trtvar, show_colcounts = TRUE) %>%   ## risk diff columns, note nested = FALSE   split_cols_by(\"rrisk_header\", nested = FALSE) %>%   split_cols_by(trtvar, labels_var = \"rrisk_label\", split_fun = remove_split_levels(ctrl_grp),     show_colcounts = FALSE   ) %>%   analyze(\"TRTEMFL\", afun = a_freq_j,     extra_args = append(extra_args_rr, list(val = \"Y\", label = \"Number of subjects with AE\"))   ) %>%      split_rows_by(\"AEBODSYS\",     split_label = \"System Organ Class\",     split_fun = trim_levels_in_group(\"AEDECOD\"),     label_pos = \"topleft\",     section_div = c(\" \"),     nested = FALSE   ) %>%   summarize_row_groups(\"AEBODSYS\", cfun = a_freq_j,     extra_args = extra_args_rr   ) %>%   analyze(\"AEDECOD\", afun = a_freq_j,     extra_args = extra_args_rr   ) tbl <- build_table(lyt, adae, alt_counts_df = adsl) head(tbl, 10) #>                                   Active Study Agent                                                                             #>                               A: Drug X    C: Combination   B: Placebo                 Risk Difference (%) (95% CI)              #> System Organ Class              N=134          N=132           N=134      A: Drug X vs B: Placebo   C: Combination vs B: Placebo #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Number of subjects with AE   122 (91.0%)    120 (90.9%)     123 (91.8%)      -0.7 (-7.5, 6.0)             -0.9 (-7.6, 5.9)       #>                                                                                                                                  #> cl A.1                       78 (58.2%)      89 (67.4%)     75 (56.0%)       2.2 (-9.6, 14.1)            11.5 (-0.1, 23.1)       #>   dcd A.1.1.1.1              50 (37.3%)      63 (47.7%)     45 (33.6%)       3.7 (-7.7, 15.2)             14.1 (2.5, 25.8)       #>   dcd A.1.1.1.2              48 (35.8%)      50 (37.9%)     48 (35.8%)       0.0 (-11.5, 11.5)            2.1 (-9.5, 13.7)       #>                                                                                                                                  #> cl B.1                       47 (35.1%)      43 (32.6%)     49 (36.6%)      -1.5 (-13.0, 10.0)           -4.0 (-15.4, 7.4)       #>   dcd B.1.1.1.1              47 (35.1%)      43 (32.6%)     49 (36.6%)      -1.5 (-13.0, 10.0)           -4.0 (-15.4, 7.4)       #>                                                                                                                                  #> cl B.2                       79 (59.0%)      85 (64.4%)     74 (55.2%)       3.7 (-8.1, 15.6)             9.2 (-2.6, 20.9)       #>   dcd B.2.1.2.1              49 (36.6%)      52 (39.4%)     44 (32.8%)       3.7 (-7.7, 15.1)             6.6 (-5.0, 18.1)       #>   dcd B.2.2.3.1              48 (35.8%)      51 (38.6%)     54 (40.3%)       -4.5 (-16.1, 7.1)           -1.7 (-13.4, 10.1)      #>                                                                                                                                  #> cl C.1                       43 (32.1%)      43 (32.6%)     46 (34.3%)       -2.2 (-13.5, 9.0)           -1.8 (-13.1, 9.6)"},{"path":"na.html/articles/junco.html","id":"minor-differences-between-current-table-and-a-similar-table-using-tern-analyze-functions-","dir":"Articles","previous_headings":"Tabulation Examples using a_freq_j","what":"Minor differences between current table and a similar table using tern analyze functions.","title":"Tabulation","text":"similar table generated tern functions (summarize_occurrences count_occurrences), close possible target AE table produced tbl. main differences resulting table comparison reference group reversed (ie B: Placebo vs. : Drug X instead : Drug X vs. B: Placebo). extra column spanner active treatment group present tern version, added.","code":"lyt_tern <- basic_table(   top_level_section_div = \" \",   colcount_format = \"N=xx\" ) %>%   ## main columns   split_cols_by(trtvar,      show_colcounts = TRUE,      split_fun = add_riskdiff(arm_x = ctrl_grp, arm_y = non_ctrl_grp)   ) %>%   analyze_num_patients(     vars = \"USUBJID\",     .stats = c(\"unique\"),     .labels = c(       unique = \"Total number of patients with at least one adverse event\"     ),      riskdiff = TRUE   ) %>%     split_rows_by(\"AEBODSYS\",     split_label = \"System Organ Class\",     split_fun = trim_levels_in_group(\"AEDECOD\"),     label_pos = \"topleft\",     section_div = c(\" \"),     nested = FALSE   ) %>%   summarize_occurrences(var = \"AEBODSYS\",     denom = \"N_col\",     riskdiff = TRUE,     .stats = c(\"count_fraction\")   ) %>%   count_occurrences(vars = \"AEDECOD\",       denom = \"N_col\",     riskdiff = TRUE,     .stats = c(\"count_fraction\")   )   tbl_tern <- build_table(lyt_tern, adae, alt_counts_df = adsl) head(tbl_tern, 10) #>                                                                                                         Risk Difference (%) (95% CI)   Risk Difference (%) (95% CI)  #>                                                             A: Drug X    B: Placebo    C: Combination     B: Placebo vs. A: Drug X     B: Placebo vs. C: Combination #> System Organ Class                                            N=134         N=134          N=132                   N=268                           N=266             #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Total number of patients with at least one adverse event   122 (91.0%)   123 (91.8%)    120 (90.9%)           0.7 (-6.0 - 7.5)               0.9 (-5.9 - 7.6)        #>                                                                                                                                                                      #> cl A.1                                                     78 (58.2%)     75 (56%)       89 (67.4%)          -2.2 (-14.1 - 9.6)             -11.5 (-23.1 - 0.1)      #>   dcd A.1.1.1.1                                            50 (37.3%)    45 (33.6%)      63 (47.7%)          -3.7 (-15.2 - 7.7)            -14.1 (-25.8 - -2.5)      #>   dcd A.1.1.1.2                                            48 (35.8%)    48 (35.8%)      50 (37.9%)          0.0 (-11.5 - 11.5)             -2.1 (-13.7 - 9.5)       #>                                                                                                                                                                      #> cl B.1                                                     47 (35.1%)    49 (36.6%)      43 (32.6%)          1.5 (-10.0 - 13.0)              4.0 (-7.4 - 15.4)       #>   dcd B.1.1.1.1                                            47 (35.1%)    49 (36.6%)      43 (32.6%)          1.5 (-10.0 - 13.0)              4.0 (-7.4 - 15.4)       #>                                                                                                                                                                      #> cl B.2                                                      79 (59%)     74 (55.2%)      85 (64.4%)          -3.7 (-15.6 - 8.1)             -9.2 (-20.9 - 2.6)       #>   dcd B.2.1.2.1                                            49 (36.6%)    44 (32.8%)      52 (39.4%)          -3.7 (-15.1 - 7.7)             -6.6 (-18.1 - 5.0)       #>   dcd B.2.2.3.1                                            48 (35.8%)    54 (40.3%)      51 (38.6%)          4.5 (-7.1 - 16.1)              1.7 (-10.1 - 13.4)       #>                                                                                                                                                                      #> cl C.1                                                     43 (32.1%)    46 (34.3%)      43 (32.6%)          2.2 (-9.0 - 13.5)               1.8 (-9.6 - 13.1)"},{"path":"na.html/articles/junco.html","id":"a_freq_j-supports-various-methods-for-the-risk-difference-column-","dir":"Articles","previous_headings":"Tabulation Examples using a_freq_j","what":"a_freq_j supports various methods for the risk difference column.","title":"Tabulation","text":"One statistical options control usage a_freq_j method risk difference calculation risk difference columns. methods available ´tern::estimate_proportion_diff´ can supported. Eg, switching waldcc, others can done. option switch methods using tern count_occurrences layouts, wald method available.","code":"extra_args_rr[[\"method\"]] <- \"waldcc\"  tbl2 <- basic_table(   top_level_section_div = \" \",   colcount_format = \"N=xx\" ) %>%   ## main columns   split_cols_by(\"colspan_trt\", split_fun = trim_levels_to_map(map = colspan_trt_map)) %>%   split_cols_by(trtvar, show_colcounts = TRUE) %>%   ## risk diff columns, note nested = FALSE   split_cols_by(\"rrisk_header\", nested = FALSE) %>%   split_cols_by(trtvar, labels_var = \"rrisk_label\", split_fun = remove_split_levels(ctrl_grp),     show_colcounts = FALSE) %>%   split_rows_by(\"AEBODSYS\",     split_label = \"System Organ Class\",     split_fun = trim_levels_in_group(\"AEDECOD\"),     label_pos = \"topleft\",     section_div = c(\" \"),     nested = FALSE   ) %>%   summarize_row_groups(\"AEBODSYS\", cfun = a_freq_j,     extra_args = extra_args_rr   ) %>%   analyze(\"AEDECOD\", afun = a_freq_j,     extra_args = extra_args_rr   ) %>%    build_table(adae, alt_counts_df = adsl)  head(tbl2, 10) #>                          Active Study Agent                                                                            #>                      A: Drug X    C: Combination   B: Placebo                Risk Difference (%) (95% CI)              #> System Organ Class     N=134          N=132          N=134      A: Drug X vs B: Placebo   C: Combination vs B: Placebo #> —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> cl A.1               78 (58.2%)     89 (67.4%)     75 (56.0%)      2.2 (-10.4, 14.8)           11.5 (-0.9, 23.8)       #>   dcd A.1.1.1.1      50 (37.3%)     63 (47.7%)     45 (33.6%)      3.7 (-8.5, 15.9)             14.1 (1.7, 26.6)       #>   dcd A.1.1.1.2      48 (35.8%)     50 (37.9%)     48 (35.8%)      0.0 (-12.2, 12.2)           2.1 (-10.3, 14.4)       #>                                                                                                                        #> cl B.1               47 (35.1%)     43 (32.6%)     49 (36.6%)     -1.5 (-13.7, 10.7)           -4.0 (-16.2, 8.2)       #>   dcd B.1.1.1.1      47 (35.1%)     43 (32.6%)     49 (36.6%)     -1.5 (-13.7, 10.7)           -4.0 (-16.2, 8.2)       #>                                                                                                                        #> cl B.2               79 (59.0%)     85 (64.4%)     74 (55.2%)      3.7 (-8.9, 16.3)             9.2 (-3.3, 21.7)       #>   dcd B.2.1.2.1      49 (36.6%)     52 (39.4%)     44 (32.8%)      3.7 (-8.4, 15.9)             6.6 (-5.7, 18.8)       #>   dcd B.2.2.3.1      48 (35.8%)     51 (38.6%)     54 (40.3%)      -4.5 (-16.8, 7.9)           -1.7 (-14.2, 10.8)      #>                                                                                                                        #> cl C.1               43 (32.1%)     43 (32.6%)     46 (34.3%)      -2.2 (-14.3, 9.8)           -1.8 (-13.8, 10.3)      #>   dcd C.1.1.1.3      43 (32.1%)     43 (32.6%)     46 (34.3%)      -2.2 (-14.3, 9.8)           -1.8 (-13.8, 10.3)"},{"path":"na.html/articles/junco.html","id":"creation-of-subgroup-tables-with-a_freq_j","dir":"Articles","previous_headings":"Tabulation Examples using a_freq_j","what":"Creation of Subgroup tables with a_freq_j","title":"Tabulation","text":"junco function a_freq_j also supports creation subgroup tables, demonstrated table. table generated using tern count_occurrences methods.","code":"extra_args_rr_common <- list(   denom = \"n_altdf\",   denom_by = \"SEX\" )  extra_args_rr <- append(   extra_args_rr_common,    list(     riskdiff = FALSE,     extrablankline = TRUE,     .stats = c(\"n_altdf\"),     label_fstr = \"Gender: %s\"   ) )  extra_args_rr2 <- append(   extra_args_rr_common,    list(     riskdiff = TRUE,     ref_path = ref_path,     method = \"wald\",     .stats = c(\"count_unique_denom_fraction\"),     na_str = rep(\"NA\", 3)   ) )  tbl <- basic_table(   top_level_section_div = \" \",   colcount_format = \"N=xx\" ) %>%   ## main columns   split_cols_by(\"colspan_trt\", split_fun = trim_levels_to_map(map = colspan_trt_map)) %>%   split_cols_by(trtvar, show_colcounts = TRUE) %>%   ## risk diff columns, note nested = FALSE   split_cols_by(\"rrisk_header\", nested = FALSE) %>%   split_cols_by(trtvar, labels_var = \"rrisk_label\", split_fun = remove_split_levels(ctrl_grp),     show_colcounts = FALSE) %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%    summarize_row_groups(\"SEX\", cfun = a_freq_j,     extra_args = extra_args_rr   ) %>%   split_rows_by(\"TRTEMFL\",     split_fun = keep_split_levels(\"Y\"),     indent_mod = -1L,     section_div = c(\" \")   ) %>%   summarize_row_groups(\"TRTEMFL\",     cfun = a_freq_j,     extra_args = append(extra_args_rr2, list(label =  \"Subjects with >=1 AE\", extrablankline = TRUE))   ) %>%        split_rows_by(\"AEBODSYS\",     split_label = \"System Organ Class\",     split_fun = trim_levels_in_group(\"AEDECOD\"),     label_pos = \"topleft\",     section_div = c(\" \"),     nested = TRUE   ) %>%   summarize_row_groups(\"AEBODSYS\", cfun = a_freq_j,     extra_args = extra_args_rr2   ) %>%   analyze(\"AEDECOD\", afun = a_freq_j,     extra_args = extra_args_rr2   ) %>%    build_table(adae, alt_counts_df = adsl)   head(tbl, 30) #>                              Active Study Agent                                                                                #>                          A: Drug X     C: Combination    B: Placebo                  Risk Difference (%) (95% CI)              #> System Organ Class         N=134           N=132            N=134       A: Drug X vs B: Placebo   C: Combination vs B: Placebo #> —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Gender: F                   79               66              77                                                                #>                                                                                                                                #> Subjects with >=1 AE   72/79 (91.1%)   61/66 (92.4%)    73/77 (94.8%)      -3.7 (-11.7, 4.3)           -2.4 (-10.5, 5.7)       #>                                                                                                                                #>   cl A.1               53/79 (67.1%)   42/66 (63.6%)    48/77 (62.3%)      4.8 (-10.2, 19.7)           1.3 (-14.6, 17.2)       #>     dcd A.1.1.1.1      34/79 (43.0%)   32/66 (48.5%)    30/77 (39.0%)      4.1 (-11.3, 19.5)            9.5 (-6.7, 25.8)       #>     dcd A.1.1.1.2      32/79 (40.5%)   24/66 (36.4%)    31/77 (40.3%)      0.2 (-15.2, 15.6)           -3.9 (-19.9, 12.1)      #>                                                                                                                                #>   cl B.1               28/79 (35.4%)   21/66 (31.8%)    32/77 (41.6%)      -6.1 (-21.4, 9.1)           -9.7 (-25.5, 6.0)       #>     dcd B.1.1.1.1      28/79 (35.4%)   21/66 (31.8%)    32/77 (41.6%)      -6.1 (-21.4, 9.1)           -9.7 (-25.5, 6.0)       #>                                                                                                                                #>   cl B.2               46/79 (58.2%)   40/66 (60.6%)    43/77 (55.8%)      2.4 (-13.1, 17.9)           4.8 (-11.4, 20.9)       #>     dcd B.2.1.2.1      29/79 (36.7%)   19/66 (28.8%)    30/77 (39.0%)     -2.3 (-17.5, 13.0)           -10.2 (-25.6, 5.3)      #>     dcd B.2.2.3.1      30/79 (38.0%)   24/66 (36.4%)    30/77 (39.0%)     -1.0 (-16.3, 14.3)           -2.6 (-18.5, 13.3)      #>                                                                                                                                #>   cl C.1               30/79 (38.0%)   25/66 (37.9%)    35/77 (45.5%)      -7.5 (-22.9, 8.0)           -7.6 (-23.7, 8.6)       #>     dcd C.1.1.1.3      30/79 (38.0%)   25/66 (37.9%)    35/77 (45.5%)      -7.5 (-22.9, 8.0)           -7.6 (-23.7, 8.6)       #>                                                                                                                                #>   cl C.2               23/79 (29.1%)   28/66 (42.4%)    33/77 (42.9%)     -13.7 (-28.7, 1.2)           -0.4 (-16.7, 15.8)      #>     dcd C.2.1.2.1      23/79 (29.1%)   28/66 (42.4%)    33/77 (42.9%)     -13.7 (-28.7, 1.2)           -0.4 (-16.7, 15.8)      #>                                                                                                                                #>   cl D.1               45/79 (57.0%)   39/66 (59.1%)    38/77 (49.4%)      7.6 (-8.0, 23.2)             9.7 (-6.6, 26.0)       #>     dcd D.1.1.1.1      25/79 (31.6%)   26/66 (39.4%)    28/77 (36.4%)     -4.7 (-19.6, 10.1)           3.0 (-12.9, 19.0)       #>     dcd D.1.1.4.2      30/79 (38.0%)   26/66 (39.4%)    21/77 (27.3%)      10.7 (-3.9, 25.3)           12.1 (-3.3, 27.5)       #>                                                                                                                                #>   cl D.2               26/79 (32.9%)   32/66 (48.5%)    40/77 (51.9%)     -19.0 (-34.3, -3.8)          -3.5 (-19.9, 13.0)      #>     dcd D.2.1.5.3      26/79 (32.9%)   32/66 (48.5%)    40/77 (51.9%)     -19.0 (-34.3, -3.8)          -3.5 (-19.9, 13.0)      #>                                                                                                                                #> Gender: M                   51               60              55                                                                #>                                                                                                                                #> Subjects with >=1 AE   46/51 (90.2%)   53/60 (88.3%)    48/55 (87.3%)      2.9 (-9.1, 14.9)            1.1 (-10.9, 13.0)       #>                                                                                                                                #>   cl A.1               24/51 (47.1%)   41/60 (68.3%)    25/55 (45.5%)      1.6 (-17.4, 20.6)            22.9 (5.2, 40.5)       #>     dcd A.1.1.1.1      16/51 (31.4%)   29/60 (48.3%)    15/55 (27.3%)      4.1 (-13.2, 21.4)            21.1 (3.8, 38.3)       #>     dcd A.1.1.1.2      15/51 (29.4%)   22/60 (36.7%)    15/55 (27.3%)      2.1 (-15.0, 19.3)            9.4 (-7.6, 26.3)       #>                                                                                                                                #>   cl B.1               18/51 (35.3%)   21/60 (35.0%)    16/55 (29.1%)      6.2 (-11.6, 24.0)           5.9 (-11.1, 22.9)       #>     dcd B.1.1.1.1      18/51 (35.3%)   21/60 (35.0%)    16/55 (29.1%)      6.2 (-11.6, 24.0)           5.9 (-11.1, 22.9)"},{"path":"na.html/articles/junco.html","id":"other-junco-features-extra-statistics-have-been-added-to-some-tern-statistical-functions","dir":"Articles","previous_headings":"","what":"Other junco features : Extra Statistics have been added to some tern statistical functions","title":"Tabulation","text":"junco, added extra stats ancova: se lsmean, combined lsmean-CI (3d stat), combined lsmean_diff-CI (3d stat) analyze_vars_numeric: combined version mean-CI, median-CI, geom_mean-CI (available tern >= 0.9.6) similar extra stats Kaplan-Meier/survival methods","code":"tern::get_stats(\"summarize_ancova\") #> [1] \"n\"              \"lsmean\"         \"lsmean_diff\"    \"lsmean_diff_ci\" #> [5] \"pval\" tern::get_stats(\"analyze_vars_numeric\") #>  [1] \"n\"               \"sum\"             \"mean\"            \"sd\"              #>  [5] \"se\"              \"mean_sd\"         \"mean_se\"         \"mean_ci\"         #>  [9] \"mean_sei\"        \"mean_sdi\"        \"mean_pval\"       \"median\"          #> [13] \"mad\"             \"median_ci\"       \"quantiles\"       \"iqr\"             #> [17] \"range\"           \"min\"             \"max\"             \"median_range\"    #> [21] \"cv\"              \"geom_mean\"       \"geom_sd\"         \"geom_mean_sd\"    #> [25] \"geom_mean_ci\"    \"geom_cv\"         \"median_ci_3d\"    \"mean_ci_3d\"      #> [29] \"geom_mean_ci_3d\""},{"path":"na.html/articles/junco.html","id":"tabulation-examples-using-a_summarize_aval_chg_diff_j","dir":"Articles","previous_headings":"","what":"Tabulation Examples using a_summarize_aval_chg_diff_j","title":"Tabulation","text":"resulting table. columns comparison reference group optional. table without extra columns can produced specifying argument comp_btw_group = FALSE leaving 3 split_cols_by calls split_cols_by(“rrisk_header_vs”) split_cols_by(trtvar) split_cols_by_multivar(multivars[3]) resulting table without difference treatment group columns.","code":"multivars <- c(\"AVAL\", \"AVAL\", \"CHG\")  extra_args_3col <- list(   format_na_str = rep(NA, 3),    ref_path = ref_path,   ancova = FALSE,    comp_btw_group = TRUE,   multivars = multivars )   lyt_vs_p1 <- basic_table(   show_colcounts = FALSE,    colcount_format = \"N=xx\" ) %>%   ### first columns   split_cols_by(\"colspan_trt\",      split_fun = trim_levels_to_map(map = colspan_trt_map),      show_colcounts = FALSE   ) %>%   split_cols_by(trtvar,     show_colcounts = TRUE, colcount_format = \"N=xx\"   ) %>%   ## set up a 3 column split   split_cols_by_multivar(multivars,      varlabels = c(\"n/N (%)\", \"Mean (95% CI)\", \"Mean Change From Baseline (95% CI)\")   ) %>%   split_rows_by(\"PARAM\",      label_pos = \"topleft\",      split_label = \"Parameter\",      section_div = \" \",      split_fun = drop_split_levels   ) %>%   ## note the child_labels = hidden for AVISIT, these labels will be taken care off by   ## applying function summarize_aval_chg_diff further in the layout   split_rows_by(\"AVISIT\",      label_pos = \"topleft\",      split_label = \"Study Visit\",      split_fun = drop_split_levels,      child_labels = \"hidden\"   )   lyt_vs <- lyt_vs_p1 %>%    ### restart for the rrisk_header columns - note the nested = FALSE option   ### also note the child_labels = \"hidden\" in both PARAM and AVISIT   split_cols_by(\"rrisk_header_vs\", nested = FALSE) %>%   split_cols_by(trtvar,     split_fun = remove_split_levels(ctrl_grp),      labels_var = \"rrisk_label\",     show_colcounts = TRUE,      colcount_format = \"N=xx\"   ) %>%   ### difference columns : just 1 column & analysis needs to be done on change   split_cols_by_multivar(multivars[3],      varlabels = c(\" \")   ) %>%   ### the variable passed here in analyze is not used (STUDYID), it is a dummy var passing,   ### the function a_summarize_aval_chg_diff_j grabs the required vars from cols_by_multivar calls   analyze(\"STUDYID\",      afun = a_summarize_aval_chg_diff_j,      extra_args = extra_args_3col   )  result_vs <- build_table(lyt_vs, advs, alt_counts_df = adsl) head(result_vs, 15) #>                                                                                             Active Study Agent                                                                                                                                                           Difference in Mean Change (95% CI)           #>                                                            A: Drug X                                                                C: Combination                                                                B: Placebo                                   A: Drug X vs B: Placebo   C: Combination vs B: Placebo #> Parameter                                                    N=134                                                                       N=132                                                                       N=134                                              N=134                       N=132             #>   Study Visit                  n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI)       n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI)       n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI)                                                          #> ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Diastolic Blood Pressure                                                                                                                                                                                                                                                                                              #>   SCREENING                134/134 (100.0%)   50.0 (48.7, 51.2)                                        132/132 (100.0%)   50.2 (48.9, 51.5)                                        134/134 (100.0%)   50.8 (49.3, 52.2)                                                                                               #>   BASELINE                 134/134 (100.0%)   48.6 (47.2, 50.0)                                        132/132 (100.0%)   51.1 (49.8, 52.4)                                        134/134 (100.0%)   50.4 (49.1, 51.8)                                                                                               #>   WEEK 1 DAY 8             134/134 (100.0%)   50.3 (49.0, 51.5)            1.7 (-0.2, 3.5)             132/132 (100.0%)   48.9 (47.5, 50.2)           -2.3 (-4.0, -0.5)            134/134 (100.0%)   49.7 (48.4, 51.0)            -0.8 (-2.6, 1.1)                2.4 (-0.2, 5.0)             -1.5 (-4.1, 1.1)       #>   WEEK 2 DAY 15            134/134 (100.0%)   50.8 (49.5, 52.2)             2.2 (0.2, 4.2)             132/132 (100.0%)   50.0 (48.5, 51.4)            -1.1 (-3.1, 0.9)            134/134 (100.0%)   49.7 (48.3, 51.2)            -0.7 (-2.9, 1.4)                3.0 (0.0, 5.9)              -0.4 (-3.3, 2.5)       #>   WEEK 3 DAY 22            134/134 (100.0%)   50.7 (49.4, 52.0)             2.1 (0.3, 4.0)             132/132 (100.0%)   49.9 (48.6, 51.3)            -1.2 (-3.0, 0.7)            134/134 (100.0%)   49.1 (47.7, 50.4)            -1.3 (-3.2, 0.5)                3.5 (0.8, 6.1)              0.2 (-2.5, 2.8)        #>   WEEK 4 DAY 29            134/134 (100.0%)   50.1 (48.7, 51.5)            1.5 (-0.4, 3.3)             132/132 (100.0%)   49.7 (48.3, 51.1)            -1.4 (-3.3, 0.5)            134/134 (100.0%)   49.6 (48.4, 50.8)            -0.8 (-2.6, 1.0)                2.3 (-0.3, 4.9)             -0.6 (-3.2, 2.0)       #>   WEEK 5 DAY 36            134/134 (100.0%)   50.6 (49.3, 51.9)             2.0 (0.1, 3.9)             132/132 (100.0%)   49.1 (47.8, 50.4)           -2.0 (-3.9, -0.2)            134/134 (100.0%)   48.4 (47.0, 49.7)           -2.1 (-4.1, -0.1)                4.0 (1.3, 6.8)              0.1 (-2.6, 2.8)        #>                                                                                                                                                                                                                                                                                                                       #> Pulse Rate                                                                                                                                                                                                                                                                                                            #>   SCREENING                134/134 (100.0%)   49.6 (48.1, 51.1)                                        132/132 (100.0%)   49.3 (47.8, 50.8)                                        134/134 (100.0%)   49.4 (48.0, 50.8)                                                                                               #>   BASELINE                 134/134 (100.0%)   51.9 (50.5, 53.2)                                        132/132 (100.0%)   50.3 (48.6, 51.9)                                        134/134 (100.0%)   50.3 (48.8, 51.8)                                                                                               #>   WEEK 1 DAY 8             134/134 (100.0%)   50.1 (48.6, 51.5)            -1.8 (-3.8, 0.2)            132/132 (100.0%)   49.8 (48.5, 51.1)            -0.5 (-2.6, 1.7)            134/134 (100.0%)   49.3 (48.0, 50.6)            -1.0 (-3.0, 1.0)               -0.8 (-3.6, 2.0)             0.5 (-2.4, 3.5)        #>   WEEK 2 DAY 15            134/134 (100.0%)   49.7 (48.2, 51.2)            -2.2 (-4.3, 0.0)            132/132 (100.0%)   49.1 (47.7, 50.4)            -1.2 (-3.1, 0.8)            134/134 (100.0%)   50.8 (49.5, 52.1)            0.6 (-1.5, 2.6)                -2.7 (-5.6, 0.2)             -1.8 (-4.5, 1.0)       #>   WEEK 3 DAY 22            134/134 (100.0%)   50.5 (49.2, 51.7)            -1.4 (-3.3, 0.5)            132/132 (100.0%)   49.8 (48.6, 51.0)            -0.5 (-2.5, 1.6)            134/134 (100.0%)   49.9 (48.6, 51.3)            -0.4 (-2.2, 1.5)               -1.1 (-3.7, 1.6)             -0.1 (-2.9, 2.7)       #>   WEEK 4 DAY 29            134/134 (100.0%)   49.0 (47.5, 50.4)           -2.9 (-4.8, -1.0)            132/132 (100.0%)   51.0 (49.7, 52.3)            0.7 (-1.3, 2.7)             134/134 (100.0%)   50.0 (48.5, 51.4)            -0.3 (-2.4, 1.7)               -2.6 (-5.4, 0.2)             1.0 (-1.8, 3.9) multivars <- c(\"AVAL\", \"AVAL\", \"CHG\")  extra_args_3col <- list(   format_na_str = rep(NA, 3),    ancova = FALSE,    comp_btw_group = FALSE,   multivars = multivars )  lyt_vs2 <-  lyt_vs_p1 %>%    ### the variable passed here in analyze is not used (STUDYID), it is a dummy var passing,   ### the function a_summarize_aval_chg_diff_j grabs the required vars from cols_by_multivar calls   analyze(\"STUDYID\",      afun = a_summarize_aval_chg_diff_j,      extra_args = extra_args_3col   )  result_vs2 <- build_table(lyt_vs2, advs, alt_counts_df = adsl) head(result_vs2, 15) #>                                                                                             Active Study Agent                                                                                                                                               #>                                                            A: Drug X                                                                C: Combination                                                                B: Placebo                                 #> Parameter                                                    N=134                                                                       N=132                                                                       N=134                                   #>   Study Visit                  n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI)       n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI)       n/N (%)          Mean (95% CI)     Mean Change From Baseline (95% CI) #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Diastolic Blood Pressure                                                                                                                                                                                                                                     #>   SCREENING                134/134 (100.0%)   50.0 (48.7, 51.2)                                        132/132 (100.0%)   50.2 (48.9, 51.5)                                        134/134 (100.0%)   50.8 (49.3, 52.2)                                      #>   BASELINE                 134/134 (100.0%)   48.6 (47.2, 50.0)                                        132/132 (100.0%)   51.1 (49.8, 52.4)                                        134/134 (100.0%)   50.4 (49.1, 51.8)                                      #>   WEEK 1 DAY 8             134/134 (100.0%)   50.3 (49.0, 51.5)            1.7 (-0.2, 3.5)             132/132 (100.0%)   48.9 (47.5, 50.2)           -2.3 (-4.0, -0.5)            134/134 (100.0%)   49.7 (48.4, 51.0)            -0.8 (-2.6, 1.1)          #>   WEEK 2 DAY 15            134/134 (100.0%)   50.8 (49.5, 52.2)             2.2 (0.2, 4.2)             132/132 (100.0%)   50.0 (48.5, 51.4)            -1.1 (-3.1, 0.9)            134/134 (100.0%)   49.7 (48.3, 51.2)            -0.7 (-2.9, 1.4)          #>   WEEK 3 DAY 22            134/134 (100.0%)   50.7 (49.4, 52.0)             2.1 (0.3, 4.0)             132/132 (100.0%)   49.9 (48.6, 51.3)            -1.2 (-3.0, 0.7)            134/134 (100.0%)   49.1 (47.7, 50.4)            -1.3 (-3.2, 0.5)          #>   WEEK 4 DAY 29            134/134 (100.0%)   50.1 (48.7, 51.5)            1.5 (-0.4, 3.3)             132/132 (100.0%)   49.7 (48.3, 51.1)            -1.4 (-3.3, 0.5)            134/134 (100.0%)   49.6 (48.4, 50.8)            -0.8 (-2.6, 1.0)          #>   WEEK 5 DAY 36            134/134 (100.0%)   50.6 (49.3, 51.9)             2.0 (0.1, 3.9)             132/132 (100.0%)   49.1 (47.8, 50.4)           -2.0 (-3.9, -0.2)            134/134 (100.0%)   48.4 (47.0, 49.7)           -2.1 (-4.1, -0.1)          #>                                                                                                                                                                                                                                                              #> Pulse Rate                                                                                                                                                                                                                                                   #>   SCREENING                134/134 (100.0%)   49.6 (48.1, 51.1)                                        132/132 (100.0%)   49.3 (47.8, 50.8)                                        134/134 (100.0%)   49.4 (48.0, 50.8)                                      #>   BASELINE                 134/134 (100.0%)   51.9 (50.5, 53.2)                                        132/132 (100.0%)   50.3 (48.6, 51.9)                                        134/134 (100.0%)   50.3 (48.8, 51.8)                                      #>   WEEK 1 DAY 8             134/134 (100.0%)   50.1 (48.6, 51.5)            -1.8 (-3.8, 0.2)            132/132 (100.0%)   49.8 (48.5, 51.1)            -0.5 (-2.6, 1.7)            134/134 (100.0%)   49.3 (48.0, 50.6)            -1.0 (-3.0, 1.0)          #>   WEEK 2 DAY 15            134/134 (100.0%)   49.7 (48.2, 51.2)            -2.2 (-4.3, 0.0)            132/132 (100.0%)   49.1 (47.7, 50.4)            -1.2 (-3.1, 0.8)            134/134 (100.0%)   50.8 (49.5, 52.1)            0.6 (-1.5, 2.6)           #>   WEEK 3 DAY 22            134/134 (100.0%)   50.5 (49.2, 51.7)            -1.4 (-3.3, 0.5)            132/132 (100.0%)   49.8 (48.6, 51.0)            -0.5 (-2.5, 1.6)            134/134 (100.0%)   49.9 (48.6, 51.3)            -0.4 (-2.2, 1.5)          #>   WEEK 4 DAY 29            134/134 (100.0%)   49.0 (47.5, 50.4)           -2.9 (-4.8, -1.0)            132/132 (100.0%)   51.0 (49.7, 52.3)            0.7 (-1.3, 2.7)             134/134 (100.0%)   50.0 (48.5, 51.4)            -0.3 (-2.4, 1.7)"},{"path":"na.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"define authors actively maintaining code base, contributors made significant contribution past. acknowledgements, see eponymous section Home Page. Gabriel Becker. Maintainer, author.           Original creator package, author included formatters functions Ilse Augustyns. Author. Paul Jenkins. Author. Daniel Hofstaedter. Author. Joseph Kovach. Author. David Munoz Tord. Author. Daniel Sabanes Bove. Author. Ezequiel Anokian. Contributor. Renfei Mao. Contributor. Mrinal Das. Contributor. Isaac Gravestock. Copyright holder.           Author included rbmi functions Joe Zhu. Copyright holder.           Author included tern functions Johnson & Johnson Innovative Medicine. Copyright holder, funder. F. Hoffmann-La Roche AG. Copyright holder.           Copyright holder included formatters, rbmi tern functions","code":""},{"path":"na.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker G, Augustyns , Jenkins P, Hofstaedter D, Kovach J, Munoz Tord D, Sabanes Bove D (2025). junco: Create Common TLs Used Clinical Trials. R package version 0.0.1, https://johnsonandjohnson.github.io/junco/.","code":"@Manual{,   title = {junco: Create Common TLs Used in Clinical Trials},   author = {Gabriel Becker and Ilse Augustyns and Paul Jenkins and Daniel Hofstaedter and Joseph Kovach and David {Munoz Tord} and Daniel {Sabanes Bove}},   year = {2025},   note = {R package version 0.0.1},   url = {https://johnsonandjohnson.github.io/junco/}, }"},{"path":[]},{"path":"na.html/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create Common TLs Used in Clinical Trials","text":"junco R package contains analysis functions create tables listings used clinical trial reporting. complements tern package providing additional statistical analysis capabilities. package provides range functionality, : Statistical analysis (ANCOVA, MMRM, Cox regression, Kaplan-Meier) Calculation odds ratios, relative risks, proportion differences Event incidence rate analysis Frequency tabulations summarizations Reference-based multiple imputation (RBMI) handling missing data Production-ready RTF exporter listings tables (see tt_to_tbldf) Creation tables, listings, graphs (TLGs)","code":""},{"path":"na.html/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Common TLs Used in Clinical Trials","text":"can install development version junco GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"johnsonandjohnson/junco\")"},{"path":"na.html/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create Common TLs Used in Clinical Trials","text":"understand use package, please refer junco article, provides multiple examples code implementation. See package vignettes browseVignettes(package = \"junco\") usage package.","code":""},{"path":"na.html/reference/a_eair100_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Exposure-Adjusted Incidence Rate per 100 Patient-Years — a_eair100_j","title":"Calculate Exposure-Adjusted Incidence Rate per 100 Patient-Years — a_eair100_j","text":"function calculates exposure-adjusted incidence rate (EAIR) per 100 patient-years. can also calculate difference EAIR treatment groups.","code":""},{"path":"na.html/reference/a_eair100_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Exposure-Adjusted Incidence Rate per 100 Patient-Years — a_eair100_j","text":"","code":"a_eair100_j(   df,   labelstr = NULL,   .var,   .df_row,   .spl_context,   .alt_df_full = NULL,   id = \"USUBJID\",   drop_levels = FALSE,   riskdiff = TRUE,   ref_path = NULL,   .stats = c(\"eair\"),   .formats = NULL,   .labels = NULL,   .indent_mods = NULL,   na_str = rep(NA, 3),   conf_level = 0.95,   fup_var,   occ_var,   occ_dy )"},{"path":"na.html/reference/a_eair100_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Exposure-Adjusted Incidence Rate per 100 Patient-Years — a_eair100_j","text":"df (`data.frame`) data set containing analysis variables. labelstr (`string`) label string row. .var (`string`) variable name analysis. .df_row (`data.frame`) data frame across columns given row split. .spl_context (`data.frame`) gives information ancestor split states. .alt_df_full (`dataframe`) denominator dataset calculations. id (`string`) subject variable name. drop_levels (`logical`) TRUE, non-observed levels included. riskdiff (`logical`) TRUE, risk difference calculations performed. ref_path (`string`) column path specifications control group. .stats (`character`) statistics select table. .formats (named 'character' 'list') formats statistics. .labels (named 'character') labels statistics. .indent_mods (named `integer`) indent modifiers labels. na_str (`string`) string used replace NA empty values output. conf_level (`proportion`) confidence level interval. fup_var (`string`) variable name follow-time. occ_var (`string`) variable name occurrence. occ_dy (`string`) variable name occurrence day.","code":""},{"path":"na.html/reference/a_eair100_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Exposure-Adjusted Incidence Rate per 100 Patient-Years — a_eair100_j","text":"list in_rows objects containing EAIR statistics.","code":""},{"path":"na.html/reference/a_freq_combos_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","title":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","text":"Analysis function count percentage column design controlled combosdf","code":""},{"path":"na.html/reference/a_freq_combos_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","text":"","code":"a_freq_combos_j(   df,   labelstr = NULL,   .var = NA,   val = NULL,   combosdf = NULL,   do_not_filter = NULL,   filter_var = NULL,   flag_var = NULL,   .df_row,   .spl_context,   .N_col,   id = \"USUBJID\",   denom = c(\"N_col\", \"n_df\", \"n_altdf\", \"n_rowdf\", \"n_parentdf\"),   label = NULL,   label_fstr = NULL,   label_map = NULL,   .alt_df_full = NULL,   denom_by = NULL,   .stats = \"count_unique_denom_fraction\",   .formats = NULL,   .labels_n = NULL,   .indent_mods = NULL,   na_str = rep(NA, 3) )"},{"path":"na.html/reference/a_freq_combos_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. .var (`string`) single variable name passed `rtables` requested statistics function. val (`character` NULL) NULL, levels incoming variable (variable used `analyze` call) considered. single `string`, current level/value incoming variable considered. multiple levels, levels/values incoming variable considered. values observed (eg zero row input df), row row-label `data reported` included table. combosdf df provides mapping facets produce cumulative counts .N_col. do_not_filter vector facets (.e., column headers), identifying headers filtering records occur. , numerator contain cumulative counts.  Generally, used \"Total\" column, something similar. filter_var variable identifies records count numerator given column. Generally, contain text matching column header column associated given record. flag_var Variable identifies occurrence (first occurrence) event. flag variable expected value \"Y\" identifying event counted, NA otherwise. .df_row (`data.frame`) data frame across columns given row split. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. .N_col (`integer`) column-wise N (column count) full column analyzed typically passed `rtables`. id (`string`) subject variable name. denom (`string`) One N_col Column count, n_df Number patients (based upon main input dataframe `df`), n_altdf Number patients secondary dataframe (`.alt_df_full`), Note argument `denom_by` perform row-split `.alt_df_full` dataframe. requirement variables specified `denom_by` part row split specifications. n_rowdf Number patients current row-level dataframe (`.row_df` rtables splitting machinery). n_parentdf Number patients higher row-level split current split. higher row-level split specified argument `denom_by`. label (`string`) `val`single `string`, row label shown output can specified using argument. `val` `character vector`, `label_map` argument can specified control row-labels. label_fstr (`string`) sprintf style format string. can contain one \"%s\" takes current split value generates row/column label. combined `labelstr` argument, utilizing function `cfun` `summarize_row_groups` call. recommended utilize argument purposes. label argument used instead (`val` single string) label_map (`tibble`) mapping tibble translate levels incoming variable different row label presented table. .alt_df_full (`dataframe`) Denominator dataset fraction relative risk calculations. .alt_df_full crucial parameter relative risk calculations parameter set utilize `alt_counts_df`, values relative risk columns might correct. rtables PR integrated, argument gets populated rtables split machinery (see [rtables::additional_fun_params]). denom_by (`character`) Variables row-split used denominator derivation. controls `denom = \"n_parentdf\"` `denom = \"n_altdf\"`. `denom = \"n_altdf\"`, denominator derived `.alt_df_full` combination `denom_by` argument .stats (`character`) statistics select table. .formats (named 'character' 'list') formats statistics. .labels_n (named `character`) String control row labels 'n'-statistics. useful one 'n'-statistic requested (rare situations ). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. na_str (`string`) string used replace `NA` empty values output.","code":""},{"path":"na.html/reference/a_freq_combos_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","text":"list requested statistics formatted `rtables::CellValue()`.","code":""},{"path":"na.html/reference/a_freq_combos_j.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Analysis function count and percentage in column design controlled by combosdf — a_freq_combos_j","text":": extra records must removed numerator via filter_var parameter avoid double counting events.","code":""},{"path":"na.html/reference/a_freq_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","title":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","text":"Analysis/statistical function count percentage core columns + (optional) relative risk columns","code":""},{"path":"na.html/reference/a_freq_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","text":"","code":"s_freq_j(   df,   .var,   .df_row,   val = NULL,   drop_levels = FALSE,   excl_levels = NULL,   alt_df,   parent_df,   id = \"USUBJID\",   denom = c(\"n_df\", \"n_altdf\", \"N_col\", \"n_rowdf\", \"n_parentdf\"),   .N_col,   countsource = c(\"df\", \"altdf\") )  a_freq_j(   df,   labelstr = NULL,   .var = NA,   val = NULL,   drop_levels = FALSE,   excl_levels = NULL,   new_levels = NULL,   new_levels_after = FALSE,   addstr2levs = NULL,   .df_row,   .spl_context,   .N_col,   id = \"USUBJID\",   denom = c(\"N_col\", \"n_df\", \"n_altdf\", \"N_colgroup\", \"n_rowdf\", \"n_parentdf\"),   riskdiff = TRUE,   ref_path = NULL,   variables = list(strata = NULL),   conf_level = 0.95,   method = c(\"wald\", \"waldcc\", \"cmh\", \"ha\", \"newcombe\", \"newcombecc\", \"strat_newcombe\",     \"strat_newcombecc\"),   weights_method = \"cmh\",   label = NULL,   label_fstr = NULL,   label_map = NULL,   .alt_df_full = NULL,   denom_by = NULL,   .stats = c(\"count_unique_denom_fraction\"),   .formats = NULL,   .indent_mods = NULL,   na_str = rep(NA, 3),   .labels_n = NULL,   extrablankline = FALSE,   extrablanklineafter = NULL,   restr_columns = NULL,   colgroup = NULL,   countsource = c(\"df\", \"altdf\") )"},{"path":"na.html/reference/a_freq_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. .df_row (`data.frame`) data frame across columns given row split. val (`character` NULL) NULL, levels incoming variable (variable used `analyze` call) considered. single `string`, current level/value incoming variable considered. multiple levels, levels/values incoming variable considered. values observed (eg zero row input df), row row-label `data reported` included table. drop_levels (`logical`) `TRUE` non-observed levels (based upon .df_row) included. used together `val`. excl_levels (`character` NULL) NULL, levels incoming variable (variable used `analyze` call) excluded. multiple levels, levels/values incoming variable excluded. used together `val`. alt_df (`dataframe`) derived based upon alt_df_full denom_by within a_freq_j. parent_df (`dataframe`) derived within a_freq_j based upon input dataframe goes build_table (df) denom_by. data frame higher row-space current input df (underwent row-splitting rtables splitting machinery). id (`string`) subject variable name. denom (`string`) One N_col Column count, n_df Number patients (based upon main input dataframe `df`), n_altdf Number patients secondary dataframe (`.alt_df_full`), Note argument `denom_by` perform row-split `.alt_df_full` dataframe. requirement variables specified `denom_by` part row split specifications. N_colgroup Number patients column group variable (note based upon input .alt_df_full dataframe). Note argument `colgroup` (column variable) needs provided, retrieved directly column layout definition. n_rowdf Number patients current row-level dataframe (`.row_df` rtables splitting machinery). n_parentdf Number patients higher row-level split current split. higher row-level split specified argument `denom_by`. .N_col (`integer`) column-wise N (column count) full column analyzed typically passed `rtables`. countsource Either `df` `alt_df`. `alt_df` counts based upon alternative dataframe `alt_df`. useful subgroup processing, present counts subjects subgroup alternative dataframe. labelstr argument ensure function can used `cfun` `summarize_row_groups` call. recommended utilize argument purposes. label argument used instead (`val` single string) another approach utilize `label_map` argument control row labels incoming analysis variable. new_levels (list(2) NULL) List length 2. First element : names new levels Second element: list values new levels. new_levels_after (`logical`) `TRUE` new levels added last level. addstr2levs string, NULL appended rowlabel level, eg add \",n (percent)\" end rowlabels .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. riskdiff (`logical`) `TRUE`, risk difference calculations performed presented (required risk difference column splits included). `FALSE`, risk difference columns remain blank (required risk difference column splits included). ref_path (`string`) Column path specifications control group relative risk derivation. variables passed onto relative risk function (internal function s_rel_risk_val_j), based upon [tern::s_proportion_diff()]. See `?tern::s_proportion_diff` details. conf_level (`proportion`) confidence level interval. method passed onto relative risk function (internal function s_rel_risk_val_j). weights_method passed onto relative risk function (internal function s_rel_risk_val_j). label (`string`) `val`single `string`, row label shown output can specified using argument. `val` `character vector`, `label_map` argument can specified control row-labels. label_fstr (`string`) sprintf style format string. can contain one \"%s\" takes current split value generates row/column label. combined `labelstr` argument, utilizing function `cfun` `summarize_row_groups` call. recommended utilize argument purposes. label argument used instead (`val` single string) label_map (`tibble`) mapping tibble translate levels incoming variable different row label presented table. .alt_df_full (`dataframe`) Denominator dataset fraction relative risk calculations. .alt_df_full crucial parameter relative risk calculations parameter set utilize `alt_counts_df`, values relative risk columns might correct. rtables PR integrated, argument gets populated rtables split machinery (see [rtables::additional_fun_params]). denom_by (`character`) Variables row-split used denominator derivation. controls `denom = \"n_parentdf\"` `denom = \"n_altdf\"`. `denom = \"n_altdf\"`, denominator derived `.alt_df_full` combination `denom_by` argument .stats (`character`) statistics select table. See Value list available statistics. .formats (named 'character' 'list') formats statistics. .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. na_str (`string`) string used replace `NA` empty values output. .labels_n (named `character`) String control row labels 'n'-statistics. useful one 'n'-statistic requested (rare situations ). extrablankline (`logical`) `TRUE`, extra blank line added last value. Avoid using template scripts, use section_div = \" \" instead (PR rtables available) extrablanklineafter (`string`) row-label matches string, extra blank line added value. restr_columns `character` NULL, columns defined `restr_columns` blanked . colgroup name column group variable used source denominator calculation. Required specified `denom = \"N_colgroup\"`.","code":""},{"path":"na.html/reference/a_freq_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","text":"* `s_freq_j`: returns list following statistics n_df n_rowdf n_parentdf n_altdf denom count count_unique count_unique_fraction count_unique_denom_fraction * `a_freq_j`: returns list requested statistics formatted `rtables::CellValue()`. Within relative risk difference columns, following stats blanked : n-statistics (n_df, n_altdf, n_parentdf, n_rowdf, denom) count count_unique others (count_unique_fraction, count_unique_denom_fraction), statistic replaced relative risk difference + confidence interval.","code":""},{"path":"na.html/reference/a_freq_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis/statistical function for count and percentage in core columns + (optional) relative risk columns — a_freq_j","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  adsl <- ex_adsl |> select(\"USUBJID\", \"SEX\", \"ARM\") adae <- ex_adae |> select(\"USUBJID\", \"AEBODSYS\", \"AEDECOD\") adae[[\"TRTEMFL\"]] <- \"Y\"  trtvar <- \"ARM\" ctrl_grp <- \"B: Placebo\" adsl$colspan_trt <- factor(ifelse(adsl[[trtvar]] == ctrl_grp, \" \", \"Active Study Agent\"),   levels = c(\"Active Study Agent\", \" \") )  adsl$rrisk_header <- \"Risk Difference (%) (95% CI)\" adsl$rrisk_label <- paste(adsl[[trtvar]], paste(\"vs\", ctrl_grp))  # join data together adae <- adae |> left_join(adsl) #> Joining with `by = join_by(USUBJID)`  colspan_trt_map <- create_colspan_map(adsl,   non_active_grp = \"B: Placebo\",   non_active_grp_span_lbl = \" \",   active_grp_span_lbl = \"Active Study Agent\",   colspan_var = \"colspan_trt\",   trt_var = trtvar )  ref_path <- c(\"colspan_trt\", \" \", trtvar, ctrl_grp)  lyt <- basic_table(show_colcounts = TRUE) |>   split_cols_by(\"colspan_trt\", split_fun = trim_levels_to_map(map = colspan_trt_map)) |>   split_cols_by(trtvar) |>   split_cols_by(\"rrisk_header\", nested = FALSE) |>   split_cols_by(trtvar, labels_var = \"rrisk_label\", split_fun = remove_split_levels(ctrl_grp))  lyt1 <- lyt |>   analyze(\"TRTEMFL\",     show_labels = \"hidden\",     afun = a_freq_j,     extra_args = list(       method = \"wald\",       .stats = c(\"count_unique_denom_fraction\"),       ref_path = ref_path     )   )  result1 <- build_table(lyt1, adae, alt_counts_df = adsl)  result1 #>            Active Study Agent                                          Risk Difference (%) (95% CI)              #>        A: Drug X      C: Combination      B: Placebo      A: Drug X vs B: Placebo   C: Combination vs B: Placebo #>         (N=134)           (N=132)           (N=134)               (N=134)                     (N=132)            #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Y   122/134 (91.0%)   120/132 (90.9%)   123/134 (91.8%)      -0.7 (-7.5, 6.0)             -0.9 (-7.6, 5.9)        # quick check for risk difference results using tern function stat_propdiff_ci # For Drug X vs Placebo x_drug_x <- list(length(unique(subset(adae, adae[[trtvar]] == \"A: Drug X\")[[\"USUBJID\"]]))) N_x_drug_x <- length(unique(subset(adsl, adsl[[trtvar]] == \"A: Drug X\")[[\"USUBJID\"]])) y_placebo <- list(length(unique(subset(adae, adae[[trtvar]] == ctrl_grp)[[\"USUBJID\"]]))) N_y_placebo <- length(unique(subset(adsl, adsl[[trtvar]] == ctrl_grp)[[\"USUBJID\"]]))  tern::stat_propdiff_ci(   x = x_drug_x,   N_x = N_x_drug_x,   y = y_placebo,   N_y = N_y_placebo ) #> [[1]] #> [1] -0.7462687 -7.4525893  5.9600520 #>   # For Combination vs Placebo x_combo <- list(length(unique(subset(adae, adae[[trtvar]] == \"C: Combination\")[[\"USUBJID\"]]))) N_x_combo <- length(unique(subset(adsl, adsl[[trtvar]] == \"C: Combination\")[[\"USUBJID\"]]))  tern::stat_propdiff_ci(   x = x_combo,   N_x = N_x_combo,   y = y_placebo,   N_y = N_y_placebo ) #> [[1]] #> [1] -0.8819539 -7.6386167  5.8747089 #>    # example for subgroup AE table  extra_args_rr <- list(   denom = \"n_altdf\",   denom_by = \"SEX\",   riskdiff = FALSE,   .stats = c(\"count_unique\") )  extra_args_rr2 <- list(   denom = \"n_altdf\",   denom_by = \"SEX\",   riskdiff = TRUE,   ref_path = ref_path,   method = \"wald\",   .stats = c(\"count_unique_denom_fraction\"),   na_str = rep(NA, 3) )  lyt2 <- basic_table(   top_level_section_div = \" \",   colcount_format = \"N=xx\" ) |>   ## main columns   split_cols_by(\"colspan_trt\", split_fun = trim_levels_to_map(map = colspan_trt_map)) |>   split_cols_by(trtvar, show_colcounts = TRUE) |>   ## risk diff columns, note nested = FALSE   split_cols_by(\"rrisk_header\", nested = FALSE) |>   split_cols_by(trtvar,     labels_var = \"rrisk_label\", split_fun = remove_split_levels(\"B: Placebo\"),     show_colcounts = FALSE   ) |>   split_rows_by(\"SEX\", split_fun = drop_split_levels) |>   summarize_row_groups(\"SEX\",     cfun = a_freq_j,     extra_args = append(extra_args_rr, list(label_fstr = \"Gender: %s\"))   ) |>   split_rows_by(\"TRTEMFL\",     split_fun = keep_split_levels(\"Y\"),     indent_mod = -1L,     section_div = c(\" \")   ) |>   summarize_row_groups(\"TRTEMFL\",     cfun = a_freq_j,     extra_args = append(extra_args_rr2, list(       label =         \"Subjects with >=1 AE\", extrablankline = TRUE     ))   ) |>   split_rows_by(\"AEBODSYS\",     split_label = \"System Organ Class\",     split_fun = trim_levels_in_group(\"AEDECOD\"),     label_pos = \"topleft\",     section_div = c(\" \"),     nested = TRUE   ) |>   summarize_row_groups(\"AEBODSYS\",     cfun = a_freq_j,     extra_args = extra_args_rr2   ) |>   analyze(\"AEDECOD\",     afun = a_freq_j,     extra_args = extra_args_rr2   )  result2 <- build_table(lyt2, adae, alt_counts_df = adsl)"},{"path":"na.html/reference/a_freq_resp_var_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis Function for Response Variables — a_freq_resp_var_j","title":"Analysis Function for Response Variables — a_freq_resp_var_j","text":"function calculates counts percentages response variables (Y/N values), optional risk difference calculations.","code":""},{"path":"na.html/reference/a_freq_resp_var_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis Function for Response Variables — a_freq_resp_var_j","text":"","code":"a_freq_resp_var_j(   df,   .var,   .df_row,   .N_col,   .spl_context,   resp_var = NULL,   id = \"USUBJID\",   drop_levels = FALSE,   riskdiff = TRUE,   ref_path = NULL,   variables = formals(s_proportion_diff)$variables,   conf_level = formals(s_proportion_diff)$conf_level,   method = c(\"wald\", \"waldcc\", \"cmh\", \"ha\", \"newcombe\", \"newcombecc\", \"strat_newcombe\",     \"strat_newcombecc\"),   weights_method = formals(s_proportion_diff)$weights_method,   ... )"},{"path":"na.html/reference/a_freq_resp_var_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis Function for Response Variables — a_freq_resp_var_j","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) variable name passed `rtables`. .df_row (`data.frame`) data frame across columns given row split. .N_col (`integer`) column-wise N (column count) full column analyzed. .spl_context (`data.frame`) gives information ancestor split states. resp_var (`string`) response variable name containing Y/N values. id (`string`) subject variable name. drop_levels (`logical`) TRUE, non-observed levels included. riskdiff (`logical`) TRUE, risk difference calculations performed. ref_path (`string`) column path specifications control group. variables (`list`) variables include analysis. conf_level (`proportion`) confidence level interval. method (`character`) method calculating confidence intervals. weights_method (`character`) method calculating weights. ... Additional arguments passed functions.","code":""},{"path":"na.html/reference/a_freq_resp_var_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis Function for Response Variables — a_freq_resp_var_j","text":"list rcell objects containing response statistics.","code":""},{"path":"na.html/reference/a_freq_subcol_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis function count and percentage with extra column-subsetting in selected columns (controlled by subcol_* arguments) — a_freq_subcol_j","title":"Analysis function count and percentage with extra column-subsetting in selected columns (controlled by subcol_* arguments) — a_freq_subcol_j","text":"Analysis function count percentage extra column-subsetting selected columns (controlled subcol_* arguments)","code":""},{"path":"na.html/reference/a_freq_subcol_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis function count and percentage with extra column-subsetting in selected columns (controlled by subcol_* arguments) — a_freq_subcol_j","text":"","code":"a_freq_subcol_j(   df,   labelstr = NULL,   .var = NA,   val = NULL,   subcol_split = NULL,   subcol_var = NULL,   subcol_val = NULL,   .df_row,   .spl_context,   .N_col,   id = \"USUBJID\",   denom = c(\"N_col\", \"n_df\", \"n_altdf\", \"n_rowdf\", \"n_parentdf\"),   label = NULL,   label_fstr = NULL,   label_map = NULL,   .alt_df_full = NULL,   denom_by = NULL,   .stats = c(\"count_unique_denom_fraction\"),   .formats = NULL,   .labels_n = NULL,   .indent_mods = NULL,   na_str = rep(NA, 3) )"},{"path":"na.html/reference/a_freq_subcol_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis function count and percentage with extra column-subsetting in selected columns (controlled by subcol_* arguments) — a_freq_subcol_j","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. .var (`string`) single variable name passed `rtables` requested statistics function. val (`character` NULL) NULL, levels incoming variable (variable used `analyze` call) considered. single `string`, current level/value incoming variable considered. multiple levels, levels/values incoming variable considered. values observed (eg zero row input df), row row-label `data reported` included table. subcol_split Text search colid determine whether subsetting performed. subcol_var Name variable containing searched text identified subcol_val argument. subcol_val Value use perform data sub-setting. .df_row (`data.frame`) data frame across columns given row split. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. .N_col (`integer`) column-wise N (column count) full column analyzed typically passed `rtables`. id (`string`) subject variable name. denom (`string`) One N_col Column count, n_df Number patients (based upon main input dataframe `df`), n_altdf Number patients secondary dataframe (`.alt_df_full`), Note argument `denom_by` perform row-split `.alt_df_full` dataframe. requirement variables specified `denom_by` part row split specifications. n_rowdf Number patients current row-level dataframe (`.row_df` rtables splitting machinery). n_parentdf Number patients higher row-level split current split. higher row-level split specified argument `denom_by`. label (`string`) `val`single `string`, row label shown output can specified using argument. `val` `character vector`, `label_map` argument can specified control row-labels. label_fstr (`string`) sprintf style format string. can contain one \"%s\" takes current split value generates row/column label. combined `labelstr` argument, utilizing function `cfun` `summarize_row_groups` call. recommended utilize argument purposes. label argument used instead (`val` single string) label_map (`tibble`) mapping tibble translate levels incoming variable different row label presented table. .alt_df_full (`dataframe`) Denominator dataset fraction relative risk calculations. .alt_df_full crucial parameter relative risk calculations parameter set utilize `alt_counts_df`, values relative risk columns might correct. rtables PR integrated, argument gets populated rtables split machinery (see [rtables::additional_fun_params]). denom_by (`character`) Variables row-split used denominator derivation. controls `denom = \"n_parentdf\"` `denom = \"n_altdf\"`. `denom = \"n_altdf\"`, denominator derived `.alt_df_full` combination `denom_by` argument .stats (`character`) statistics select table. .formats (named 'character' 'list') formats statistics. .labels_n (named `character`) String control row labels 'n'-statistics. useful one 'n'-statistic requested (rare situations ). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. na_str (`string`) string used replace `NA` empty values output.","code":""},{"path":"na.html/reference/a_freq_subcol_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis function count and percentage with extra column-subsetting in selected columns (controlled by subcol_* arguments) — a_freq_subcol_j","text":"list requested statistics formatted `rtables::CellValue()`.","code":""},{"path":"na.html/reference/a_patyrs_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Patient Years — a_patyrs_j","title":"Calculate Patient Years — a_patyrs_j","text":"function calculates patient years based provided data.","code":""},{"path":"na.html/reference/a_patyrs_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Patient Years — a_patyrs_j","text":"","code":"a_patyrs_j(   df,   .var,   .df_row,   id = \"USUBJID\",   .alt_df_full = NULL,   .formats = NULL,   .labels = NULL,   source = c(\"alt_df\", \"df\"),   .spl_context,   .stats = \"patyrs\" )"},{"path":"na.html/reference/a_patyrs_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Patient Years — a_patyrs_j","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) variable name containing patient years data. .df_row (`data.frame`) data frame across columns given row split. id (`string`) subject variable name. .alt_df_full (`dataframe`) alternative dataset calculations. .formats (named 'character' 'list') formats statistics. .labels (named 'character') labels statistics. source (`string`) source data, either \"alt_df\" \"df\". .spl_context (`data.frame`) gives information ancestor split states. .stats (`character`) statistics select table.","code":""},{"path":"na.html/reference/a_patyrs_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Patient Years — a_patyrs_j","text":"list in_rows objects containing patient years statistics.","code":""},{"path":"na.html/reference/a_proportion_ci_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","title":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","text":"Formatted Analysis Function Proportion Confidence Interval Factor","code":""},{"path":"na.html/reference/a_proportion_ci_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","text":"","code":"a_proportion_ci_factor(df, .var, ...)"},{"path":"na.html/reference/a_proportion_ci_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","text":"df (`data.frame`) including factor `.var`. .var (`string`) name factor variable. ... see [a_proportion_ci_logical()] additionally required arguments.","code":""},{"path":"na.html/reference/a_proportion_ci_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","text":"[rtables::rcell()] result.","code":""},{"path":"na.html/reference/a_proportion_ci_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Analysis Function For Proportion Confidence Interval for Factor — a_proportion_ci_factor","text":"","code":"a_proportion_ci_factor(   df = DM,   .var = 'SEX',   .alt_df = DM,   conf_level = 0.95,   formats = list(prop_ci = jjcsformat_xx('xx.x%, xx.x%')),   method = 'clopper-pearson' ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>           row_name formatted_cell indent_mod        row_label #> 1                F   47.2%, 57.8%          0                F #> 2                M   42.2%, 52.8%          0                M #> 3                U     0.0%, 1.0%          0                U #> 4 UNDIFFERENTIATED     0.0%, 1.0%          0 UNDIFFERENTIATED"},{"path":"na.html/reference/a_proportion_ci_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","title":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","text":"Formatted Analysis Function Proportion Confidence Interval Logical","code":""},{"path":"na.html/reference/a_proportion_ci_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","text":"","code":"a_proportion_ci_logical(x, .alt_df, conf_level, method, formats)"},{"path":"na.html/reference/a_proportion_ci_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","text":"x (`logical`) including binary response values. .alt_df (`data.frame`) alternative data frame used denominator calculation. conf_level (`numeric`) confidence level confidence interval. method (`string`) please see [tern::s_proportion()] possible methods. formats (`list`) including element `prop_ci` required format. Note value percent already.","code":""},{"path":"na.html/reference/a_proportion_ci_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","text":"[rtables::rcell()] result.","code":""},{"path":"na.html/reference/a_proportion_ci_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Analysis Function For Proportion Confidence Interval for Logical — a_proportion_ci_logical","text":"","code":"a_proportion_ci_logical(   x = DM$SEX == 'F',   .alt_df = DM,   conf_level = 0.95,   formats = list(prop_ci = jjcsformat_xx('xx.xx% - xx.xx%')),   method = 'wald' ) #> rcell: 47.34% - 57.72%"},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"Analysis functions produce 1-row summary presented 3-column layout columns: column 1: N, column 2: Value, column 3: change difference columns, 1 column presented : difference + CI ancova = `TRUE`, presented statistics based ANCOVA method (`s_summarize_ancova_j`). mean ci (Value (column 2) Chg (column 3)) using statistic `lsmean_ci` mean ci difference column based ANCOVA model using statistic `lsmean_diffci` ancova = `FALSE`, descriptive statistics used instead. difference column, 2-sample t-test used.","code":""},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"","code":"a_summarize_aval_chg_diff_j(   df,   .df_row,   .spl_context,   ancova = FALSE,   comp_btw_group = TRUE,   ref_path = NULL,   .N_col,   denom = c(\"N\", \".N_col\"),   indatavar = NULL,   d = 0,   id = \"USUBJID\",   interaction_y = FALSE,   interaction_item = NULL,   conf_level = 0.95,   variables = list(arm = \"TRT01A\", covariates = NULL),   format_na_str = \"\",   .stats = list(col1 = \"count_denom_frac\", col23 = \"mean_ci_3d\", coldiff =     \"meandiff_ci_3d\"),   .formats = list(col1 = NULL, col23 = \"xx.dx (xx.dx, xx.dx)\", coldiff =     \"xx.dx (xx.dx, xx.dx)\"),   .formats_fun = list(col1 = jjcsformat_count_denom_fraction, col23 = jjcsformat_xx,     coldiff = jjcsformat_xx),   multivars = c(\"AVAL\", \"AVAL\", \"CHG\") )"},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"df (`data.frame`) data set containing analysis variables. .df_row (`data.frame`) data frame across columns given row split. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. ancova (`logical`) FALSE, descriptive methods used.  TRUE Ancova methods used columns : AVAL, CHG, DIFF. comp_btw_group (`logical`) TRUE,  ancova = FALSE, estimate group difference (CHG) based upon two-sample t-test.  ancova = TRUE, ancova model used estimate group difference (CHG). ref_path (`character`) global reference group specification, see [get_ref_info()]. .N_col (`integer`) column-wise N (column count) full column analyzed typically passed `rtables`. denom (`string`) choice denominator proportions. Options :   * `N`: number records column/row split.  check place current split one record per subject. Users careful .   * `.N_col`: number records column intersection (based alt_counts_df dataset)    (alt_counts_df single record per subjects, match number subjects) indatavar (`string`) null, variable name extra subset incoming df non-missing values variable. d (default = 1)  choice Decimal precision. Note one extra precision added, means presented.   Options :   * numerical(1)   * variable name containing information precision, variable   available input dataset. content variable   integer. id (`string`) subject variable name. interaction_y (`character`) passed onto `tern` function `s_ancova`, ancova = TRUE. interaction_item (`character`) passed onto `tern` function `s_ancova`, ancova = TRUE. conf_level (`proportion`) Confidence level interval variables (named list strings) list additional analysis variables, expected elements:    * arm (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group.    * covariates (character) vector can contain single variable names ('X1'), /interaction terms indicated 'X1 * X2'. format_na_str (`string`) .stats (named `list`) column statistics select table. following column names used: `col1`, `col23`, `coldiff`. `col1`, following stats can specified. `col23`, `mean_ci_3d` available. ancova=`TRUE` LS Means, otherwise, arithmetic means. `coldiff`, `meandiff_ci_3d` available. ancova=`TRUE` LS difference means, otherwise, difference means based upon 2-sample t-test. .formats (named `list`) formats column statistics. `xx.d` style formats can used. .formats_fun (named `list`) formatting functions column statistics, applied conversion `xx.d` style appropriate precision. multivars (`string(3)`) Variables names use 3-col layout.","code":""},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"function can used analyze function call","code":""},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"See Description","code":""},{"path":[]},{"path":"na.html/reference/a_summarize_aval_chg_diff_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis function 3-column presentation — a_summarize_aval_chg_diff_j","text":"","code":"library(dplyr)  ADEG <- data.frame(   STUDYID = c(     'DUMMY', 'DUMMY', 'DUMMY', 'DUMMY', 'DUMMY',     'DUMMY', 'DUMMY', 'DUMMY', 'DUMMY', 'DUMMY'   ),   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01A = c(     'ARMA', 'ARMA', 'ARMA', 'ARMA', 'ARMA', 'Placebo',     'Placebo', 'Placebo', 'ARMA', 'ARMA'   ),   PARAM = c('BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP', 'BP'),   AVISIT = c(     'Visit 1', 'Visit 1', 'Visit 1', 'Visit 1', 'Visit 1',     'Visit 1', 'Visit 1', 'Visit 1', 'Visit 1', 'Visit 1'   ),   AVAL = c(56, 78, 67, 87, 88, 93, 39, 87, 65, 55),   CHG = c(2, 3, -1, 9, -2, 0, 6, -2, 5, 2) )  ADEG <- ADEG |>   mutate(     TRT01A = as.factor(TRT01A),     STUDYID = as.factor(STUDYID)   )  ADEG$colspan_trt <- factor(ifelse(ADEG$TRT01A == 'Placebo', ' ', 'Active Study Agent'),   levels = c('Active Study Agent', ' ') ) ADEG$rrisk_header <- 'Risk Difference (%) (95% CI)' ADEG$rrisk_label <- paste(ADEG$TRT01A, paste('vs', 'Placebo'))  colspan_trt_map <- create_colspan_map(ADEG,   non_active_grp = 'Placebo',   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Study Agent',   colspan_var = 'colspan_trt',   trt_var = 'TRT01A' ) ref_path <- c('colspan_trt', ' ', 'TRT01A', 'Placebo')  lyt <- basic_table() |>   ### first columns   split_cols_by(     'colspan_trt',     split_fun = trim_levels_to_map(map = colspan_trt_map)   ) |>   split_cols_by('TRT01A') |>   split_rows_by(     'PARAM',     label_pos = 'topleft',     split_label = 'Blood Pressure',     section_div = ' ',     split_fun = drop_split_levels   ) |>   split_rows_by(     'AVISIT',     label_pos = 'topleft',     split_label = 'Study Visit',     split_fun = drop_split_levels,     child_labels = 'hidden'   ) |>   ## set up a 3 column split   split_cols_by_multivar(     c('AVAL', 'AVAL', 'CHG'),     varlabels = c('n/N (%)', 'Mean (CI)', 'CFB (CI)')   ) |>   split_cols_by('rrisk_header', nested = FALSE) |>   split_cols_by(     'TRT01A',     split_fun = remove_split_levels('Placebo'),     labels_var = 'rrisk_label'   ) |>   ### difference columns : just 1 column & analysis needs to be done on change   split_cols_by_multivar(c('CHG'), varlabels = c(' ')) |>   # the variable passed here in analyze is not used (STUDYID),   # it is a dummy var passing, the function a_summarize_aval_chg_diff_j   # grabs the required vars from cols_by_multivar calls   analyze('STUDYID',     afun = a_summarize_aval_chg_diff_j,     extra_args = list(       format_na_str = '-', d = 0,       ref_path = ref_path, variables = list(arm = 'TRT01A', covariates = NULL)     )   )  result <- build_table(lyt, ADEG)  result #>                                  Active Study Agent                                                                          Risk Difference (%) (95% CI) #> Blood Pressure                          ARMA                                                Placebo                                ARMA vs Placebo        #>   Study Visit      n/N (%)          Mean (CI)          CFB (CI)         n/N (%)          Mean (CI)            CFB (CI)                                    #> ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> BP                                                                                                                                                        #>   Visit 1        7/7 (100.0%)   70.9 (58.2, 83.5)   2.6 (-0.8, 6.0)   3/3 (100.0%)   73.0 (-0.5, 146.5)   1.3 (-9.0, 11.7)         1.2 (-7.0, 9.5)"},{"path":"na.html/reference/a_summarize_ex_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulation for Exposure Tables — a_summarize_ex_j","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"function create appropriate statistics needed exposure table","code":""},{"path":"na.html/reference/a_summarize_ex_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"","code":"s_summarize_ex_j(   df,   .var,   .df_row,   .spl_context,   comp_btw_group = TRUE,   ref_path = NULL,   ancova = FALSE,   interaction_y,   interaction_item,   conf_level,   daysconv,   variables )  a_summarize_ex_j(   df,   .var,   .df_row,   .spl_context,   comp_btw_group = TRUE,   ref_path = NULL,   ancova = FALSE,   interaction_y = FALSE,   interaction_item = NULL,   conf_level = 0.95,   variables,   .stats = c(\"mean_sd\", \"median\", \"range\", \"quantiles\", \"total_subject_years\"),   .formats = c(diff_mean_est_ci = jjcsformat_xx(\"xx.xx (xx.xx, xx.xx)\")),   .labels = c(quantiles = \"Interquartile range\"),   .indent_mods = NULL,   na_str = rep(NA, 3),   daysconv = 1 )"},{"path":"na.html/reference/a_summarize_ex_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. .df_row (`data.frame`) data frame across columns given row split. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. comp_btw_group (`logical`) TRUE,  ancova = FALSE, estimate group difference (CHG) based upon two-sample t-test.  ancova = TRUE, ancova model used estimate group difference (CHG). ref_path (`character`) global reference group specification, see [get_ref_info()]. ancova (`logical`) FALSE, descriptive methods used.  TRUE Ancova methods used columns : AVAL, CHG, DIFF. interaction_y (`character`) passed onto `tern` function `s_ancova`, ancova = TRUE. interaction_item (`character`) passed onto `tern` function `s_ancova`, ancova = TRUE. conf_level (`proportion`) Confidence level interval daysconv conversion required get values days (.e 1 original PARAMCD unit days, 30.4375 original PARAMCD unit months) variables (named list strings) list additional analysis variables, expected elements:    * arm (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group.    * covariates (character) vector can contain single variable names ('X1'), /interaction terms indicated 'X1 * X2'. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. na_str (`string`) string used replace `NA` empty values output.","code":""},{"path":"na.html/reference/a_summarize_ex_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"* `a_summarize_ex_j()` returns corresponding list formatted [rtables::CellValue()].","code":""},{"path":"na.html/reference/a_summarize_ex_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"Creates statistics needed standard exposure table includes differences 95 designed used analysis (afun `analyze`) function. Creates statistics needed table. includes differences 95 designed used analysis (afun `analyze`) function.","code":""},{"path":"na.html/reference/a_summarize_ex_j.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"s_summarize_ex_j(): Statistics function needed exposure tables a_summarize_ex_j(): Formatted analysis function used `afun`.","code":""},{"path":"na.html/reference/a_summarize_ex_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulation for Exposure Tables — a_summarize_ex_j","text":"","code":"library(dplyr)  ADEX <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01A = c(     'ARMA', 'ARMA', 'ARMA', 'ARMA', 'ARMA',     'Placebo', 'Placebo', 'Placebo', 'ARMA', 'ARMA'   ),   AVAL = c(56, 78, 67, 87, 88, 93, 39, 87, 65, 55) )  ADEX <- ADEX |>   mutate(TRT01A = as.factor(TRT01A))  ADEX$colspan_trt <- factor(ifelse(ADEX$TRT01A == 'Placebo', ' ', 'Active Study Agent'),   levels = c('Active Study Agent', ' ') )  ADEX$diff_header <- 'Difference in Means (95% CI)' ADEX$diff_label <- paste(ADEX$TRT01A, paste('vs', 'Placebo'))  colspan_trt_map <- create_colspan_map(ADEX,   non_active_grp = 'Placebo',   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Study Agent',   colspan_var = 'colspan_trt',   trt_var = 'TRT01A' ) ref_path <- c('colspan_trt', '', 'TRT01A', 'Placebo')  lyt <- basic_table() |>   split_cols_by(     'colspan_trt',     split_fun = trim_levels_to_map(map = colspan_trt_map)   ) |>   split_cols_by('TRT01A') |>   split_cols_by('diff_header', nested = FALSE) |>   split_cols_by(     'TRT01A',     split_fun = remove_split_levels('Placebo'),     labels_var = 'diff_label'   ) |>   analyze('AVAL',     afun = a_summarize_ex_j, var_labels = 'Duration of treatment (Days)',     show_labels = 'visible',     indent_mod = 0L,     extra_args = list(       daysconv = 1,       ref_path = ref_path,       variables = list(arm = 'TRT01A', covariates = NULL),       ancova = TRUE,       comp_btw_group = TRUE     )   )  result <- build_table(lyt, ADEX)  result #>                                     Active Study Agent                    Difference in Means (95% CI) #>                                            ARMA             Placebo             ARMA vs Placebo        #> —————————————————————————————————————————————————————————————————————————————————————————————————————— #> Duration of treatment (Days)                                                                           #>   Mean (SD)                           70.86 (13.704)     73.00 (29.597)      -2.14 (-32.33, 28.04)     #>   Median                                  67.00              87.00                                     #>   Min, max                             55.00, 88.00       39.00, 93.00                                 #>   Interquartile range                  56.00, 87.00       39.00, 93.00                                 #>   Total treatment (subject years)      496.0 (1.4)        219.0 (0.6)"},{"path":"na.html/reference/ac_blank_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis and Content Summary Function Producing Blank Line — ac_blank_line","title":"Analysis and Content Summary Function Producing Blank Line — ac_blank_line","text":"Analysis Content Summary Function Producing Blank Line","code":""},{"path":"na.html/reference/ac_blank_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis and Content Summary Function Producing Blank Line — ac_blank_line","text":"","code":"ac_blank_line(df, labelstr = \"\")"},{"path":"na.html/reference/ac_blank_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis and Content Summary Function Producing Blank Line — ac_blank_line","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information.","code":""},{"path":"na.html/reference/analyze_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","title":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","text":"Shortcut Layout Function Standard Continuous Variable Analysis","code":""},{"path":"na.html/reference/analyze_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","text":"","code":"analyze_values(lyt, vars, ..., formats)"},{"path":"na.html/reference/analyze_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","text":"lyt (`layout`) input layout analyses added . vars (`character`) variable names primary analysis variable iterated . ... additional arguments lower level functions. formats (`list`) formats including `mean_sd`, `median` `range` specifications.","code":""},{"path":"na.html/reference/analyze_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","text":"Modified layout.","code":""},{"path":"na.html/reference/analyze_values.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shortcut Layout Function for Standard Continuous Variable Analysis — analyze_values","text":"used `tefmad01` `tefmad03a` e.g.","code":""},{"path":"na.html/reference/bspt_pruner.html","id":null,"dir":"Reference","previous_headings":"","what":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","title":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","text":"pruning constructor function identifies records pruned based fraction percentages. addition just looking fraction within arm function also allows flexibility also prune based comparison versus control arm.","code":""},{"path":"na.html/reference/bspt_pruner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","text":"","code":"bspt_pruner(   fraction = 0.05,   keeprowtext = \"Analysis set: Safety\",   reg_expr = FALSE,   control = NULL,   diff_from_control = NULL,   only_more_often = TRUE,   cols = c(\"TRT01A\") )"},{"path":"na.html/reference/bspt_pruner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","text":"fraction fraction threshold.  Function keep records strictly greater threshold. keeprowtext Row excluded pruning. reg_expr Apply keeprowtext regular expression (grepl fixed = TRUE) control Control Group diff_from_control Difference control threshold. only_more_often TRUE: consider column pct often control. FALSE: Also select row column pct less often control abs(diff) threshold cols column path.","code":""},{"path":"na.html/reference/bspt_pruner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","text":"function can utilized pruning function prune_table","code":""},{"path":"na.html/reference/bspt_pruner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pruning Function for pruning based on a fraction and/or a difference from the control arm — bspt_pruner","text":"","code":"ADSL <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01P = c(     'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB',     'Placebo', 'Placebo', 'Placebo', 'ARMA', 'ARMB'   ),   FASFL = c('Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y'),   SAFFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'),   PKFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N') )  ADSL <- ADSL |>   dplyr::mutate(TRT01P = as.factor(TRT01P)) |>   dplyr::mutate(SAFFL = factor(SAFFL, c(\"Y\", \"N\"))) |>   dplyr::mutate(PKFL = factor(PKFL, c(\"Y\", \"N\")))  lyt <- basic_table() |>   split_cols_by('TRT01P') |>   add_overall_col('Total') |>    split_rows_by(     \"FASFL\",     split_fun = drop_and_remove_levels(\"N\"),     child_labels = \"hidden\"   ) |>   analyze('FASFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     show_labels = 'visible',     extra_args = list(label = 'Full', .stats = \"count_unique_fraction\")   ) |>    split_rows_by(     \"SAFFL\",     split_fun = remove_split_levels(\"N\"),     child_labels = \"hidden\"   ) |>   analyze('SAFFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     show_labels = 'visible',     extra_args = list(label = 'Safety', .stats = \"count_unique_fraction\")   ) |>    split_rows_by(     \"PKFL\",     split_fun = remove_split_levels(\"N\"),     child_labels = \"hidden\"   ) |>   analyze('PKFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     show_labels = 'visible',     extra_args = list(label = 'PK', .stats = \"count_unique_fraction\")   )  result <- build_table(lyt, ADSL)  result #>                    ARMA        ARMB       Placebo       Total   #> ——————————————————————————————————————————————————————————————— #> Analysis set:                                                   #>   Full          3 (100.0%)   3 (75.0%)   3 (100.0%)   9 (90.0%) #> Analysis set:                                                   #>   Safety            0            0           0            0     #> Analysis set:                                                   #>   PK                0            0           0            0      # use pruning function to prune rows where it doesn't meet 5% criteria # in the total column but it will not # prune the Safety row regardless result <- prune_table(   result,   prune_func = bspt_pruner(     fraction = 0.05,     keeprowtext = 'Safety',     cols = c('Total')   ) )  result #>                    ARMA        ARMB       Placebo       Total   #> ——————————————————————————————————————————————————————————————— #> Analysis set:                                                   #>   Full          3 (100.0%)   3 (75.0%)   3 (100.0%)   9 (90.0%) #> Analysis set:                                                   #>   Safety            0            0           0            0"},{"path":"na.html/reference/build_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Building Model Formula — build_formula","title":"Building Model Formula — build_formula","text":"builds model formula used inside [fit_mmrm_j()] provided [mmrm::mmrm()] internally. can instructive look resulting formula directly sometimes.","code":""},{"path":"na.html/reference/build_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Building Model Formula — build_formula","text":"","code":"build_formula(   vars,   cor_struct = c(\"unstructured\", \"toeplitz\", \"heterogeneous toeplitz\", \"ante-dependence\",     \"heterogeneous ante-dependence\", \"auto-regressive\", \"heterogeneous auto-regressive\",     \"compound symmetry\", \"heterogeneous compound symmetry\") )"},{"path":"na.html/reference/build_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Building Model Formula — build_formula","text":"vars (`list`) variables use model. cor_struct (`string`) specify covariance structure use.","code":""},{"path":"na.html/reference/build_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Building Model Formula — build_formula","text":"Formula use [mmrm::mmrm()].","code":""},{"path":"na.html/reference/build_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Building Model Formula — build_formula","text":"","code":"vars <- list(   response = 'AVAL', covariates = c('RACE', 'SEX'),   id = 'USUBJID', arm = 'ARMCD', visit = 'AVISIT' ) build_formula(vars, 'auto-regressive') #> AVAL ~ RACE + SEX + ARMCD * AVISIT + ar1(AVISIT | USUBJID) #> <environment: 0x55a2dd8453a0> build_formula(vars) #> AVAL ~ RACE + SEX + ARMCD * AVISIT + us(AVISIT | USUBJID) #> <environment: 0x55a2e192a768>"},{"path":"na.html/reference/c_proportion_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"c_function for proportion of `TRUE` in logical vector — c_proportion_logical","title":"c_function for proportion of `TRUE` in logical vector — c_proportion_logical","text":"simple statistics function prepares numbers percentages   required format, use split content row. denominator   column N. Note use .alt_df might   required row split variables available.","code":""},{"path":"na.html/reference/c_proportion_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"c_function for proportion of `TRUE` in logical vector — c_proportion_logical","text":"","code":"c_proportion_logical(x, labelstr, label_fstr, format, .N_col)"},{"path":"na.html/reference/c_proportion_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"c_function for proportion of `TRUE` in logical vector — c_proportion_logical","text":"x (`logical`) binary variable want analyze. labelstr (`string`) label string. label_fstr (`string`) format string label. format (`character` `list`) format statistics. .N_col (`numeric`) number columns.","code":""},{"path":"na.html/reference/c_proportion_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"c_function for proportion of `TRUE` in logical vector — c_proportion_logical","text":"[rtables::in_rows()] result proportion statistics.","code":""},{"path":[]},{"path":"na.html/reference/c_row_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Content Row Function to Count Rows — c_row_counts","title":"Simple Content Row Function to Count Rows — c_row_counts","text":"Simple Content Row Function Count Rows","code":""},{"path":"na.html/reference/c_row_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Content Row Function to Count Rows — c_row_counts","text":"","code":"c_row_counts(df, labelstr, label_fstr)"},{"path":"na.html/reference/c_row_counts_alt.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Content Row Function to Count Rows from Alternative Data — c_row_counts_alt","title":"Simple Content Row Function to Count Rows from Alternative Data — c_row_counts_alt","text":"Simple Content Row Function Count Rows Alternative Data","code":""},{"path":"na.html/reference/c_row_counts_alt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Content Row Function to Count Rows from Alternative Data — c_row_counts_alt","text":"","code":"c_row_counts_alt(df, labelstr, label_fstr, .alt_df)"},{"path":"na.html/reference/check_wrap_nobreak.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Word Wrapping — check_wrap_nobreak","title":"Check Word Wrapping — check_wrap_nobreak","text":"Check set column widths word-breaking wrap behavior","code":""},{"path":"na.html/reference/check_wrap_nobreak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Word Wrapping — check_wrap_nobreak","text":"","code":"check_wrap_nobreak(tt, colwidths, fontspec)"},{"path":"na.html/reference/check_wrap_nobreak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Word Wrapping — check_wrap_nobreak","text":"tt TableTree colwidths numeric. Column widths (numbers spaces `fontspec`) fontspec font_spec.","code":""},{"path":"na.html/reference/check_wrap_nobreak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Word Wrapping — check_wrap_nobreak","text":"`TRUE` wrap able done without breaking words, `FALSE` wordbreaking required apply `colwidths`","code":""},{"path":"na.html/reference/cmp_cfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","title":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","text":"simple statistics function prepares numbers percentages   required format, use split content row. denominator   expected visits column.","code":""},{"path":"na.html/reference/cmp_cfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","text":"","code":"cmp_cfun(df, labelstr, .spl_context, variables, formats)"},{"path":"na.html/reference/cmp_cfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. variables (`list`) variable names logical columns `expected`, `received` `missing` visits. formats (`list`) `count_percent` format use received missing visits columns.","code":""},{"path":"na.html/reference/cmp_cfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","text":"[rtables::in_rows()] result counts proportion statistics.","code":""},{"path":"na.html/reference/cmp_cfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary Analysis Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_cfun","text":"Although function just returns `NULL` two uses,   `tern` users provides documentation arguments   commonly consistently used framework. developer adds   single reference point import `roxygen` argument description :   `@inheritParams proposal_argument_convention`","code":""},{"path":[]},{"path":"na.html/reference/cmp_post_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_post_fun","title":"Split Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_post_fun","text":"just split 3 columns expected, received missing visits.","code":""},{"path":"na.html/reference/cmp_post_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_post_fun","text":"","code":"cmp_post_fun(ret, spl, fulldf, .spl_context)  cmp_split_fun(df, spl, vals = NULL, labels = NULL, trim = FALSE, .spl_context)"},{"path":"na.html/reference/cmp_post_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_post_fun","text":"ret (`list`) result previous split function steps. spl (`split`) split object. fulldf (`data.frame`) full data frame. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. df (`data.frame`) data set containing analysis variables. vals (`character`) values use split. labels (named `character`) labels statistics (without indent). trim (`logical`) whether trim values.","code":""},{"path":"na.html/reference/cmp_post_fun.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split Function for Compliance Columns (TEFSCNCMP01 e.g.) — cmp_post_fun","text":"split function used proportion table TEFSCNCMP01 similar ones.","code":""},{"path":[]},{"path":"na.html/reference/colspan_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"function used creating data frame containing map compatible rtables split function `trim_levels_to_map`","code":""},{"path":"na.html/reference/colspan_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"","code":"create_colspan_map(   df,   non_active_grp = c(\"Placebo\"),   non_active_grp_span_lbl = \" \",   active_grp_span_lbl = \"Active Study Agent\",   colspan_var = \"colspan_trt\",   trt_var = \"TRT01A\",   active_first = TRUE )"},{"path":"na.html/reference/colspan_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"df name data frame spanning variable appended non_active_grp value(s) treatments represent non-active comparator treatment groups default value = c('Placebo') non_active_grp_span_lbl assigned value spanning variable non-active comparator treatment groups default value = ” active_grp_span_lbl assigned value spanning variable active treatment group(s) default value = 'Active Study Agent' colspan_var desired name newly created spanning variable default value = 'colspan_trt' trt_var name treatment variable used determine spanning treatment group value apply. default value = 'TRT01A' active_first whether active columns come first.","code":""},{"path":"na.html/reference/colspan_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"data frame contains map used rtables split function `trim_levels_to_map`","code":""},{"path":"na.html/reference/colspan_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"function creates data frame containing map compatible rtables split function `trim_levels_to_map`. levels specified trt_var variable stored within trt_var variable colspan_var variable contain corresponding spanning header value treatment group.","code":""},{"path":"na.html/reference/colspan_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Column Spanning Mapping Dataframe — create_colspan_map","text":"","code":"library(tibble)  df <- tribble(   ~TRT01A,   'Placebo',   'Active 1',   'Active 2' )  df$TRT01A <- factor(df$TRT01A, levels = c('Placebo', 'Active 1', 'Active 2'))  colspan_map <- create_colspan_map(   df = df,   non_active_grp = c('Placebo'),   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Study Agent',   colspan_var = 'colspan_trt',   trt_var = 'TRT01A' )  colspan_map #>          colspan_trt   TRT01A #> 1 Active Study Agent Active 1 #> 2 Active Study Agent Active 2 #> 3                     Placebo"},{"path":"na.html/reference/colspan_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of Column Spanning Variables — create_colspan_var","title":"Creation of Column Spanning Variables — create_colspan_var","text":"function used creating spanning variable treatment groups","code":""},{"path":"na.html/reference/colspan_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of Column Spanning Variables — create_colspan_var","text":"","code":"create_colspan_var(   df,   non_active_grp = c(\"Placebo\"),   non_active_grp_span_lbl = \" \",   active_grp_span_lbl = \"Active Study Agent\",   colspan_var = \"colspan_trt\",   trt_var = \"TRT01A\" )"},{"path":"na.html/reference/colspan_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of Column Spanning Variables — create_colspan_var","text":"df name data frame spanning variable appended non_active_grp value(s) treatments represent non-active comparator treatment groups default value = c('Placebo') non_active_grp_span_lbl assigned value spanning variable non-active comparator treatment groups default value = ” active_grp_span_lbl assigned value spanning variable active treatment group(s) default value = 'Active Study Agent' colspan_var desired name newly created spanning variable default value = 'colspan_trt' trt_var name treatment variable used determine spanning treatment group value apply. default value = 'TRT01A'","code":""},{"path":"na.html/reference/colspan_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of Column Spanning Variables — create_colspan_var","text":"data frame contains new variable specified colspan_var","code":""},{"path":"na.html/reference/colspan_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of Column Spanning Variables — create_colspan_var","text":"function creates spanning variable treatment groups intended used within column space.","code":""},{"path":"na.html/reference/colspan_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of Column Spanning Variables — create_colspan_var","text":"","code":"library(tibble)  df <- tribble(   ~TRT01A,   'Placebo',   'Active 1',   'Active 2' )  df$TRT01A <- factor(df$TRT01A, levels = c('Placebo', 'Active 1', 'Active 2'))  colspan_var <- create_colspan_var(   df = df,   non_active_grp = c('Placebo'),   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Treatment',   colspan_var = 'colspan_trt',   trt_var = 'TRT01A' )  colspan_var #> # A tibble: 3 × 2 #>   TRT01A   colspan_trt        #>   <fct>    <fct>              #> 1 Placebo  \" \"                #> 2 Active 1 \"Active Treatment\" #> 3 Active 2 \"Active Treatment\""},{"path":"na.html/reference/column_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics within the column space — column_stats","title":"Statistics within the column space — column_stats","text":"function used obtaining statistics within columns table. Used change baseline tables. takes visit names row labels.","code":""},{"path":"na.html/reference/column_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics within the column space — column_stats","text":"","code":"column_stats(   exclude_visits = c(\"Baseline (DB)\"),   var_names = c(\"AVAL\", \"CHG\", \"BASE\"),   stats = list(main = c(N = \"N\", mean = \"Mean\", SD = \"SD\", SE = \"SE\", Med = \"Med\", Min =     \"Min\", Max = \"Max\"), base = c(mean = \"Mean\")) )"},{"path":"na.html/reference/column_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics within the column space — column_stats","text":"exclude_visits Vector visit(s) want statistics displayed baseline mean change baseline sections table. var_names Vector variable names use instead default AVAL, CHG, BASE. first two elements treated main variables full statistics, third element treated base variable. default, function expects specific variable names data, can customize match dataset's column names. stats list two components, `main` `base`, define statistics calculated main variables (default: AVAL, CHG) base variable (default: BASE). Default main variables: c(N = \"N\", mean = \"Mean\", SD = \"SD\", SE = \"SE\", Med = \"Med\", Min = \"Min\", Max = \"Max\") Default base variable: c(mean = \"Mean\") can customize statistics providing named vectors list. names used internally calculations, values used display labels table.","code":""},{"path":"na.html/reference/complex_scoring_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Complex Scoring Function — jj_complex_scorefun","title":"Complex Scoring Function — jj_complex_scorefun","text":"function used sorting AE tables (others) required.","code":""},{"path":"na.html/reference/complex_scoring_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complex Scoring Function — jj_complex_scorefun","text":"","code":"jj_complex_scorefun(   spanningheadercolvar = \"colspan_trt\",   usefirstcol = FALSE,   colpath = NULL,   firstcat = NULL,   lastcat = NULL )"},{"path":"na.html/reference/complex_scoring_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complex Scoring Function — jj_complex_scorefun","text":"spanningheadercolvar name spanning header variable defines active treatment columns. active treatment spanning header column user can define NA. usefirstcol allows just use first column table sort . colpath name column path needed sort (default=NULL). overrides arguments specified (except firstcat lastcat applied requested colpath) firstcat wish put category top list despite n's user can specify . lastcat wish put category bottom list despite n's user can specify .","code":""},{"path":"na.html/reference/complex_scoring_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complex Scoring Function — jj_complex_scorefun","text":"function can used score function (scorefun `sort_at_path`).","code":""},{"path":"na.html/reference/complex_scoring_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complex Scoring Function — jj_complex_scorefun","text":"sort function sorts follows: Takes columns specified spanning column header (default= colspan_trt) sorts last treatment column within . spanning column header variable exists (e.g one active treatment arm decided remove spanning header layout) sort first treatment column table. function really designed tables sub-columns, however users wish override default sorting behavior, can simply specify colpath use sorting (default=NULL)","code":""},{"path":"na.html/reference/complex_scoring_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complex Scoring Function — jj_complex_scorefun","text":"","code":"ADAE <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   AEBODSYS = c(     'SOC 1', 'SOC 2', 'SOC 1', 'SOC 2', 'SOC 2',     'SOC 2', 'SOC 2', 'SOC 1', 'SOC 2', 'SOC 1'   ),   AEDECOD = c(     'Coded Term 2', 'Coded Term 1', 'Coded Term 3', 'Coded Term 4',     'Coded Term 4', 'Coded Term 4', 'Coded Term 5', 'Coded Term 3',     'Coded Term 1', 'Coded Term 2'   ),   TRT01A = c(     'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB',     'Placebo', 'Placebo', 'Placebo', 'ARMA', 'ARMB'   ),   TRTEMFL = c('Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y') )  ADAE <- ADAE |>   dplyr::mutate(TRT01A = as.factor(TRT01A))  ADAE$colspan_trt <- factor(ifelse(ADAE$TRT01A == 'Placebo', ' ', 'Active Study Agent'),   levels = c('Active Study Agent', ' ') )  ADAE$rrisk_header <- 'Risk Difference (%) (95% CI)' ADAE$rrisk_label <- paste(ADAE$TRT01A, paste('vs', 'Placebo'))  colspan_trt_map <- create_colspan_map(ADAE,   non_active_grp = 'Placebo',   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Study Agent',   colspan_var = 'colspan_trt',   trt_var = 'TRT01A' )  ref_path <- c(\"colspan_trt\", \" \", \"TRT01A\", \"Placebo\")  lyt <- basic_table() |>   split_cols_by(     'colspan_trt',     split_fun = trim_levels_to_map(map = colspan_trt_map)   ) |>   split_cols_by('TRT01A') |>   split_cols_by('rrisk_header', nested = FALSE) |>   split_cols_by(     'TRT01A',     labels_var = 'rrisk_label',     split_fun = remove_split_levels('Placebo')   ) |>   analyze(     'TRTEMFL',     a_freq_j,     show_labels = 'hidden',     extra_args = list(       method = 'wald',       label = 'Subjects with >=1 AE',       ref_path = ref_path,       .stats = \"count_unique_fraction\"     )   ) |>   split_rows_by('AEBODSYS',     split_label = 'System Organ Class',     split_fun = trim_levels_in_group('AEDECOD'),     label_pos = 'topleft',     section_div = c(' '),     nested = FALSE   ) |>   summarize_row_groups(     'AEBODSYS',     cfun = a_freq_j,     extra_args = list(       method = 'wald',       ref_path = ref_path,       .stats = \"count_unique_fraction\"     )   ) |>   analyze(     'AEDECOD',     afun = a_freq_j,     extra_args = list(       method = 'wald',       ref_path = ref_path,       .stats = \"count_unique_fraction\"     )   )  result <- build_table(lyt, ADAE)  result #>                          Active Study Agent                            Risk Difference (%) (95% CI)          #> System Organ Class        ARMA         ARMB       Placebo       ARMA vs Placebo          ARMB vs Placebo     #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Subjects with >=1 AE   3 (100.0%)   4 (100.0%)   3 (100.0%)      0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #> SOC 1                  2 (66.7%)    1 (25.0%)    1 (33.3%)       0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #>   Coded Term 2         1 (33.3%)    1 (25.0%)        0        50.0 (-19.3, 100.0)     100.0 (100.0, 100.0)   #>   Coded Term 3         1 (33.3%)        0        1 (33.3%)    -50.0 (-100.0, 19.3)   -100.0 (-100.0, -100.0) #>                                                                                                              #> SOC 2                  1 (33.3%)    3 (75.0%)    2 (66.7%)       0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #>   Coded Term 1         1 (33.3%)    1 (25.0%)        0        100.0 (100.0, 100.0)     33.3 (-20.0, 86.7)    #>   Coded Term 4             0        2 (50.0%)    1 (33.3%)    -50.0 (-100.0, 19.3)     16.7 (-70.8, 100.0)   #>   Coded Term 5             0            0        1 (33.3%)    -50.0 (-100.0, 19.3)    -50.0 (-100.0, 19.3)    # now add sorting function to sort by AEBODSYS and AEDECOD within SOC # using complex score function which sorts # using the last active treatment column by default result <- sort_at_path(   result,   c('root', 'AEBODSYS'),   scorefun = jj_complex_scorefun() )  result <- sort_at_path(   result,   c('root', 'AEBODSYS', '*', 'AEDECOD'),   scorefun = jj_complex_scorefun() )  result #>                          Active Study Agent                            Risk Difference (%) (95% CI)          #> System Organ Class        ARMA         ARMB       Placebo       ARMA vs Placebo          ARMB vs Placebo     #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Subjects with >=1 AE   3 (100.0%)   4 (100.0%)   3 (100.0%)      0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #> SOC 2                  1 (33.3%)    3 (75.0%)    2 (66.7%)       0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #>   Coded Term 4             0        2 (50.0%)    1 (33.3%)    -50.0 (-100.0, 19.3)     16.7 (-70.8, 100.0)   #>   Coded Term 1         1 (33.3%)    1 (25.0%)        0        100.0 (100.0, 100.0)     33.3 (-20.0, 86.7)    #>   Coded Term 5             0            0        1 (33.3%)    -50.0 (-100.0, 19.3)    -50.0 (-100.0, 19.3)   #>                                                                                                              #> SOC 1                  2 (66.7%)    1 (25.0%)    1 (33.3%)       0.0 (0.0, 0.0)          0.0 (0.0, 0.0)      #>   Coded Term 2         1 (33.3%)    1 (25.0%)        0        50.0 (-19.3, 100.0)     100.0 (100.0, 100.0)   #>   Coded Term 3         1 (33.3%)        0        1 (33.3%)    -50.0 (-100.0, 19.3)   -100.0 (-100.0, -100.0)"},{"path":"na.html/reference/cond_rm_facets.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Removal of Facets — cond_rm_facets","title":"Conditional Removal of Facets — cond_rm_facets","text":"Conditional Removal Facets","code":""},{"path":"na.html/reference/cond_rm_facets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Removal of Facets — cond_rm_facets","text":"","code":"cond_rm_facets(   facets = NULL,   facets_regex = NULL,   ancestor_pos = 1,   split = NULL,   split_regex = NULL,   value = NULL,   value_regex = NULL,   keep_matches = FALSE )"},{"path":"na.html/reference/cond_rm_facets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Removal of Facets — cond_rm_facets","text":"facets character NULL. Vector facet names removed condition(s) met facets_regex character(1). Regular expression identify facet names removed condition(s) met. ancestor_pos numeric(1). Row spl_context check condition within. E.g., 1 represents first split, 2 represents second split nested within first, etc. NA specifies conditions checked split levels. Negative integers indicate position counting back current one, e.g., -1 indicates direct parent (recent split one). Negative positive/NA positions mixed. split character(1) NULL. specified, name split position `ancestor_pos` must identical value removal condition met. split_regex character(1) NULL. specified, regular expression name split position `ancestor_pos` must match removal condition met. specified time `split`. value character(1) NULL. specified, split (facet) value position `ancestor_pos` must identical value removal condition met. value_regex character(1) NULL. specified, regular expression value split position `ancestor_pos` must match removal condition met. specified time `value`. keep_matches logical(1). Given specified condition met, facets removed matching `facets`/`facets_regex` (`FALSE`, default), ** matching (`TRUE`).","code":""},{"path":"na.html/reference/cond_rm_facets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Removal of Facets — cond_rm_facets","text":"function suitable use `make_split_fun`'s `post` argument encodes specified condition.","code":""},{"path":"na.html/reference/cond_rm_facets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Removal of Facets — cond_rm_facets","text":"Facet removal occurs specified condition(s) split(s) value(s) met within least one split_context rows indicated `ancestor_pos`; otherwise set facets returned unchanged. facet removal performed, either ** facets match `facets` (`facets_regex` removed ( default `keep_matches == FALSE`  case), *non-matching* facets removed (  `keep_matches_only == TRUE`).","code":""},{"path":"na.html/reference/cond_rm_facets.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Conditional Removal of Facets — cond_rm_facets","text":"degenerate table likely returned facets removed.","code":""},{"path":"na.html/reference/cond_rm_facets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Removal of Facets — cond_rm_facets","text":"","code":"## remove the 'A' facet if anywhere in the preceding ## faceting, we had a split 'ARM' (splitting the ARM var) ## with a value that matches 'Placeb' as a regex rm_a_from_placebo <- cond_rm_facets(   facets = 'A',   ancestor_pos = NA,   value_regex = 'Placeb',   split = 'ARM' ) mysplit <- make_split_fun(post = list(rm_a_from_placebo))  lyt <- basic_table() |>   split_cols_by('ARM') |>   split_cols_by('STRATA1', split_fun = mysplit) |>   analyze('AGE', mean, format = 'xx.x') build_table(lyt, ex_adsl) #>            A: Drug X         B: Placebo        C: Combination    #>         A      B      C       B       C       A       B      C   #> ———————————————————————————————————————————————————————————————— #> mean   33.1   33.9   34.2   36.0    35.2    34.2    36.3    35.6  rm_bc_from_combo <- cond_rm_facets(   facets = c('B', 'C'),   ancestor_pos = -1,   value_regex = 'Combi' ) mysplit2 <- make_split_fun(post = list(rm_bc_from_combo))  lyt2 <- basic_table() |>   split_cols_by('ARM') |>   split_cols_by('STRATA1', split_fun = mysplit2) |>   analyze('AGE', mean, format = 'xx.x') tbl2 <- build_table(lyt2, ex_adsl) tbl2 #>            A: Drug X            B: Placebo       C: Combination #>         A      B      C      A      B      C           A        #> ——————————————————————————————————————————————————————————————— #> mean   33.1   33.9   34.2   35.1   36.0   35.2        34.2      # rm_bc_from_combo2 <- cond_rm_facets(   facets_regex = '^A$',   ancestor_pos = -1,   value_regex = 'Combi',   keep_matches = TRUE ) mysplit3 <- make_split_fun(post = list(rm_bc_from_combo2)) # lyt3 <- basic_table() |>   split_cols_by('ARM') |>   split_cols_by('STRATA1', split_fun = mysplit3) |>   analyze('AGE', mean, format = 'xx.x') tbl3 <- build_table(lyt3, ex_adsl) ## column info carries around the split objects which ## carry around their split_fun, which are different so ## identical(tbl2, tbl3) will (expectedly) be FALSE stopifnot(identical(cell_values(tbl2), cell_values(tbl3)))"},{"path":"na.html/reference/count_denom_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting count, denominator and fraction values — jjcsformat_count_denom_fraction","title":"Formatting count, denominator and fraction values — jjcsformat_count_denom_fraction","text":"Formatting count, denominator fraction values","code":""},{"path":"na.html/reference/count_denom_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting count, denominator and fraction values — jjcsformat_count_denom_fraction","text":"","code":"jjcsformat_count_denom_fraction(x, d = 1, roundmethod = c(\"sas\", \"iec\"), ...)"},{"path":"na.html/reference/count_denom_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting count, denominator and fraction values — jjcsformat_count_denom_fraction","text":"x `numeric` elements `num` `fraction` `num`, `denom` `fraction`. d numeric(1). Number digits round fraction (default=1) roundmethod (`string`) choice rounding methods. Options : * `sas`: underlying rounding method `tidytlg::roundSAS`,  roundSAS comes Stack Overflow post https://stackoverflow.com/questions/12688717/round---5 * `iec`: underlying rounding method `round` ... Additional arguments passed methods.","code":""},{"path":"na.html/reference/count_denom_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting count, denominator and fraction values — jjcsformat_count_denom_fraction","text":"","code":"jjcsformat_count_denom_fraction(c(7, 10, 0.7)) #> [1] \"7/10 (70.0%)\" jjcsformat_count_denom_fraction(c(70000, 70001, 70000 / 70001)) #> [1] \"70000/70001 (>99.9%)\" jjcsformat_count_denom_fraction(c(235, 235, 235 / 235)) #> [1] \"235/235 (100.0%)\""},{"path":"na.html/reference/count_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting count and fraction values — count_fraction","title":"Formatting count and fraction values — count_fraction","text":"Formats count together fraction (/denominator) special consideration count 0, fraction 1.  See also: tern::format_count_fraction_fixed_dp()","code":""},{"path":"na.html/reference/count_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting count and fraction values — count_fraction","text":"","code":"jjcsformat_count_fraction(x, d = 1, roundmethod = c(\"sas\", \"iec\"), ...)"},{"path":"na.html/reference/count_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting count and fraction values — count_fraction","text":"x `numeric` elements `num` `fraction` `num`, `denom` `fraction`. d numeric(1). Number digits round fraction (default=1) roundmethod (`string`) choice rounding methods. Options : * `sas`: underlying rounding method `tidytlg::roundSAS`,  roundSAS comes Stack Overflow post https://stackoverflow.com/questions/12688717/round---5 * `iec`: underlying rounding method `round` ... Additional arguments passed methods.","code":""},{"path":"na.html/reference/count_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatting count and fraction values — count_fraction","text":"string format `count / denom (ratio percent)`. `count` 0, format `0`. fraction >0.99, format `count / denom (>99.9 percent)`","code":""},{"path":[]},{"path":"na.html/reference/count_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting count and fraction values — count_fraction","text":"","code":"jjcsformat_count_fraction(c(7, 0.7)) #> [1] \"7 (70.0%)\" jjcsformat_count_fraction(c(70000, 0.9999999)) #> [1] \"70000 (>99.9%)\" jjcsformat_count_fraction(c(70000, 1)) #> [1] \"70000 (100.0%)\""},{"path":"na.html/reference/count_pruner.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Pruner — count_pruner","title":"Count Pruner — count_pruner","text":"pruning constructor function identifies records pruned based count (assumed first statistic displayed compound statistic (e.g., ## / ## (XX.X percent) presented).","code":""},{"path":"na.html/reference/count_pruner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Pruner — count_pruner","text":"","code":"count_pruner(   count = 0,   cat_include = NULL,   cat_exclude = NULL,   cols = c(\"TRT01A\") )"},{"path":"na.html/reference/count_pruner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Pruner — count_pruner","text":"count count threshold.  Function keep records strictly greater threshold. cat_include Category considered pruning cat_exclude logical Category excluded pruning cols column path (character integer (column indices))","code":""},{"path":"na.html/reference/count_pruner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Pruner — count_pruner","text":"function can utilized pruning function prune_table","code":""},{"path":"na.html/reference/count_pruner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Pruner — count_pruner","text":"","code":"ADSL <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01P = factor(     c(       'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB',       'Placebo', 'Placebo', 'Placebo', 'ARMA', 'ARMB'      )   ),   FASFL = c('Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y'),   SAFFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'),   PKFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N') )  lyt <- basic_table() |>   split_cols_by('TRT01P') |>   add_overall_col('Total') |>   analyze('FASFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     extra_args = list(label = 'Full', val = 'Y'),     show_labels = 'visible'   ) |>   analyze('SAFFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     extra_args = list(label = 'Safety', val = 'Y'),     show_labels = 'visible'   ) |>   analyze('PKFL',     var_labels = 'Analysis set:',     afun = a_freq_j,     extra_args = list(label = 'PK', val = 'Y'),     show_labels = 'visible'   )  result <- build_table(lyt, ADSL)  result #>                     ARMA          ARMB         Placebo         Total     #> ———————————————————————————————————————————————————————————————————————— #> Analysis set:                                                            #>   Full          3/3 (100.0%)   3/4 (75.0%)   3/3 (100.0%)   9/10 (90.0%) #> Analysis set:                                                            #>   Safety         0/3 (0.0%)    0/4 (0.0%)     0/3 (0.0%)    0/10 (0.0%)  #> Analysis set:                                                            #>   PK             0/3 (0.0%)    0/4 (0.0%)     0/3 (0.0%)    0/10 (0.0%)   # use pruning function to prune where total column has >0 count, # but exclude pruning safety set row result <- prune_table(   result,   prune_func = count_pruner(cat_exclude = c('Safety'), cols = 'Total') )  result #>                     ARMA          ARMB         Placebo         Total     #> ———————————————————————————————————————————————————————————————————————— #> Analysis set:                                                            #>   Full          3/3 (100.0%)   3/4 (75.0%)   3/3 (100.0%)   9/10 (90.0%) #> Analysis set:                                                            #>   Safety         0/3 (0.0%)    0/4 (0.0%)     0/3 (0.0%)    0/10 (0.0%)"},{"path":"na.html/reference/coxph_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Workaround statistics function to add HR with CI — coxph_hr","title":"Workaround statistics function to add HR with CI — coxph_hr","text":"workaround [tern::s_coxph_pairwise()], adds statistic containing hazard ratio estimate together confidence interval.","code":""},{"path":"na.html/reference/coxph_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workaround statistics function to add HR with CI — coxph_hr","text":"","code":"a_coxph_hr(   df,   .var,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_coxph_hr(   df,   .ref_group,   .in_ref_col,   .var,   is_event,   strata = NULL,   control = control_coxph(),   alternative = c(\"two.sided\", \"less\", \"greater\") )"},{"path":"na.html/reference/coxph_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workaround statistics function to add HR with CI — coxph_hr","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. ref_path (`character`) global reference group specification, see [get_ref_info()]. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. ... additional arguments lower level functions. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. .ref_group (`data.frame` `vector`) data corresponding reference group. .in_ref_col (`logical`) `TRUE` working reference level, `FALSE` otherwise. is_event (`character`) variable name storing Logical values: `TRUE` event, `FALSE` time event censored. strata (`character` `NULL`) variable names indicating stratification factors. control (`list`) relevant list control options. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed.","code":""},{"path":"na.html/reference/coxph_hr.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Workaround statistics function to add HR with CI — coxph_hr","text":"a_coxph_hr(): Formatted analysis function used `afun`. s_coxph_hr(): Statistics function forked [tern::s_coxph_pairwise()]. difference : 1) returns additional statistic `lr_stat_df` (log rank statistic degrees freedom).","code":""},{"path":"na.html/reference/coxph_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workaround statistics function to add HR with CI — coxph_hr","text":"","code":"library(dplyr)  adtte_f <- tern::tern_ex_adtte |>   filter(PARAMCD == \"OS\") |>   mutate(is_event = CNSR == 0)  df <- adtte_f |> filter(ARMCD == 'ARM A') df_ref_group <- adtte_f |> filter(ARMCD == 'ARM B')  basic_table() |>   split_cols_by(var = 'ARMCD', ref_group = 'ARM A') |>   add_colcounts() |>   analyze(\"AVAL\",     afun = s_coxph_hr,     extra_args = list(is_event = 'is_event'),     var_labels = 'Unstratified Analysis',     show_labels = 'visible'   ) |>   build_table(df = adtte_f) #>                           ARM A                            ARM B                                                  ARM C                         #>                           (N=69)                          (N=73)                                                  (N=58)                        #> ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Unstratified Analysis                                                                                                                           #>   p-value (log-rank)                                0.0904951081206286                                     0.00860286392158099                  #>   lr_stat_df                                        2.86554400612335, 1                                    6.90346948570891, 1                  #>   hr                                                 1.40675529802996                                        1.81062231929339                   #>   95% CI                                    0.945772426764327, 2.09242774745061                     1.15592003553536, 2.83614184575062          #>   Hazard Ratio (95% CI)            1.40675529802996, 0.945772426764327, 2.09242774745061   1.81062231929339, 1.15592003553536, 2.83614184575062 #>   n_tot                                                     142                                                    127                          #>   n_tot_events                                              101                                                     84                             basic_table() |>   split_cols_by(var = 'ARMCD', ref_group = 'ARM A') |>   add_colcounts() |>   analyze(\"AVAL\",           afun = s_coxph_hr,           extra_args = list(is_event = 'is_event',                             strata = 'SEX',                             control = tern::control_coxph(pval_method = 'wald')),           var_labels = 'Unstratified Analysis',           show_labels = 'visible'   ) |>   build_table(df = adtte_f) #>                           ARM A                           ARM B                                                  ARM C                         #>                           (N=69)                          (N=73)                                                 (N=58)                        #> —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Unstratified Analysis                                                                                                                          #>   p-value (wald)                                    0.0783698773203908                                    0.00662292473338187                  #>   lr_stat_df                                       3.12966155715821, 1                                    7.60136269697425, 1                  #>   hr                                                 1.43602612933735                                       1.88581879789238                   #>   95% CI                                    0.959767646673475, 2.1486148770351                     1.19297959598155, 2.98103383365769          #>   Hazard Ratio (95% CI)            1.43602612933735, 0.959767646673475, 2.1486148770351   1.88581879789238, 1.19297959598155, 2.98103383365769 #>   n_tot                                                    142                                                    127                          #>   n_tot_events                                             101                                                     84                          adtte_f <- tern::tern_ex_adtte |>   dplyr::filter(PARAMCD == \"OS\") |>   dplyr::mutate(is_event = CNSR == 0) df <- adtte_f |> dplyr::filter(ARMCD == 'ARM A') df_ref <- adtte_f |> dplyr::filter(ARMCD == 'ARM B')  s_coxph_hr(   df = df,   .ref_group = df_ref,   .in_ref_col = FALSE,   .var = 'AVAL',   is_event = 'is_event',   strata = NULL ) #> $pvalue #> [1] 0.09049511 #> attr(,\"label\") #> [1] \"p-value (log-rank)\" #>  #> $lr_stat_df #> [1] 2.865544 1.000000 #>  #> $hr #> [1] 0.7108557 #>  #> $hr_ci #> [1] 0.4779138 1.0573368 #> attr(,\"label\") #> [1] \"95% CI\" #>  #> $hr_ci_3d #> [1] 0.7108557 0.4779138 1.0573368 #> attr(,\"label\") #> [1] \"Hazard Ratio (95% CI)\" #>  #> $n_tot #> [1] 142 #>  #> $n_tot_events #> [1] 101 #>"},{"path":"na.html/reference/d_test_proportion_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Description of the difference test between two proportions — d_test_proportion_diff","title":"Description of the difference test between two proportions — d_test_proportion_diff","text":"`r lifecycle::badge('stable')` auxiliary function describes analysis `s_test_proportion_diff`.","code":""},{"path":"na.html/reference/d_test_proportion_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description of the difference test between two proportions — d_test_proportion_diff","text":"","code":"d_test_proportion_diff(method, alternative)"},{"path":"na.html/reference/d_test_proportion_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description of the difference test between two proportions — d_test_proportion_diff","text":"method (`string`) one `chisq`, `cmh`, `fisher`; specifies test used calculate p-value. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed.","code":""},{"path":"na.html/reference/d_test_proportion_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description of the difference test between two proportions — d_test_proportion_diff","text":"`string` describing test p-value derived.","code":""},{"path":"na.html/reference/def_colwidths.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Column Widths — listing_column_widths","title":"Define Column Widths — listing_column_widths","text":"function aiding personalized column widths case default desired.","code":""},{"path":"na.html/reference/def_colwidths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Column Widths — listing_column_widths","text":"","code":"listing_column_widths(   mpf,   incl_header = TRUE,   col_gap = 0.5,   pg_width_ins = 8.88,   fontspec = font_spec(\"Times\", 8, 1.2),   verbose = FALSE )  def_colwidths(tt, fontspec, label_width_ins, col_gap, type = tlg_type(tt))"},{"path":"na.html/reference/def_colwidths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Column Widths — listing_column_widths","text":"mpf (`listing_df` `MatrixPrintForm` derived thereof) listing calculate column widths . incl_header (`logical(1)`) constraint break individual words extended words column labels? Defaults `TRUE` col_gap Column gap. pg_width_ins (`numeric(1)`) Number inches width *portion page listing printed *. Defaults `8.88` corresponds landscape orientation standard page margins. fontspec Font specification verbose (`logical(1)`) additional information messages displayed calculation column widths? Defaults `FALSE`. tt input Tabletree label_width_ins Label Width Inches. type Type table tree, used determine column width calculation method.","code":""},{"path":"na.html/reference/def_colwidths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Column Widths — listing_column_widths","text":"vector column widths suitable use `tt_to_tlgrtf` exporters.","code":""},{"path":"na.html/reference/def_colwidths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Column Widths — listing_column_widths","text":"","code":"# colwidths <- def_colwidths(result, font_spec('Times', 9L, 1.2), col_gap = 7L, label_width_ins = 2)"},{"path":"na.html/reference/default_stats_formats_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"`r lifecycle::badge('experimental')` Utility functions get valid statistic methods different method groups (`.stats`) associated formats (`.formats`), labels (`.labels`), indent modifiers (`.indent_mods`). utility used across `junco`, working principles can seen [analyze_vars()]. See notes understand experimental.","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"","code":"junco_get_stats(   method_groups = \"analyze_vars_numeric\",   stats_in = NULL,   custom_stats_in = NULL,   add_pval = FALSE )  junco_get_formats_from_stats(stats, formats_in = NULL, levels_per_stats = NULL)  junco_get_labels_from_stats(   stats,   labels_in = NULL,   levels_per_stats = NULL,   label_attr_from_stats = NULL )  get_label_attr_from_stats(x_stats)  junco_get_indents_from_stats(stats, indents_in = NULL, levels_per_stats = NULL)  format_stats(   x_stats,   method_groups,   stats_in,   formats_in,   labels_in,   indents_in )  junco_default_stats  junco_default_formats  junco_default_labels  junco_default_indents"},{"path":"na.html/reference/default_stats_formats_labels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"* `junco_default_stats` named list available statistics, element   named corresponding statistical method group. * `junco_default_formats` named vector available default formats, element   named corresponding statistic. * `junco_default_labels` named `character` vector available default labels, element   named corresponding statistic. * `junco_default_indents` named `integer` vector available default indents, element   named corresponding statistic. indentations different zero need   recorded .","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"method_groups (`character`) indicates statistical method group (`junco` analyze function) retrieve default statistics . character vector can used specify one statistical method group. stats_in (`character`) statistics retrieve selected method group. custom statistical functions used, `stats_in` needs . custom_stats_in (`character`) custom statistics add default statistics. add_pval (`flag`) `'pval'` (`'pval_counts'` `method_groups` contains `'analyze_vars_counts'`) added statistical methods? stats (`character`) statistical methods return defaults . formats_in (named `vector`) custom formats use instead defaults. Can character vector values [formatters::list_valid_format_labels()] custom format functions. Defaults `NULL` rows value provided. levels_per_stats (named `list` `character` `NULL`) named list name element statistic `stats` element levels `factor` `character` variable (variable name), corresponding single row, named statistic calculated . statistic calculated (one row), element can either `NULL` name statistic. list element flattened names list elements returned function format `statistic.level` (just `statistic` statistics calculated single row). Defaults `NULL`. labels_in (named `character`) custom labels use instead defaults. value provided, variable level (rows correspond levels variable) statistic name used label. label_attr_from_stats (named `list`) `labels_in = NULL`, used instead. list values defined statistical functions default labels. Values ignored `labels_in` provided `”` values provided. x_stats (`list`) statistics results. indents_in (named `integer`) custom row indent modifiers use instead defaults. Defaults `0L` values.","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"* `junco_get_stats()` returns `character` vector statistical methods. * `junco_get_formats_from_stats()` returns named list formats strings functions. * `junco_get_labels_from_stats()` returns named list labels strings. * `junco_get_indents_from_stats()` returns named list indentation modifiers integers. default   indentations zero. * `format_stats()` returns correspondingly formatted [rtables::in_rows()] result.","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"Current choices `type` `counts` `numeric` [analyze_vars()] affect `junco_get_stats()`.","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"junco_get_stats(): Get statistics available given method group (analyze function). check available defaults see `junco_default_stats` list. junco_get_formats_from_stats(): Get formats corresponding list statistics. check available defaults see list `junco_default_formats`. junco_get_labels_from_stats(): Get labels corresponding list statistics. check available defaults see list `junco_default_labels`. get_label_attr_from_stats(): Get label attributes statistics list. junco_get_indents_from_stats(): Get row indent modifiers corresponding list statistics/rows. format_stats(): Format statistics results according format specifications. junco_default_stats: Named list available statistics method group `junco`. junco_default_formats: Named vector default formats `junco`. junco_default_labels: Named `character` vector default labels `junco`. junco_default_indents: Named `integer` vector default indents `junco`.","code":""},{"path":"na.html/reference/default_stats_formats_labels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — default_stats_formats_labels","text":"defaults experimental use names functions retrieve default statistics. generalized groups methods according reasonable groupings. functions modified `tern` file `utils_default_stats_formats_labels.R`. file contains `junco` specific wrappers functions called within `afun` functions, order point `junco` specific default statistics, formats labels. Formats `tern` `junco` `rtables` can functions take table cell value   return string. well documented `vignette('custom_appearance', package = 'rtables')`.","code":""},{"path":"na.html/reference/default_str_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Default String Mapping for Special Characters — default_str_map","title":"Default String Mapping for Special Characters — default_str_map","text":"tibble maps special characters UTF-8 equivalents use RTF output. Currently maps \">=\" \"<=\" Unicode characters.","code":""},{"path":"na.html/reference/default_str_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default String Mapping for Special Characters — default_str_map","text":"","code":"default_str_map"},{"path":"na.html/reference/default_str_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default String Mapping for Special Characters — default_str_map","text":"object class tbl_df (inherits tbl, data.frame) 2 rows 2 columns.","code":""},{"path":"na.html/reference/default_str_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default String Mapping for Special Characters — default_str_map","text":"tibble columns 'pattern' 'value', 'pattern' contains   string replaced 'value' contains replacement.","code":""},{"path":"na.html/reference/dot-unlist_keep_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom unlist function — .unlist_keep_nulls","title":"Custom unlist function — .unlist_keep_nulls","text":"Unlist list, retain `NULL` `'NULL'` `NA`.","code":""},{"path":"na.html/reference/dot-unlist_keep_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom unlist function — .unlist_keep_nulls","text":"","code":".unlist_keep_nulls(lst, null_placeholder = \"NULL\", recursive = FALSE)"},{"path":"na.html/reference/event_free.html","id":null,"dir":"Reference","previous_headings":"","what":"Workaround statistics function to time point survival estimate with CI — event_free","title":"Workaround statistics function to time point survival estimate with CI — event_free","text":"workaround [tern::s_surv_timepoint()], adds statistic containing time point specific survival estimate together confidence interval.","code":""},{"path":"na.html/reference/event_free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workaround statistics function to time point survival estimate with CI — event_free","text":"","code":"a_event_free(   df,   .var,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_event_free(   df,   .var,   time_point,   time_unit,   is_event,   percent = FALSE,   control = control_surv_timepoint() )"},{"path":"na.html/reference/event_free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workaround statistics function to time point survival estimate with CI — event_free","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. ... additional arguments lower level functions. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. time_point (`numeric`) time point estimate survival. time_unit (`string`) unit time time point. is_event (`character`) variable name storing Logical values: `TRUE` event, `FALSE` time event censored. percent (`flag`) whether return percent . control (`list`) relevant list control options.","code":""},{"path":"na.html/reference/event_free.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Workaround statistics function to time point survival estimate with CI — event_free","text":"a_event_free(): Formatted analysis function used `afun`. s_event_free(): Statistics function works like [tern::s_surv_timepoint()], difference returns additional statistic `event_free_ci`.","code":""},{"path":"na.html/reference/event_free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workaround statistics function to time point survival estimate with CI — event_free","text":"","code":"adtte_f <- tern::tern_ex_adtte |>   dplyr::filter(PARAMCD == \"OS\") |>   dplyr::mutate(     AVAL = tern::day2month(AVAL),     is_event = CNSR == 0   )  basic_table() |>   split_cols_by(var = 'ARMCD') |>   analyze(     vars = 'AVAL',     afun = a_event_free,     show_labels = \"hidden\",     na_str = tern::default_na_str(),     extra_args = list(       time_unit = 'week',       time_point = 3,       is_event = 'is_event'     )   ) |>   build_table(df = adtte_f) #>                                             ARM A               ARM B               ARM C       #> ——————————————————————————————————————————————————————————————————————————————————————————————— #> Patients remaining at risk                   60                  65                  50         #> Event Free Rate (%)                         92.64               89.04               86.21       #>   Standard Error of Event Free Rate         3.17                3.66                4.53        #>   95% CI                               (86.42, 98.85)      (81.88, 96.21)      (77.33, 95.08)   #> 3-week event-free rate (95% CI)       0.93 (0.86, 0.99)   0.89 (0.82, 0.96)   0.86 (0.77, 0.95) adtte_f <- tern::tern_ex_adtte |>   dplyr::filter(PARAMCD == \"OS\") |>   dplyr::mutate(     AVAL = tern::day2month(AVAL),     is_event = CNSR == 0   )  s_event_free(   df = adtte_f,   .var = 'AVAL',   time_point = 6,   is_event = 'is_event',   time_unit = 'month' ) #> $pt_at_risk #> [1] 159 #> attr(,\"label\") #> [1] \"Patients remaining at risk\" #>  #> $event_free_rate #> [1] 82.21113 #> attr(,\"label\") #> [1] \"Event Free Rate (%)\" #>  #> $rate_se #> [1] 2.72844 #> attr(,\"label\") #> [1] \"Standard Error of Event Free Rate\" #>  #> $rate_ci #> [1] 76.86349 87.55878 #> attr(,\"label\") #> [1] \"95% CI\" #>  #> $event_free_rate_3d #> [1] 82.21113 76.86349 87.55878 #> attr(,\"label\") #> [1] \"Event Free Rate (95% CI)\" #>  #> $event_free_ci #> [1] 0.8221113 0.7686349 0.8755878 #> attr(,\"label\") #> [1] \"6-month event-free rate (95% CI)\" #>"},{"path":"na.html/reference/find_missing_chg_after_avisit.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","title":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","text":"Helper Finding AVISIT CHG Missing","code":""},{"path":"na.html/reference/find_missing_chg_after_avisit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","text":"","code":"find_missing_chg_after_avisit(df)"},{"path":"na.html/reference/find_missing_chg_after_avisit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","text":"df (`data.frame`) `CHG` `AVISIT` variables.","code":""},{"path":"na.html/reference/find_missing_chg_after_avisit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","text":"string either factor level `AVISIT` missing,   `NA`.","code":""},{"path":"na.html/reference/find_missing_chg_after_avisit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for Finding AVISIT after which CHG are all Missing — find_missing_chg_after_avisit","text":"","code":"df <- data.frame(   AVISIT = factor(c(1, 2, 3, 4, 5)),   CHG = c(5, NA, NA, NA, 3) ) find_missing_chg_after_avisit(df) #> [1] NA  df2 <- data.frame(   AVISIT = factor(c(1, 2, 3, 4, 5)),   CHG = c(5, NA, 3, NA, NA) ) find_missing_chg_after_avisit(df2) #> [1] \"4\"  df3 <- data.frame(   AVISIT = factor(c(1, 2, 3, 4, 5)),   CHG = c(NA, NA, NA, NA, NA) ) find_missing_chg_after_avisit(df3) #> [1] \"1\""},{"path":"na.html/reference/fit_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"`ANCOVA` Analysis — fit_ancova","title":"`ANCOVA` Analysis — fit_ancova","text":"`ANCOVA` analysis, separately visit.","code":""},{"path":"na.html/reference/fit_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"`ANCOVA` Analysis — fit_ancova","text":"","code":"fit_ancova(   vars = list(response = \"AVAL\", covariates = c(), arm = \"ARM\", visit = \"AVISIT\", id =     \"USUBJID\"),   data,   conf_level = 0.95,   weights_emmeans = \"proportional\" )"},{"path":"na.html/reference/fit_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"`ANCOVA` Analysis — fit_ancova","text":"vars (named `list` `string` `character`) specifying variables `ANCOVA` analysis.   following elements need included character vectors match corresponding columns   `data`: - `response`: response variable.   - `covariates`: additional covariate terms (might also include interactions).   - `id`: subject ID variable (really needed computations internal logistics).   - `arm`: treatment group variable (factor).   - `visit`: visit variable (factor). Note `arm` variable default included model, thus part `covariates`. data (`data.frame`) variables specified `vars`. Records missing values independent variables excluded. conf_level (`proportion`) confidence level interval. weights_emmeans (`string`) argument [emmeans::emmeans()], `'counterfactual'` default.","code":""},{"path":"na.html/reference/fit_ancova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"`ANCOVA` Analysis — fit_ancova","text":"`tern_model` object list model results: - `fit`: list fitted [stats::lm()] result visit.   - `mse`: Mean squared error, .e. variance estimate, visit.   - `df`: Degrees freedom variance estimate visit.   - `lsmeans`: list data frames `estimates` `contrasts`.        attribute `weights` savse settings used (`weights_emmeans`).   - `vars`: variable list.   - `labels`: Corresponding list variable labels extracted `data`.   - `ref_level`: reference level arm variable, always first level.   - `treatment_levels`: treatment levels arm variable.   - `conf_level`: confidence level used construct `lsmeans` confidence intervals.","code":""},{"path":"na.html/reference/fit_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"`ANCOVA` Analysis — fit_ancova","text":"","code":"library(mmrm) #> mmrm() registered as emmeans extension  fit <- fit_ancova(   vars = list(     response = 'FEV1',     covariates = c('RACE', 'SEX'),     arm = 'ARMCD',     id = 'USUBJID',     visit = 'AVISIT'   ),   data = fev_data,   conf_level = 0.9,   weights_emmeans = 'equal' )"},{"path":"na.html/reference/fit_mmrm_j.html","id":null,"dir":"Reference","previous_headings":"","what":"`MMRM` Analysis — fit_mmrm_j","title":"`MMRM` Analysis — fit_mmrm_j","text":"`MMRM` analysis. Multiple functions can called result produce tables graphs.","code":""},{"path":"na.html/reference/fit_mmrm_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"`MMRM` Analysis — fit_mmrm_j","text":"","code":"fit_mmrm_j(   vars = list(response = \"AVAL\", covariates = c(), id = \"USUBJID\", arm = \"ARM\", visit =     \"AVISIT\"),   data,   conf_level = 0.95,   cor_struct = \"unstructured\",   weights_emmeans = \"counterfactual\",   averages_emmeans = list(),   ... )"},{"path":"na.html/reference/fit_mmrm_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"`MMRM` Analysis — fit_mmrm_j","text":"vars (named `list` `string` `character`) specifying variables `MMRM`.   following elements need included character vectors match corresponding columns   `data`: - `response`: response variable.   - `covariates`: additional covariate terms (might also include interactions).   - `id`: subject ID variable.   - `arm`: treatment group variable (factor).   - `visit`: visit variable (factor).   - `weights`: optional weights variable (`NULL` omitted weights used). Note main effects interaction `arm` `visit` default   included model. data (`data.frame`) variables specified `vars`. Records missing values independent variables excluded. conf_level (`proportion`) confidence level interval. cor_struct (`string`) specifying covariance structure, defaults `'unstructured'`. See details. weights_emmeans (`string`) argument [emmeans::emmeans()], `'counterfactual'` default. averages_emmeans (`list`) optional named list visit levels averaged reported along side single visits. ... additional arguments [mmrm::mmrm()], particular `reml` options listed [mmrm::mmrm_control()].","code":""},{"path":"na.html/reference/fit_mmrm_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"`MMRM` Analysis — fit_mmrm_j","text":"`tern_model` object list model results: - `fit`: `mmrm` object fitted data. Note via `mmrm::component(fit, 'optimizer')`       finally used optimization algorithm can obtained, can useful refitting model       later .   - `cov_estimate`: matrix covariance matrix estimate.   - `diagnostics`: list model diagnostic statistics (REML criterion, AIC, corrected AIC, BIC).   - `lsmeans`: list data frames `estimates` `contrasts`.        attributes `averages` `weights` save settings used        (`averages_emmeans` `weights_emmeans`).   - `vars`: variable list.   - `labels`: Corresponding list variable labels extracted `data`.   - `cor_struct`: input.   - `ref_level`: reference level arm variable, always first level.   - `treatment_levels`: treatment levels arm variable.   - `conf_level`: confidence level used construct `lsmeans` confidence intervals.   - `additional`: List additional inputs passed via `...`","code":""},{"path":"na.html/reference/fit_mmrm_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"`MMRM` Analysis — fit_mmrm_j","text":"Multiple different degree freedom adjustments available via `method` argument   [mmrm::mmrm()]. addition, covariance matrix adjustments available via `vcov`.   Please see [mmrm::mmrm_control()] details additional useful options. covariance structure (`cor_struct`), user can choose among following options. - `unstructured`: Unstructured covariance matrix. flexible choice default.        `T` visits, `T * (T+1) / 2` variance parameters used.   - `toeplitz`: Homogeneous Toeplitz covariance matrix, uses `T` variance parameters.   - `heterogeneous toeplitz`: Heterogeneous Toeplitz covariance matrix,        uses `2 * T - 1` variance parameters.   - `ante-dependence`: Homogeneous Ante-Dependence covariance matrix, uses `T` variance parameters.   - `heterogeneous ante-dependence`: Heterogeneous Ante-Dependence covariance matrix,        uses `2 * T - 1` variance parameters.   - `auto-regressive`: Homogeneous Auto-Regressive (order 1) covariance matrix,        uses 2 variance parameters.   - `heterogeneous auto-regressive`: Heterogeneous Auto-Regressive (order 1) covariance matrix,        uses `T + 1` variance parameters.   - `compound symmetry`: Homogeneous Compound Symmetry covariance matrix, uses 2        variance parameters.   - `heterogeneous compound symmetry`: Heterogeneous Compound Symmetry covariance matrix, uses        `T + 1` variance parameters.","code":""},{"path":"na.html/reference/fit_mmrm_j.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"`MMRM` Analysis — fit_mmrm_j","text":"function `_j` suffix distinguish [mmrm::fit_mmrm()].   copy `tern.mmrm` package later replaced [tern.mmrm::fit_mmrm()].   new features included function .","code":""},{"path":"na.html/reference/fit_mmrm_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"`MMRM` Analysis — fit_mmrm_j","text":"","code":"mmrm_results <- fit_mmrm_j(   vars = list(     response = 'FEV1',     covariates = c('RACE', 'SEX'),     id = 'USUBJID',     arm = 'ARMCD',     visit = 'AVISIT'   ),   data = mmrm::fev_data,   cor_struct = 'unstructured',   weights_emmeans = 'equal',   averages_emmeans = list(     'VIS1+2' = c('VIS1', 'VIS2')   ) )"},{"path":"na.html/reference/format_xx_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory for xx style formatting — format_xx_fct","title":"Function factory for xx style formatting — format_xx_fct","text":"function factory generate formatting functions value formatting support xx style format control rounding method","code":""},{"path":"na.html/reference/format_xx_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory for xx style formatting — format_xx_fct","text":"","code":"format_xx_fct(   roundmethod = c(\"sas\", \"iec\"),   na_str_dflt = \"NE\",   replace_na_dflt = TRUE )"},{"path":"na.html/reference/format_xx_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory for xx style formatting — format_xx_fct","text":"roundmethod (`string`) choice rounding methods. Options : * `sas`: underlying rounding method `tidytlg::roundSAS`,  roundSAS comes Stack Overflow post https://stackoverflow.com/questions/12688717/round---5 * `iec`: underlying rounding method `round` na_str_dflt Character represent NA value replace_na_dflt logical(1). `na_string` \"NA\" within formatters framework overridden `na_str_default`? Defaults `TRUE`, way different default na string behavior base `formatters` framework.","code":""},{"path":"na.html/reference/format_xx_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory for xx style formatting — format_xx_fct","text":"`format_xx_fct()` format function can used rtables formatting calls","code":""},{"path":[]},{"path":"na.html/reference/format_xx_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function factory for xx style formatting — format_xx_fct","text":"","code":"jjcsformat_xx_SAS <- format_xx_fct(roundmethod = \"sas\") jjcsformat_xx <- jjcsformat_xx_SAS rcell(c(1.453), jjcsformat_xx(\"xx.xx\")) #> rcell: 1.45  rcell(c(), jjcsformat_xx(\"xx.xx\")) #> rcell:   rcell(c(1.453, 2.45638), jjcsformat_xx(\"xx.xx (xx.xxx)\")) #> rcell: 1.45 (2.456)"},{"path":"na.html/reference/fraction_count_denom.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting fraction, count and denominator values — jjcsformat_fraction_count_denom","title":"Formatting fraction, count and denominator values — jjcsformat_fraction_count_denom","text":"Formatting fraction, count denominator values","code":""},{"path":"na.html/reference/fraction_count_denom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting fraction, count and denominator values — jjcsformat_fraction_count_denom","text":"","code":"jjcsformat_fraction_count_denom(x, d = 1, roundmethod = c(\"sas\", \"iec\"), ...)"},{"path":"na.html/reference/fraction_count_denom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting fraction, count and denominator values — jjcsformat_fraction_count_denom","text":"x `numeric` elements `num` `fraction` `num`, `denom` `fraction`. d numeric(1). Number digits round fraction (default=1) roundmethod (`string`) choice rounding methods. Options : * `sas`: underlying rounding method `tidytlg::roundSAS`,  roundSAS comes Stack Overflow post https://stackoverflow.com/questions/12688717/round---5 * `iec`: underlying rounding method `round` ... Additional arguments passed methods.","code":""},{"path":"na.html/reference/fraction_count_denom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting fraction, count and denominator values — jjcsformat_fraction_count_denom","text":"","code":"jjcsformat_fraction_count_denom(c(7, 10, 0.7)) #> [1] \"70.0% (7/10)\" jjcsformat_fraction_count_denom(c(70000, 70001, 70000 / 70001)) #> [1] \">99.9% (70000/70001)\" jjcsformat_fraction_count_denom(c(235, 235, 235 / 235)) #> [1] \"100.0% (235/235)\""},{"path":"na.html/reference/get_ctrl_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Control Subset — get_ctrl_subset","title":"Get Control Subset — get_ctrl_subset","text":"Retrieves subset DataFrame based treatment variable control group.","code":""},{"path":"na.html/reference/get_ctrl_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Control Subset — get_ctrl_subset","text":"","code":"get_ctrl_subset(df, trt_var, ctrl_grp)"},{"path":"na.html/reference/get_ctrl_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Control Subset — get_ctrl_subset","text":"df Data frame subset. trt_var Treatment variable name. ctrl_grp Control group value.","code":""},{"path":"na.html/reference/get_ctrl_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Control Subset — get_ctrl_subset","text":"Subset data frame.","code":""},{"path":"na.html/reference/get_mmrm_lsmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Least Square Means from `MMRM` — get_mmrm_lsmeans","title":"Extract Least Square Means from `MMRM` — get_mmrm_lsmeans","text":"Extracts least square means `MMRM` fit.","code":""},{"path":"na.html/reference/get_mmrm_lsmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Least Square Means from `MMRM` — get_mmrm_lsmeans","text":"","code":"get_mmrm_lsmeans(fit, vars, conf_level, weights, averages = list())"},{"path":"na.html/reference/get_mmrm_lsmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Least Square Means from `MMRM` — get_mmrm_lsmeans","text":"fit (`mmrm`) result [mmrm::mmrm()]. vars (named `list` `string` `character`) specifying variables `MMRM`.   following elements need included character vectors match corresponding columns   `data`: - `response`: response variable.   - `covariates`: additional covariate terms (might also include interactions).   - `id`: subject ID variable.   - `arm`: treatment group variable (factor).   - `visit`: visit variable (factor).   - `weights`: optional weights variable (`NULL` omitted weights used). Note main effects interaction `arm` `visit` default   included model. conf_level (`proportion`) confidence level interval. weights (`string`) type weights used least square means, see [emmeans::emmeans()] details. averages (`list`) named list visit levels averaged reported along side single visits.","code":""},{"path":"na.html/reference/get_mmrm_lsmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Least Square Means from `MMRM` — get_mmrm_lsmeans","text":"list data frames `estimates` `contrasts`.   attributes `averages` `weights` save settings used.","code":""},{"path":"na.html/reference/get_ref_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain Reference Information for a Global Reference Group — get_ref_info","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"helper function can used custom analysis functions, passing extra argument `ref_path` defines global reference group corresponding column split hierarchy levels.","code":""},{"path":"na.html/reference/get_ref_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"","code":"get_ref_info(ref_path, .spl_context, .var = NULL)"},{"path":"na.html/reference/get_ref_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"ref_path (`character`) reference group specification `rtables` `colpath`, see details. .spl_context see [rtables::spl_context]. .var variable analyzed, see [rtables::additional_fun_params].","code":""},{"path":"na.html/reference/get_ref_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"list `ref_group` `in_ref_col`, can used   `.ref_group` `.in_ref_col` directly passed analysis   function `rtables`, see [rtables::additional_fun_params].","code":""},{"path":"na.html/reference/get_ref_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"reference group specified `colpath` hierarchical fashion `ref_path`: first column split variable first element, level use second element. continues last column split variable last level use. Note depending `.var`, either `data.frame` (`.var` `NULL`) vector (otherwise) returned. allows usage analysis functions `df` `x` arguments, respectively.","code":""},{"path":"na.html/reference/get_ref_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain Reference Information for a Global Reference Group — get_ref_info","text":"","code":"dm <- DM dm$colspan_trt <- factor(   ifelse(dm$ARM == 'B: Placebo', ' ', 'Active Study Agent'),   levels = c('Active Study Agent', ' ') ) colspan_trt_map <- create_colspan_map(   dm,   non_active_grp = 'B: Placebo',   non_active_grp_span_lbl = ' ',   active_grp_span_lbl = 'Active Study Agent',   colspan_var = 'colspan_trt',   trt_var = 'ARM' )  # A standard analysis function which uses a reference group. standard_afun <- function(x, .ref_group, .in_ref_col) {   in_rows(     'Difference of Averages' = non_ref_rcell(       mean(x) - mean(.ref_group),       is_ref = .in_ref_col,       format = 'xx.xx'     )   ) }  # The custom analysis function which can work with a global reference group. result_afun <- function(x, ref_path, .spl_context, .var) {   ref <- get_ref_info(ref_path, .spl_context, .var)   standard_afun(x, .ref_group = ref$ref_group, .in_ref_col = ref$in_ref_col) }  # Define the global reference group colpath. ref_path <- c('colspan_trt', ' ', 'ARM', 'B: Placebo')  lyt <- basic_table() |>   split_cols_by(     'colspan_trt',     split_fun = trim_levels_to_map(map = colspan_trt_map)   ) |>   split_cols_by('ARM') |>   analyze(     'AGE',     # Here we pass the global reference group colpath.     extra_args = list(ref_path = ref_path),     afun = result_afun   )  build_table(lyt, dm) #>                              Active Study Agent                  #>                          A: Drug X   C: Combination   B: Placebo #> ———————————————————————————————————————————————————————————————— #> Difference of Averages     1.89           1.55"},{"path":"na.html/reference/get_titles_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Titles/Footers For Table From Sources — get_titles_from_file","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"Retrieves titles footnotes given table CSV/XLSX file data.frame.","code":""},{"path":"na.html/reference/get_titles_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"","code":"get_titles_from_file(   id,   file = .find_titles_file(input_path),   input_path = \".\",   title_df = .read_titles_file(file) )"},{"path":"na.html/reference/get_titles_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"id character. identifier table interest. file (`character(1)`) path CSV xlsx file containing title footer information one outputs. See Details. Ignored `title_df` specified. input_path (`character(1)`) path look titles.csv/titles.xlsx. Ignored `file` `title_df` specified. title_df (`data.frame`) data.frame containing titles footers one  outputs. See Details.","code":""},{"path":"na.html/reference/get_titles_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"List object containing: title, subtitles, main_footer, prov_footer           table interest.  Note: subtitles prov_footer           currently set NULL. Suitable use [`set_titles()`].","code":""},{"path":"na.html/reference/get_titles_from_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"Retrieves titles given output id (see ) outputs          list containing title footnote objects supported          rtables. titles.csv titles.xlsx (*`readxl`          installed*) files supported, titles.csv checked          first. Data expected `TABLE ID`, `IDENTIFIER`, `TEXT` columns,          `IDENTIFIER` value `TITLE` title `FOOT*`          footer materials `*` positive integer. `TEXT` contains          value title/footer applied.","code":""},{"path":[]},{"path":"na.html/reference/get_titles_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Titles/Footers For Table From Sources — get_titles_from_file","text":"","code":"# title_footer <- get_titles_from_file(tblid)"},{"path":"na.html/reference/get_visit_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","title":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","text":"Get Visit Levels Order Defined Numeric Version","code":""},{"path":"na.html/reference/get_visit_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","text":"","code":"get_visit_levels(visit_cat, visit_n)"},{"path":"na.html/reference/get_visit_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","text":"visit_cat (`character`) categorical version. visit_n (`numeric`) numeric version.","code":""},{"path":"na.html/reference/get_visit_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","text":"unique visit levels order defined numeric version.","code":""},{"path":"na.html/reference/get_visit_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Visit Levels in Order Defined by Numeric Version — get_visit_levels","text":"","code":"get_visit_levels(   visit_cat = c('Week 1', 'Week 11', 'Week 2'),   visit_n = c(1, 5, 2) ) #> [1] \"Week 1\"  \"Week 2\"  \"Week 11\""},{"path":"na.html/reference/h_a_freq_dataprep.html","id":null,"dir":"Reference","previous_headings":"","what":"A Frequency Data Preparation Function — h_a_freq_dataprep","title":"A Frequency Data Preparation Function — h_a_freq_dataprep","text":"Prepares frequency data analysis.","code":""},{"path":"na.html/reference/h_a_freq_dataprep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Frequency Data Preparation Function — h_a_freq_dataprep","text":"","code":"h_a_freq_dataprep(   df,   labelstr = NULL,   .var = NA,   val = NULL,   drop_levels = FALSE,   excl_levels = NULL,   new_levels = NULL,   new_levels_after = FALSE,   addstr2levs = NULL,   .df_row,   .spl_context,   .N_col,   id = \"USUBJID\",   denom = c(\"N_col\", \"n_df\", \"n_altdf\", \"N_colgroup\", \"n_rowdf\", \"n_parentdf\"),   variables,   label = NULL,   label_fstr = NULL,   label_map = NULL,   .alt_df_full = NULL,   denom_by = NULL,   .stats )"},{"path":"na.html/reference/h_a_freq_dataprep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Frequency Data Preparation Function — h_a_freq_dataprep","text":"df Data frame prepare. labelstr Label string. .var Variable name. val Values analysis. drop_levels Boolean, indicating levels dropped. excl_levels Levels exclude. new_levels New levels add. new_levels_after Boolean adding new levels existing ones. addstr2levs String add new levels. .df_row Current data frame row. .spl_context Current split context. .N_col Number columns. id Identifier variable. denom Denominator types. variables Variables include analysis. label Label string. label_fstr Formatted label string. label_map Mapping labels. .alt_df_full Alternative full data frame. denom_by Denominator grouping variable. .stats Statistics compute.","code":""},{"path":"na.html/reference/h_a_freq_dataprep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Frequency Data Preparation Function — h_a_freq_dataprep","text":"List containing prepared data frames values.","code":""},{"path":"na.html/reference/h_a_freq_prepinrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency Preparation in Rows — h_a_freq_prepinrows","title":"Frequency Preparation in Rows — h_a_freq_prepinrows","text":"Prepares frequency data rows based provided parameters.","code":""},{"path":"na.html/reference/h_a_freq_prepinrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency Preparation in Rows — h_a_freq_prepinrows","text":"","code":"h_a_freq_prepinrows(   x_stats,   .stats_adj,   .formats,   labelstr,   label_fstr,   label,   .indent_mods,   .labels_n,   na_str )"},{"path":"na.html/reference/h_a_freq_prepinrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency Preparation in Rows — h_a_freq_prepinrows","text":"x_stats Statistics data. .stats_adj Adjusted statistics. .formats Format settings. labelstr Label string. label_fstr Formatted label string. label Label string. .indent_mods Indentation settings. .labels_n Labels statistics. na_str String NA values.","code":""},{"path":"na.html/reference/h_a_freq_prepinrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency Preparation in Rows — h_a_freq_prepinrows","text":"List containing prepared statistics, formats, labels, indentation.","code":""},{"path":"na.html/reference/h_colexpr_substr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Substring from Column Expression — h_colexpr_substr","title":"Extract Substring from Column Expression — h_colexpr_substr","text":"Retrieves substring column expression related variable component.","code":""},{"path":"na.html/reference/h_colexpr_substr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Substring from Column Expression — h_colexpr_substr","text":"","code":"h_colexpr_substr(var, col_expr)"},{"path":"na.html/reference/h_colexpr_substr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Substring from Column Expression — h_colexpr_substr","text":"var Variable extract expression. col_expr Column expression string.","code":""},{"path":"na.html/reference/h_colexpr_substr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Substring from Column Expression — h_colexpr_substr","text":"Substring corresponding variable.","code":""},{"path":"na.html/reference/h_colexpr_substr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Substring from Column Expression — h_colexpr_substr","text":"get substring col_expr related var component intended usage strings coming .spl_context$cur_col_expr strings type '!(.na(var) & var","code":""},{"path":"na.html/reference/h_create_altdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Alternative Data Frame — h_create_altdf","title":"Create Alternative Data Frame — h_create_altdf","text":"Creates alternative data frame based current split context.","code":""},{"path":"na.html/reference/h_create_altdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Alternative Data Frame — h_create_altdf","text":"","code":"h_create_altdf(   .spl_context,   .df_row,   denomdf,   denom_by = NULL,   id,   variables,   denom )"},{"path":"na.html/reference/h_create_altdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Alternative Data Frame — h_create_altdf","text":".spl_context Current split context. .df_row Current data frame row. denomdf Denominator data frame. denom_by Denominator grouping variable. id Identifier variable. variables Variables include analysis. denom Denominator type.","code":""},{"path":"na.html/reference/h_create_altdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Alternative Data Frame — h_create_altdf","text":"Grand parent dataset.","code":""},{"path":"na.html/reference/h_denom_parentdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Denominator Parent Data Frame — h_denom_parentdf","title":"Get Denominator Parent Data Frame — h_denom_parentdf","text":"Retrieves parent data frame based denominator.","code":""},{"path":"na.html/reference/h_denom_parentdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Denominator Parent Data Frame — h_denom_parentdf","text":"","code":"h_denom_parentdf(.spl_context, denom, denom_by)"},{"path":"na.html/reference/h_denom_parentdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Denominator Parent Data Frame — h_denom_parentdf","text":".spl_context Current split context. denom Denominator type. denom_by Denominator grouping variable.","code":""},{"path":"na.html/reference/h_denom_parentdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Denominator Parent Data Frame — h_denom_parentdf","text":"Parent data frame.","code":""},{"path":"na.html/reference/h_df_add_newlevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add New Levels to Data Frame — h_df_add_newlevels","title":"Add New Levels to Data Frame — h_df_add_newlevels","text":"Adds new factor levels specified variable data frame.","code":""},{"path":"na.html/reference/h_df_add_newlevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add New Levels to Data Frame — h_df_add_newlevels","text":"","code":"h_df_add_newlevels(df, .var, new_levels, addstr2levs = NULL, new_levels_after)"},{"path":"na.html/reference/h_df_add_newlevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add New Levels to Data Frame — h_df_add_newlevels","text":"df Data frame update. .var Variable new levels added. new_levels List new levels add. addstr2levs String add new levels. new_levels_after Boolean, indicating new levels added existing levels.","code":""},{"path":"na.html/reference/h_df_add_newlevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add New Levels to Data Frame — h_df_add_newlevels","text":"Updated data frame.","code":""},{"path":"na.html/reference/h_extract_coxreg_multivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","title":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","text":"Extract Estimates Multivariate Cox Regression Model Fit Object","code":""},{"path":"na.html/reference/h_extract_coxreg_multivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","text":"","code":"h_extract_coxreg_multivar(x)"},{"path":"na.html/reference/h_extract_coxreg_multivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","text":"x (`coxreg.multivar`) [tern::fit_coxreg_multivar()].","code":""},{"path":"na.html/reference/h_extract_coxreg_multivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","text":"data frame containing Cox regression results columns term,   coef_se (coefficient standard error), p.value, hr (hazard ratio),   hr_ci (confidence interval hazard ratio), labels (formatted term labels).","code":""},{"path":"na.html/reference/h_extract_coxreg_multivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Estimates from Multivariate Cox Regression Model Fit Object — h_extract_coxreg_multivar","text":"","code":"anl <- tern::tern_ex_adtte |>   dplyr::mutate(EVENT = 1 - CNSR)  variables <- list(   time = 'AVAL',   event = 'EVENT',   arm = 'ARM',   covariates = c('SEX', 'AGE') )  control <- tern::control_coxreg(   conf_level = 0.9,   ties = 'efron' )  fit <- tern::fit_coxreg_multivar(   data = anl,   variables = variables,   control = control )  h_extract_coxreg_multivar(fit) #> # A tibble: 4 × 6 #>   term              coef_se    p.value    hr hr_ci     labels                    #>   <chr>             <list>       <dbl> <dbl> <list>    <chr>                     #> 1 ARMB: Placebo     <dbl [2]> 8.89e- 6 1.52  <dbl [2]> Treatment (B: Placebo vs… #> 2 ARMC: Combination <dbl [2]> 4.24e-11 1.92  <dbl [2]> Treatment (C: Combinatio… #> 3 SEXM              <dbl [2]> 9.80e- 2 0.881 <dbl [2]> Sex (M vs. F)             #> 4 AGE               <dbl [2]> 6.42e- 1 1.00  <dbl [2]> Age"},{"path":"na.html/reference/h_get_covariate_parts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction of Covariate Parts from Character Vector — h_get_covariate_parts","title":"Extraction of Covariate Parts from Character Vector — h_get_covariate_parts","text":"Extraction Covariate Parts Character Vector","code":""},{"path":"na.html/reference/h_get_covariate_parts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction of Covariate Parts from Character Vector — h_get_covariate_parts","text":"","code":"h_get_covariate_parts(covariates)"},{"path":"na.html/reference/h_get_covariate_parts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction of Covariate Parts from Character Vector — h_get_covariate_parts","text":"covariates (`character`) specification usual way, see examples.","code":""},{"path":"na.html/reference/h_get_covariate_parts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction of Covariate Parts from Character Vector — h_get_covariate_parts","text":"Character vector covariates involved `covariates` specification.","code":""},{"path":"na.html/reference/h_get_design_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","title":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","text":"Helper Function Create Logical Design Matrix Factor Variable","code":""},{"path":"na.html/reference/h_get_design_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","text":"","code":"h_get_design_mat(df, .var)"},{"path":"na.html/reference/h_get_design_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","text":"df (`data.frame`) including factor variable name `.var`. .var (`string`) name factor variable.","code":""},{"path":"na.html/reference/h_get_design_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","text":"logical matrix dummy encoding factor levels.","code":""},{"path":"na.html/reference/h_get_design_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function to Create Logical Design Matrix from Factor Variable — h_get_design_mat","text":"","code":"h_get_design_mat(df = data.frame(a = factor(c('a', 'b', 'a'))), .var = 'a') #>       a     b #> 1  TRUE FALSE #> 2 FALSE  TRUE #> 3  TRUE FALSE #> attr(,\"assign\") #> [1] 1 1 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$a #> [1] \"contr.treatment\" #>"},{"path":"na.html/reference/h_get_label_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Label Map — h_get_label_map","title":"Get Label Map — h_get_label_map","text":"Maps labels based provided label map split context.","code":""},{"path":"na.html/reference/h_get_label_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Label Map — h_get_label_map","text":"","code":"h_get_label_map(.labels, label_map, .var, split_info)"},{"path":"na.html/reference/h_get_label_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Label Map — h_get_label_map","text":".labels Current labels. label_map Mapping labels. .var Variable name. split_info Current split information.","code":""},{"path":"na.html/reference/h_get_label_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Label Map — h_get_label_map","text":"Mapped labels.","code":""},{"path":"na.html/reference/h_get_trtvar_refpath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Treatment Variable Reference Path — h_get_trtvar_refpath","title":"Get Treatment Variable Reference Path — h_get_trtvar_refpath","text":"Retrieves treatment variable reference path provided context.","code":""},{"path":"na.html/reference/h_get_trtvar_refpath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Treatment Variable Reference Path — h_get_trtvar_refpath","text":"","code":"h_get_trtvar_refpath(ref_path, .spl_context, df)"},{"path":"na.html/reference/h_get_trtvar_refpath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Treatment Variable Reference Path — h_get_trtvar_refpath","text":"ref_path Reference path treatment variable. .spl_context Current split context. df Data frame.","code":""},{"path":"na.html/reference/h_get_trtvar_refpath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Treatment Variable Reference Path — h_get_trtvar_refpath","text":"List containing treatment variable details.","code":""},{"path":"na.html/reference/h_odds_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions for odds ratio estimation — h_odds_ratio","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"`r lifecycle::badge('stable')` Functions calculate odds ratios [s_odds_ratio_j()].","code":""},{"path":"na.html/reference/h_odds_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"","code":"or_glm(data, conf_level)  or_clogit(data, conf_level, method = \"exact\")  or_cmh(data, conf_level)"},{"path":"na.html/reference/h_odds_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"data (`data.frame`) data frame containing least variables `rsp` `grp`, optionally   `strata` [or_clogit()]. # New: pval conf_level (`numeric`) confidence level confidence interval. method (`string`) whether use correct (`'exact'`) calculation conditional likelihood one approximations, CMH method. See [survival::clogit()] details.","code":""},{"path":"na.html/reference/h_odds_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"named `list` elements `or_ci`, `n_tot` `pval`.","code":""},{"path":"na.html/reference/h_odds_ratio.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"or_glm(): Estimates odds ratio based [stats::glm()]. Note must exactly 2 groups `data` specified `grp` variable. or_clogit(): Estimates odds ratio based [survival::clogit()]. done whole data set including groups, since results pairwise comparisons groups. or_cmh(): Estimates odds ratio based CMH. Note must exactly 2 groups `data` specified `grp` variable.","code":""},{"path":[]},{"path":"na.html/reference/h_odds_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions for odds ratio estimation — h_odds_ratio","text":"","code":"# Data with 2 groups. data <- data.frame(   rsp = as.logical(c(1, 1, 0, 1, 0, 0, 1, 1)),   grp = letters[c(1, 1, 1, 2, 2, 2, 1, 2)],   strata = letters[c(1, 2, 1, 2, 2, 2, 1, 2)],   stringsAsFactors = TRUE )  # Odds ratio based on glm. or_glm(data, conf_level = 0.95) #> $or_ci #>        est        lcl        ucl  #> 0.33333333 0.01669735 6.65441589  #>  #> $n_tot #> n_tot  #>     8  #>  #> $pval #> [1] 0.472011 #>   # Data with 3 groups. data <- data.frame(   rsp = as.logical(c(1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0)),   grp = letters[c(1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3)],   strata = LETTERS[c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)],   stringsAsFactors = TRUE )   # Odds ratio based on stratified estimation by conditional logistic regression. or_clogit(data, conf_level = 0.95) #> $or_ci_pvals #> $or_ci_pvals$b #>        est        lcl        ucl       pval  #> 0.28814553 0.02981009 2.78522598 0.28237516  #>  #> $or_ci_pvals$c #>       est       lcl       ucl      pval  #> 0.5367919 0.0673365 4.2791881 0.5569374  #>  #>  #> $n_tot #> n_tot  #>    20  #>   # Data with 2 groups. set.seed(123) data <- data.frame(   rsp = as.logical(rbinom(n = 40, size = 1, prob = 0.5)),   grp = letters[sample(1:2, size = 40, replace = TRUE)],   strata = LETTERS[sample(1:2, size = 40, replace = TRUE)],   stringsAsFactors = TRUE )  # Odds ratio based on CMH. or_cmh(data, conf_level = 0.95) #> $or_ci #>       est       lcl       ucl  #> 0.9969199 0.2877116 3.4543244  #>  #> $n_tot #> n_tot  #>    40  #>  #> $pval #> [1] 0.9960178 #>"},{"path":"na.html/reference/h_prop_diff_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions to test proportion differences — h_prop_diff_test","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"Helper functions implement various tests difference two proportions.","code":""},{"path":"na.html/reference/h_prop_diff_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"","code":"prop_chisq(tbl, alternative)  prop_cmh(ary, alternative)  prop_fisher(tbl, alternative)"},{"path":"na.html/reference/h_prop_diff_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"tbl (`matrix`) matrix two groups rows binary response (`TRUE`/`FALSE`) columns. ary (`array`, 3 dimensions) array two groups rows, binary response (`TRUE`/`FALSE`) columns, strata third dimension.","code":""},{"path":"na.html/reference/h_prop_diff_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"p-value.","code":""},{"path":"na.html/reference/h_prop_diff_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"prop_chisq(): Performs Chi-Squared test. Internally calls [stats::prop.test()]. prop_cmh(): Performs stratified Cochran-Mantel-Haenszel test. Internally calls [stats::mantelhaen.test()]. prop_fisher(): Performs Fisher's exact test. Internally calls [stats::fisher.test()].","code":""},{"path":"na.html/reference/h_prop_diff_test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Helper functions to test proportion differences — h_prop_diff_test","text":"strata less five observations result warning  possibly incorrect results; strata less two observations  automatically discarded.","code":""},{"path":[]},{"path":"na.html/reference/h_subset_combo.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Combination — h_subset_combo","title":"Subset Combination — h_subset_combo","text":"Subsets data frame based specified combination criteria.","code":""},{"path":"na.html/reference/h_subset_combo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Combination — h_subset_combo","text":"","code":"h_subset_combo(df, combosdf, do_not_filter, filter_var, flag_var, colid)"},{"path":"na.html/reference/h_subset_combo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Combination — h_subset_combo","text":"df Data frame subset. combosdf Data frame containing combinations. do_not_filter Variables filter. filter_var Variable used filtering. flag_var Flag variable filtering. colid Column ID identification.","code":""},{"path":"na.html/reference/h_subset_combo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Combination — h_subset_combo","text":"Subsetted data frame.","code":""},{"path":"na.html/reference/h_summarize_mmrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function to Fit the MMRM and Return LS Mean Estimates and Contrasts — h_summarize_mmrm","title":"Helper Function to Fit the MMRM and Return LS Mean Estimates and Contrasts — h_summarize_mmrm","text":"Helper Function Fit MMRM Return LS Mean Estimates Contrasts","code":""},{"path":"na.html/reference/h_summarize_mmrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function to Fit the MMRM and Return LS Mean Estimates and Contrasts — h_summarize_mmrm","text":"","code":"h_summarize_mmrm(   .var,   df_parent,   variables,   ref_arm_level,   ref_visit_levels,   ... )"},{"path":"na.html/reference/h_summarize_mmrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function to Fit the MMRM and Return LS Mean Estimates and Contrasts — h_summarize_mmrm","text":".var (`string`) single variable name passed `rtables` requested statistics function. df_parent (`data.frame`) data set containing analysis variables visits arms. variables (named `list` `string`) list additional analysis variables. ref_arm_level (`string`) reference arm compared . ref_visit_levels (`character`) reference visits included model fit. ... additional options passed [fit_mmrm_j()].","code":""},{"path":"na.html/reference/h_summarize_mmrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function to Fit the MMRM and Return LS Mean Estimates and Contrasts — h_summarize_mmrm","text":"resulting estimates contrasts LS means returned   [tidy.tern_model()].","code":""},{"path":"na.html/reference/h_upd_dfrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Data Frame Row — h_upd_dfrow","title":"Update Data Frame Row — h_upd_dfrow","text":"Updates row data frame based various parameters.","code":""},{"path":"na.html/reference/h_upd_dfrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Data Frame Row — h_upd_dfrow","text":"","code":"h_upd_dfrow(   df_row,   .var,   val,   excl_levels,   drop_levels,   new_levels,   new_levels_after,   addstr2levs,   label,   label_map,   labelstr,   label_fstr,   .spl_context )"},{"path":"na.html/reference/h_upd_dfrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Data Frame Row — h_upd_dfrow","text":"df_row Data frame row update. .var Variable name update. val Values keep. excl_levels Levels exclude factor. drop_levels Boolean, indicating levels dropped. new_levels New levels add. new_levels_after Boolean, indicating new levels added existing levels. addstr2levs String add new levels. label Label string. label_map Mapping labels. labelstr Label string replace. label_fstr Format string labels. .spl_context Current split context.","code":""},{"path":"na.html/reference/h_upd_dfrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Data Frame Row — h_upd_dfrow","text":"List containing updated data frames values.","code":""},{"path":"na.html/reference/h_update_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Factor — h_update_factor","title":"Update Factor — h_update_factor","text":"Updates factor variable data frame based specified values.","code":""},{"path":"na.html/reference/h_update_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Factor — h_update_factor","text":"","code":"h_update_factor(df, .var, val = NULL, excl_levels = NULL)"},{"path":"na.html/reference/h_update_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Factor — h_update_factor","text":"df Data frame containing variable update. .var Variable name update. val Values keep. excl_levels Levels exclude factor.","code":""},{"path":"na.html/reference/h_update_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Factor — h_update_factor","text":"Updated data frame.","code":""},{"path":"na.html/reference/inches_to_spaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of inches to spaces — inches_to_spaces","title":"Conversion of inches to spaces — inches_to_spaces","text":"Conversion inches spaces","code":""},{"path":"na.html/reference/inches_to_spaces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of inches to spaces — inches_to_spaces","text":"","code":"inches_to_spaces(ins, fontspec, raw = FALSE, tol = sqrt(.Machine$double.eps))"},{"path":"na.html/reference/inches_to_spaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of inches to spaces — inches_to_spaces","text":"ins numeric. Vector widths inches fontspec font_spec. font specification use raw logical(1). answer returned unrounded (`TRUE`), rounded nearest reasonable value (`FALSE`, default) tol numeric(1). numeric tolerance,  values integer `n`, `n+tol` returned `n`, rather `n+1`, `raw == FALSE`. Ignored `raw` `TRUE`.","code":""},{"path":"na.html/reference/insert_blank_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Insertion of Blank Lines in a Layout — insert_blank_line","title":"Insertion of Blank Lines in a Layout — insert_blank_line","text":"hack `rtables` order able add row gaps, .e. blank lines. particular, default function needs maintain global state avoiding duplicate table names. global state variable hidden using dot front name. However, likely work parallelisation across multiple threads also causes non-reproducibility resulting `rtables` object. Therefore also custom table name can used.","code":""},{"path":"na.html/reference/insert_blank_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insertion of Blank Lines in a Layout — insert_blank_line","text":"","code":"insert_blank_line(lyt, table_names = NULL)"},{"path":"na.html/reference/insert_blank_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insertion of Blank Lines in a Layout — insert_blank_line","text":"lyt (`layout`) input layout analyses added . table_names (`character`) can customized case `vars` analyzed multiple times, avoid warnings `rtables`.","code":""},{"path":"na.html/reference/insert_blank_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insertion of Blank Lines in a Layout — insert_blank_line","text":"modified layout now including blank line current   row content.","code":""},{"path":"na.html/reference/insert_blank_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insertion of Blank Lines in a Layout — insert_blank_line","text":"","code":"ADSL <- ex_adsl  lyt <- basic_table() |>   split_cols_by('ARM') |>   split_rows_by('STRATA1') |>   analyze(vars = 'AGE', afun = function(x) {     in_rows(       'Mean (sd)' = rcell(c(mean(x), sd(x)), format = 'xx.xx (xx.xx)')     )   }) |>   insert_blank_line() |>   analyze(vars = 'AGE', table_names = 'AGE_Range', afun = function(x) {     in_rows(       'Range' = rcell(range(x), format = 'xx.xx - xx.xx')     )   }) build_table(lyt, ADSL) #>                   A: Drug X      B: Placebo     C: Combination #> —————————————————————————————————————————————————————————————— #> A                                                              #>   AGE                                                          #>     Mean (sd)   33.08 (5.70)    35.11 (7.92)     34.23 (6.18)  #>                                                                #>   AGE                                                          #>     Range       24.00 - 46.00   23.00 - 62.00   20.00 - 47.00  #> B                                                              #>   AGE                                                          #>     Mean (sd)   33.85 (7.24)    36.00 (9.08)     36.33 (8.40)  #>                                                                #>   AGE                                                          #>     Range       23.00 - 48.00   21.00 - 58.00   21.00 - 64.00  #> C                                                              #>   AGE                                                          #>     Mean (sd)   34.22 (6.57)    35.18 (6.65)     35.63 (8.25)  #>                                                                #>   AGE                                                          #>     Range       21.00 - 50.00   23.00 - 51.00   24.00 - 69.00"},{"path":"na.html/reference/jj_uc_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Unicode Mapping Table — jj_uc_map","title":"Unicode Mapping Table — jj_uc_map","text":"tibble maps special characters Unicode equivalents.","code":""},{"path":"na.html/reference/jj_uc_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unicode Mapping Table — jj_uc_map","text":"","code":"jj_uc_map"},{"path":"na.html/reference/jj_uc_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Unicode Mapping Table — jj_uc_map","text":"tibble columns 'pattern' 'unicode', 'pattern' contains string replaced 'unicode' contains Unicode code point hexadecimal.","code":""},{"path":"na.html/reference/jjcs_num_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric Formatting Function — jjcs_num_formats","title":"Numeric Formatting Function — jjcs_num_formats","text":"Formatting setter selected numerical statistics","code":""},{"path":"na.html/reference/jjcs_num_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric Formatting Function — jjcs_num_formats","text":"","code":"jjcs_num_formats(d, cap = 4)"},{"path":"na.html/reference/jjcs_num_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric Formatting Function — jjcs_num_formats","text":"d precision individual values cap cap numerical precision (d > cap – use precision cap specified precision)","code":""},{"path":"na.html/reference/jjcs_num_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric Formatting Function — jjcs_num_formats","text":"list:  - fmt : named vector formatting function (jjcsformat_xx) numerical stats: range, median, mean_sd, sd  - spec : named vector formatting specifications numerical stats: range, median, mean_sd, sd","code":""},{"path":"na.html/reference/jjcs_num_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric Formatting Function — jjcs_num_formats","text":"","code":"# P1_precision <- jjcs_num_formats(d=0)$fmt"},{"path":"na.html/reference/jjcsformat_pval_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory for p-value formatting — jjcsformat_pval_fct","title":"Function factory for p-value formatting — jjcsformat_pval_fct","text":"function factory generate formatting functions p-value formatting support rounding close significance level specified","code":""},{"path":"na.html/reference/jjcsformat_pval_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory for p-value formatting — jjcsformat_pval_fct","text":"","code":"jjcsformat_pval_fct(alpha = 0.05)"},{"path":"na.html/reference/jjcsformat_pval_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory for p-value formatting — jjcsformat_pval_fct","text":"alpha `number` significance level account rounding.","code":""},{"path":"na.html/reference/jjcsformat_pval_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory for p-value formatting — jjcsformat_pval_fct","text":"p-value standard format. `count` 0, format `0`.   smaller 0.001, `<0.001`, larger 0.999,   `>0.999` returned. Otherwise, 3 digits used. special case   rounding make string equal specified `alpha`,   higher number digits used able still see difference.   example, 0.0048 rounded 0.005 stays 0.0048 `alpha = 0.005`   set.","code":""},{"path":[]},{"path":"na.html/reference/jjcsformat_pval_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function factory for p-value formatting — jjcsformat_pval_fct","text":"","code":"my_pval_format <- jjcsformat_pval_fct(0.005) my_pval_format(0.2802359) #> [1] \"0.280\" my_pval_format(0.0048) #> [1] \"0.0048\" my_pval_format(0.00499) #> [1] \"0.00499\" my_pval_format(0.004999999) #> [1] \"0.004999999\" my_pval_format(0.0051) #> [1] \"0.005\" my_pval_format(0.0009) #> [1] \"<0.001\" my_pval_format(0.9991) #> [1] \">0.999\""},{"path":"na.html/reference/jjcsformat_range_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Function factory for range with censoring information formatting — jjcsformat_range_fct","title":"Function factory for range with censoring information formatting — jjcsformat_range_fct","text":"function factory generate formatting functions range formatting   includes information censoring survival times.","code":""},{"path":"na.html/reference/jjcsformat_range_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function factory for range with censoring information formatting — jjcsformat_range_fct","text":"","code":"jjcsformat_range_fct(str)"},{"path":"na.html/reference/jjcsformat_range_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function factory for range with censoring information formatting — jjcsformat_range_fct","text":"str `string` format specifying number digits used, range values, e.g. `\"xx.xx\"`.","code":""},{"path":"na.html/reference/jjcsformat_range_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function factory for range with censoring information formatting — jjcsformat_range_fct","text":"function formats numeric vector 4 elements:   - minimum   - maximum   - censored minimum? (1 censored, 0 event)   - censored maximum? (1 censored, 0 event)   range along censoring information returned string   specified numeric format `(min, max)`, `+` appended   `min` `max` censored.","code":""},{"path":[]},{"path":"na.html/reference/jjcsformat_range_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function factory for range with censoring information formatting — jjcsformat_range_fct","text":"","code":"my_range_format <- jjcsformat_range_fct(\"xx.xx\") my_range_format(c(0.35235, 99.2342, 1, 0)) #> [1] \"(0.35+, 99.23)\" my_range_format(c(0.35235, 99.2342, 0, 1)) #> [1] \"(0.35, 99.23+)\" my_range_format(c(0.35235, 99.2342, 0, 0)) #> [1] \"(0.35, 99.23)\" my_range_format(c(0.35235, 99.2342, 1, 1)) #> [1] \"(0.35+, 99.23+)\""},{"path":"na.html/reference/jjcsformat_xx.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting of values — jjcsformat_xx","title":"Formatting of values — jjcsformat_xx","text":"jjcs formatting function","code":""},{"path":"na.html/reference/jjcsformat_xx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting of values — jjcsformat_xx","text":"","code":"jjcsformat_xx(str, na_str = na_str_dflt)"},{"path":"na.html/reference/jjcsformat_xx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting of values — jjcsformat_xx","text":"str formatting required specified text string, eg \"xx.xx\" na_str character. Na string passed `formatters` formatting functions.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival time analysis — kaplan_meier","title":"Survival time analysis — kaplan_meier","text":"`r lifecycle::badge('stable')` analyze function [kaplan_meier()] creates layout element analyze survival time calculating survival time median, 2 quantiles, confidence intervals, range (, censored, event patients). primary analysis variable `vars` time variable secondary analysis variable `is_event` indicates whether event occurred.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival time analysis — kaplan_meier","text":"","code":"a_kaplan_meier(   df,   .var,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_kaplan_meier(df, .var, is_event, control = control_surv_time())"},{"path":"na.html/reference/kaplan_meier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival time analysis — kaplan_meier","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. ... additional arguments lower level functions. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. is_event (`character`) variable name storing Logical values: `TRUE` event, `FALSE` time event censored. control (`list`) parameters comparison details, specified using helper function [tern::control_surv_time()]. possible parameter options : * `conf_level` (`proportion`) confidence level interval survival time. * `conf_type` (`string`) confidence interval type. Options 'plain' (default), 'log', 'log-log',   see [survival::survfit()]. Note option 'none' supported. * `quantiles` (`numeric`) vector length two specify quantiles survival time.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival time analysis — kaplan_meier","text":"* `a_kaplan_meier()` returns corresponding list formatted [rtables::CellValue()]. * `s_kaplan_meier()` returns following statistics:   * `quantiles_lower`: Lower quantile estimate confidence interval .   * `median_ci_3d`: Median survival time confidence interval .   * `quantiles_upper`: Upper quantile estimate confidence interval .   * `range_with_cens_info`: Survival time range censoring information.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Survival time analysis — kaplan_meier","text":"a_kaplan_meier(): Formatted analysis function used `afun` s_kaplan_meier(): Statistics function analyzes survival times using Kaplan-Meier.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Survival time analysis — kaplan_meier","text":"functions forked `tern` package file `survival_time.R`.   additional features: * Additional statistics `quantiles_lower`, `quantiles_upper`, `range_with_cens_info` returned.","code":""},{"path":"na.html/reference/kaplan_meier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival time analysis — kaplan_meier","text":"","code":"library(dplyr) library(tern) #>  #> Attaching package: ‘tern’ #> The following objects are masked from ‘package:junco’: #>  #>     d_test_proportion_diff, or_clogit, or_glm adtte_f <- tern::tern_ex_adtte |>   filter(PARAMCD == \"OS\") |>   mutate(     AVAL = tern::day2month(AVAL),     is_event = CNSR == 0   ) df <- adtte_f |> filter(ARMCD == 'ARM A') a_kaplan_meier(   df,   .var = 'AVAL',   is_event = 'is_event' ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>               row_name        formatted_cell indent_mod #> 1      quantiles_lower 17.37 (10.13 - 22.51)          0 #> 2         median_ci_3d  32.02 (22.51, 49.31)          0 #> 3      quantiles_upper  65.28 (49.31, 87.21)          0 #> 4 range_with_cens_info        (0.34, 155.50)          0 #>                  row_label #> 1 25th percentile (95% CI) #> 2          Median (95% CI) #> 3 75th percentile (95% CI) #> 4                 Min, max  basic_table() |>   split_cols_by(var = 'ARMCD') |>   add_colcounts() |>   analyze(     vars = 'AVAL',     afun = a_kaplan_meier,     var_labels = 'Kaplan-Meier estimate of time to event (months)',     show_labels = 'visible',     extra_args = list(       is_event = 'is_event',       control = control_surv_time(conf_level = 0.9, conf_type = 'log-log')     )   ) |>   build_table(df = adtte_f) #>                                                           ARM A                  ARM B                  ARM C         #>                                                          (N=69)                  (N=73)                 (N=58)        #> ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Kaplan-Meier estimate of time to event (months)                                                                       #>   25th percentile (90% CI)                        17.37 (10.13 - 21.48)   9.82 (4.81 - 13.59)    7.31 (3.53 - 11.84)  #>   Median (90% CI)                                 32.02 (22.57, 46.51)    23.91 (18.26, 29.19)   20.77 (12.91, 25.86) #>   75th percentile (90% CI)                        65.28 (49.31, 87.21)    41.98 (37.97, 53.41)   37.10 (25.86, 47.60) #>   Min, max                                           (0.34, 155.50)          (0.07, 154.09)         (0.63, 80.69)"},{"path":"na.html/reference/keep_non_null_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","title":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","text":"Condition function individual analysis rows. Flag FALSE columns NULL, row kept. utilized row_condition function tern::keep_rows","code":""},{"path":"na.html/reference/keep_non_null_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","text":"","code":"keep_non_null_rows(tr)"},{"path":"na.html/reference/keep_non_null_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","text":"tr table tree object","code":""},{"path":"na.html/reference/keep_non_null_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","text":"function can utilized row_condition tern::keep_rows function","code":""},{"path":"na.html/reference/keep_non_null_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pruning Function to accommodate removal of completely NULL rows within a table — keep_non_null_rows","text":"","code":"library(dplyr)  ADSL <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01P = c(     'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB', 'Placebo',     'Placebo', 'Placebo', 'ARMA', 'ARMB'   ),   AGE = c(34, 56, 75, 81, 45, 75, 48, 19, 32, 31),   SAFFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'),   PKFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N') )  ADSL <- ADSL |>   mutate(TRT01P = as.factor(TRT01P))  create_blank_line <- function(x) {   list(     'Mean' = rcell(mean(x), format = 'xx.x'),     ' ' = rcell(NULL),     'Max' = rcell(max(x))   ) }  lyt <- basic_table() |>   split_cols_by('TRT01P') |>   analyze('AGE', afun = create_blank_line)  result <- build_table(lyt, ADSL)  result #>        ARMA   ARMB   Placebo #> ———————————————————————————— #> Mean   47.0   53.2    47.3   #>                              #> Max     75     81      75    # use pruning function to prune rows where category is Unknown result <- prune_table(result, prune_func = tern::keep_rows(keep_non_null_rows))  result #>        ARMA   ARMB   Placebo #> ———————————————————————————— #> Mean   47.0   53.2    47.3   #> Max     75     81      75"},{"path":"na.html/reference/labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding Labels To Variables For Model — labels","title":"Adding Labels To Variables For Model — labels","text":"Adding Labels Variables Model","code":""},{"path":"na.html/reference/labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding Labels To Variables For Model — labels","text":"","code":"h_is_specified(x, vars)  h_is_specified_and_in_data(x, vars, data)  h_check_and_get_label(x, vars, data)  h_labels(vars, data)"},{"path":"na.html/reference/labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding Labels To Variables For Model — labels","text":"x (`character`) element vars. vars (`list`) variables use. data (`data.frame`) data use.","code":""},{"path":"na.html/reference/labels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Adding Labels To Variables For Model — labels","text":"h_is_specified(): checks element `vars` `NULL` empty. h_is_specified_and_in_data(): checks element vars NULL exists dataset. h_check_and_get_label(): gets label element vars. h_labels(): returns list variables labels.","code":""},{"path":"na.html/reference/leftside.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the left-hand side of a formula — leftside","title":"Extract the left-hand side of a formula — leftside","text":"Extract left-hand side formula","code":""},{"path":"na.html/reference/leftside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the left-hand side of a formula — leftside","text":"","code":"leftside(x)"},{"path":"na.html/reference/lsmeans_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for Processing Least Square Means — lsmeans_helpers","title":"Helpers for Processing Least Square Means — lsmeans_helpers","text":"Helpers Processing Least Square Means","code":""},{"path":"na.html/reference/lsmeans_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for Processing Least Square Means — lsmeans_helpers","text":"","code":"h_get_emmeans_res(fit, vars, weights)  h_get_average_visit_specs(emmeans_res, vars, averages, fit)  h_get_spec_visit_estimates(emmeans_res, specs, conf_level, tests = FALSE, ...)  h_get_single_visit_estimates(emmeans_res, conf_level)  h_get_relative_reduc_df(estimates, vars)  h_single_visit_contrast_specs(emmeans_res, vars)  h_average_visit_contrast_specs(specs, averages)"},{"path":"na.html/reference/lsmeans_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for Processing Least Square Means — lsmeans_helpers","text":"fit result model fitting function, e.g. [mmrm::mmrm()] [stats::lm()]. vars (named `list` `string` `character`) specifying variables `MMRM`.   following elements need included character vectors match corresponding columns   `data`: - `response`: response variable.   - `covariates`: additional covariate terms (might also include interactions).   - `id`: subject ID variable.   - `arm`: treatment group variable (factor).   - `visit`: visit variable (factor).   - `weights`: optional weights variable (`NULL` omitted weights used). Note main effects interaction `arm` `visit` default   included model. weights (`string`) argument [emmeans::emmeans()], 'counterfactual' default. emmeans_res (`list`) initial `emmeans` result [h_get_emmeans_res()]. averages (`list`) optional named list visit levels averaged reported along side single visits. specs (`list`) list least square means specifications, elements `coefs` (coefficient list) `grid` (corresponding `data.frame`). conf_level (`proportion`) confidence level interval. tests (`flag`) whether add test results estimates. ... additional arguments [emmeans::contrast()]. estimates (`data.frame`) single visit least square mean estimates.","code":""},{"path":"na.html/reference/lsmeans_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helpers for Processing Least Square Means — lsmeans_helpers","text":"h_get_emmeans_res(): returns list `object` (`emmGrid` object containing `emmeans` results) `grid` (`data.frame` containing potential arm visit variables together sample size `n` combination). h_get_average_visit_specs(): constructs average visits specifications. h_get_spec_visit_estimates(): estimates least square means `data.frame` given specifications. h_get_single_visit_estimates(): estimates least square means single visits. h_get_relative_reduc_df(): constructs `data.frame` relative reduction vs. reference arm based single visit estimates. h_single_visit_contrast_specs(): constructs single visit contrast specifications. h_average_visit_contrast_specs(): constructs average visits contrast specifications, given `specs` single visit contrasts averages required.","code":""},{"path":"na.html/reference/lsmeans_helpers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Helpers for Processing Least Square Means — lsmeans_helpers","text":"difference compared original [tern.mmrm::h_get_spec_visit_estimates()]   function additional arguments [emmeans::contrast()] can passed via   added `tern.mmrm` package functions can used instead.","code":""},{"path":"na.html/reference/lsmeans_wide_cfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Content Row Analysis Function for LS Means Wide Table Layouts — lsmeans_wide_cfun","title":"Content Row Analysis Function for LS Means Wide Table Layouts — lsmeans_wide_cfun","text":"Content Row Analysis Function LS Means Wide Table Layouts","code":""},{"path":"na.html/reference/lsmeans_wide_cfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Content Row Analysis Function for LS Means Wide Table Layouts — lsmeans_wide_cfun","text":"","code":"lsmeans_wide_cfun(   df,   labelstr,   .spl_context,   variables,   ref_level,   treatment_levels,   pval_sided = c(\"2\", \"1\", \"-1\"),   conf_level,   formats )"},{"path":"na.html/reference/lsmeans_wide_cfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Content Row Analysis Function for LS Means Wide Table Layouts — lsmeans_wide_cfun","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. variables (`list`) see [fit_ancova()] required variable specifications. ref_level (`string`) reference level treatment arm variable. treatment_levels (`character`) non-reference levels treatment arm variable. pval_sided (`string`) either '2' two-sided '1' 1-sided greater control '-1' 1-sided smaller control alternative hypothesis. conf_level (`proportion`) confidence level interval. formats (`list`) including `lsmean`, `mse`, `df`, `lsmean_diff`, `se`, `ci`, `pval` formats.","code":""},{"path":"na.html/reference/lsmeans_wide_cfun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Content Row Analysis Function for LS Means Wide Table Layouts — lsmeans_wide_cfun","text":"assumes lot structure layout, intended used inside   [summarize_lsmeans_wide()], please see layout structure needed.","code":""},{"path":"na.html/reference/lsmeans_wide_first_split_fun_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"First Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_first_split_fun_fct","title":"First Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_first_split_fun_fct","text":"First Level Column Split LS Means Wide Table Layouts","code":""},{"path":"na.html/reference/lsmeans_wide_first_split_fun_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_first_split_fun_fct","text":"","code":"lsmeans_wide_first_split_fun_fct(include_variance)"},{"path":"na.html/reference/lsmeans_wide_second_split_fun_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Second Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_second_split_fun_fct","title":"Second Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_second_split_fun_fct","text":"Second Level Column Split LS Means Wide Table Layouts","code":""},{"path":"na.html/reference/lsmeans_wide_second_split_fun_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_second_split_fun_fct","text":"","code":"lsmeans_wide_second_split_fun_fct(pval_sided, conf_level, include_pval)"},{"path":"na.html/reference/lsmeans_wide_second_split_fun_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Second Level Column Split for LS Means Wide Table Layouts — lsmeans_wide_second_split_fun_fct","text":"conf_level (`proportion`) confidence level interval. include_pval (`flag`) whether include p-value column.","code":""},{"path":"na.html/reference/make_combo_splitfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function Helper — make_combo_splitfun","title":"Split Function Helper — make_combo_splitfun","text":"function aids construction users create split function combined columns","code":""},{"path":"na.html/reference/make_combo_splitfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function Helper — make_combo_splitfun","text":"","code":"make_combo_splitfun(nm, label = nm, levels = NULL, rm_other_facets = TRUE)"},{"path":"na.html/reference/make_combo_splitfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function Helper — make_combo_splitfun","text":"nm character(1). Name/virtual 'value' new facet label character(1). label new facet levels character NULL. levels combine new facet, NULL, indicating facet include incoming data. rm_other_facets logical(1). facets newly created one removed. Defaults `TRUE`","code":""},{"path":"na.html/reference/make_combo_splitfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Function Helper — make_combo_splitfun","text":"function usable directly split function.","code":""},{"path":"na.html/reference/make_combo_splitfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Function Helper — make_combo_splitfun","text":"","code":"# aesevall_spf <- make_combo_splitfun(nm = 'AESEV_ALL', label  = 'Any AE', levels = NULL)"},{"path":"na.html/reference/make_rbmi_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a `rbmi` ready cluster — make_rbmi_cluster","title":"Create a `rbmi` ready cluster — make_rbmi_cluster","text":"Create `rbmi` ready cluster","code":""},{"path":"na.html/reference/make_rbmi_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a `rbmi` ready cluster — make_rbmi_cluster","text":"","code":"make_rbmi_cluster(cluster_or_cores = 1, objects = NULL, packages = NULL)"},{"path":"na.html/reference/make_rbmi_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a `rbmi` ready cluster — make_rbmi_cluster","text":"cluster_or_cores Number parallel processes use existing cluster make use objects named list objects export sub-processes packages character vector libraries load sub-processes function wrapper around `parallel::makePSOCKcluster()` takes care configuring `rbmi` used sub-processes well loading user defined objects libraries setting seed reproducibility. `cluster_or_cores` `1` function return `NULL`. `cluster_or_cores` cluster created via `parallel::makeCluster()` function just takes care inserting relevant `rbmi` objects existing cluster.","code":""},{"path":"na.html/reference/make_rbmi_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a `rbmi` ready cluster — make_rbmi_cluster","text":"","code":"# Basic usage # dontrun because .check_ncores if (FALSE) { # \\dontrun{ make_rbmi_cluster(5) closeAllConnections()  # User objects + libraries VALUE <- 5 myfun <- function(x) {   x + day(VALUE) # From lubridate::day() } make_rbmi_cluster(5, list(VALUE = VALUE, myfun = myfun), c('lubridate')) closeAllConnections()  # Using a already created cluster cl <- parallel::makeCluster(5) make_rbmi_cluster(cl) closeAllConnections() } # }"},{"path":"na.html/reference/no_data_to_report_str.html","id":null,"dir":"Reference","previous_headings":"","what":"No Data to Report String — no_data_to_report_str","title":"No Data to Report String — no_data_to_report_str","text":"constant string used data display table. used placeholder tables data available particular category.","code":""},{"path":"na.html/reference/no_data_to_report_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"No Data to Report String — no_data_to_report_str","text":"","code":"no_data_to_report_str"},{"path":"na.html/reference/no_data_to_report_str.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"No Data to Report String — no_data_to_report_str","text":"object class character length 1.","code":""},{"path":"na.html/reference/no_data_to_report_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"No Data to Report String — no_data_to_report_str","text":"character string value \"data report\".","code":""},{"path":"na.html/reference/non_blank_sentinel.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-blank Sentinel — non_blank_sentinel","title":"Non-blank Sentinel — non_blank_sentinel","text":"Non-blank Sentinel","code":""},{"path":"na.html/reference/non_blank_sentinel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-blank Sentinel — non_blank_sentinel","text":"","code":"non_blank_sentinel"},{"path":"na.html/reference/non_blank_sentinel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Non-blank Sentinel — non_blank_sentinel","text":"object class non_blank_sentinel length 1.","code":""},{"path":"na.html/reference/null_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Null Function — null_fn","title":"Null Function — null_fn","text":"function returns NULL.","code":""},{"path":"na.html/reference/null_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null Function — null_fn","text":"","code":"null_fn(...)"},{"path":"na.html/reference/odds_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds ratio estimation — odds_ratio","title":"Odds ratio estimation — odds_ratio","text":"`r lifecycle::badge('stable')`","code":""},{"path":"na.html/reference/odds_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds ratio estimation — odds_ratio","text":"","code":"a_odds_ratio_j(   df,   .var,   .df_row,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_odds_ratio_j(   df,   .var,   .ref_group,   .in_ref_col,   .df_row,   variables = list(arm = NULL, strata = NULL),   conf_level = 0.95,   groups_list = NULL,   na_if_no_events = TRUE,   method = c(\"exact\", \"approximate\", \"efron\", \"breslow\", \"cmh\") )"},{"path":"na.html/reference/odds_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds ratio estimation — odds_ratio","text":"df (`data.frame`) input data frame. .var (`string`) name response variable. .df_row (`data.frame`) data frame containing rows. ref_path (`character`) path reference group. .spl_context (`environment`) split context environment. ... Additional arguments passed statistics function. .stats (`character`) statistics calculate. .formats (`list`) formats statistics. .labels (`list`) labels statistics. .indent_mods (`list`) indentation modifications statistics. .ref_group (`data.frame`) reference group data frame. .in_ref_col (`logical`) whether current column reference column. variables (`list`) list arm strata variable names. conf_level (`numeric`) confidence level confidence interval. groups_list (`list`) list groups combination. na_if_no_events (`flag`) whether point estimate `NA` events one arm. p-value confidence interval still computed. method (`string`) whether use correct (`'exact'`) calculation conditional likelihood one approximations, CMH method. See [survival::clogit()] details.","code":""},{"path":"na.html/reference/odds_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Odds ratio estimation — odds_ratio","text":"* `a_odds_ratio_j()` returns corresponding list formatted [rtables::CellValue()]. * `s_odds_ratio_j()` returns named list statistics `or_ci`   (containing `est`, `lcl`, `ucl`), `pval` `n_tot`.","code":""},{"path":"na.html/reference/odds_ratio.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Odds ratio estimation — odds_ratio","text":"a_odds_ratio_j(): Formatted analysis function used `afun`. Note junco specific `ref_path` `.spl_context` arguments used reference column information. s_odds_ratio_j(): Statistics function estimates odds ratio treatment control. `variables` list `arm` `strata` variable names must passed stratified analysis required.","code":""},{"path":"na.html/reference/odds_ratio.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Odds ratio estimation — odds_ratio","text":"`a_odds_ratio_j()` `s_odds_ratio_j()` functions `_j` suffix distinguish [tern::a_odds_ratio()] [tern::s_odds_ratio()], respectively. functions differ follows: * Additional `method = 'cmh'` option provided calculate Cochran-Mantel-Haenszel estimate. * p-value returned additional statistic. updates contributed back `tern`, can later replaced `tern` versions.","code":""},{"path":"na.html/reference/odds_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Odds ratio estimation — odds_ratio","text":"","code":"set.seed(12) dta <- data.frame(   rsp = sample(c(TRUE, FALSE), 100, TRUE),   grp = factor(rep(c('A', 'B'), each = 50), levels = c('A', 'B')),   strata = factor(sample(c('C', 'D'), 100, TRUE)) )  a_odds_ratio_j(   df = subset(dta, grp == 'A'),   .var = 'rsp',   ref_path = c('grp', 'B'),   .spl_context = data.frame(     cur_col_split = I(list('grp')),     cur_col_split_val = I(list(c(grp = 'A'))),     full_parent_df = I(list(dta))   ),   .df_row = dta ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name  formatted_cell indent_mod           row_label #> 1    n_tot              50          0             Total n #> 2    or_ci NE (0.00 - Inf)          1 Odds Ratio (95% CI) #> 3     pval          >0.999          1             p-value   l <- basic_table() |>   split_cols_by(var = 'grp') |>   analyze(     'rsp',     afun = a_odds_ratio_j,     show_labels = 'hidden',     extra_args = list(       ref_path = c('grp', 'B'),       .stats = c('or_ci', 'pval')     )   )  build_table(l, df = dta) #>                                 A            B #> —————————————————————————————————————————————— #>   Odds Ratio (95% CI)   0.85 (0.38 - 1.88)     #>   p-value                     0.685             l2 <- basic_table() |>   split_cols_by(var = 'grp') |>   analyze(     'rsp',     afun = a_odds_ratio_j,     show_labels = 'hidden',     extra_args = list(       variables = list(arm = 'grp', strata = 'strata'),       method = 'cmh',       ref_path = c('grp', 'A'),       .stats = c('or_ci', 'pval')     )   )  build_table(l2, df = dta) #>                         A           B          #> —————————————————————————————————————————————— #>   Odds Ratio (95% CI)       1.31 (0.58 - 2.96) #>   p-value                         0.524        # Unstratified analysis. s_odds_ratio_j(   df = subset(dta, grp == 'A'),   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   .df_row = dta ) #> $or_ci #>       est       lcl       ucl  #> 0.8484848 0.3831831 1.8788053  #> attr(,\"label\") #> [1] \"Odds Ratio (95% CI)\" #>  #> $n_tot #> n_tot  #>   100  #>  #> $pval #> [1] 0.6854057 #>   # Stratified analysis. s_odds_ratio_j(   df = subset(dta, grp == 'A'),   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   .df_row = dta,   variables = list(arm = 'grp', strata = 'strata') ) #> $or_ci #>       est       lcl       ucl  #> 0.7689750 0.3424155 1.7269154  #> attr(,\"label\") #> [1] \"Odds Ratio (95% CI)\" #>  #> $n_tot #> n_tot  #>   100  #>  #> $pval #> [1] 0.5245098 #>   # Stratified analysis with CMH. s_odds_ratio_j(   df = subset(dta, grp == 'A'),   method = 'cmh',   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   .df_row = dta,   variables = list(arm = 'grp', strata = c('strata')) ) #> $or_ci #>       est       lcl       ucl  #> 0.7647498 0.3376522 1.7320849  #> attr(,\"label\") #> [1] \"Odds Ratio (95% CI)\" #>  #> $n_tot #> n_tot  #>   100  #>  #> $pval #> [1] 0.5241419 #>"},{"path":"na.html/reference/pad_in_rows_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Function Factory to Create Padded In Rows Content — pad_in_rows_fct","title":"Function Factory to Create Padded In Rows Content — pad_in_rows_fct","text":"Function Factory Create Padded Rows Content","code":""},{"path":"na.html/reference/pad_in_rows_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function Factory to Create Padded In Rows Content — pad_in_rows_fct","text":"","code":"pad_in_rows_fct(length_out = NULL, label = \"\")"},{"path":"na.html/reference/pad_in_rows_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function Factory to Create Padded In Rows Content — pad_in_rows_fct","text":"length_out (`count` `NULL`) full length padded `NA` printed empty strings. label (`string`) row label used first row .","code":""},{"path":"na.html/reference/pad_in_rows_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function Factory to Create Padded In Rows Content — pad_in_rows_fct","text":"function `content` `.formats`.","code":""},{"path":"na.html/reference/par_lapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelise Lapply — par_lapply","title":"Parallelise Lapply — par_lapply","text":"Simple wrapper around `lapply` [`parallel::clusterApplyLB`] abstract away logic deciding one use","code":""},{"path":"na.html/reference/par_lapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelise Lapply — par_lapply","text":"","code":"par_lapply(cl, fun, x, ...)"},{"path":"na.html/reference/par_lapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelise Lapply — par_lapply","text":"cl Cluster created [`parallel::makeCluster()`] `NULL` fun Function run x object looped ... extra arguments passed `fun`","code":""},{"path":"na.html/reference/prop_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion difference estimation — prop_diff","title":"Proportion difference estimation — prop_diff","text":"analysis function [a_proportion_diff_j()] can used create layout element estimate difference proportion responders within studied population. primary analysis variable, `vars`, logical variable indicating whether response occurred record. See `method` parameter options methods use constructing confidence interval proportion difference. stratification variable can supplied via `strata` element `variables` argument.","code":""},{"path":"na.html/reference/prop_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion difference estimation — prop_diff","text":"","code":"a_proportion_diff_j(   df,   .var,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_proportion_diff_j(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   conf_level = 0.95,   method = c(\"waldcc\", \"wald\", \"cmh\", \"ha\", \"newcombe\", \"newcombecc\", \"strat_newcombe\",     \"strat_newcombecc\"),   weights_method = \"cmh\" )"},{"path":"na.html/reference/prop_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion difference estimation — prop_diff","text":"df (`data.frame`) input data frame. .var (`string`) name response variable. ref_path (`character`) path reference group. .spl_context (`environment`) split context environment. ... Additional arguments passed statistics function. .stats (`character`) statistics calculate. .formats (`list`) formats statistics. .labels (`list`) labels statistics. .indent_mods (`list`) indentation modifications statistics. .ref_group (`data.frame`) reference group data frame. .in_ref_col (`logical`) whether current column reference column. variables (`list`) list strata variable names. conf_level (`numeric`) confidence level confidence interval. method (`string`) method use confidence interval calculation. weights_method (`string`) method use weights calculation stratified analysis.","code":""},{"path":"na.html/reference/prop_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion difference estimation — prop_diff","text":"* `a_proportion_diff_j()` returns corresponding list formatted [rtables::CellValue()]. * `s_proportion_diff_j()` returns named list elements `diff`,    `diff_ci`, `diff_est_ci` `diff_ci_3d`.","code":""},{"path":"na.html/reference/prop_diff.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Proportion difference estimation — prop_diff","text":"a_proportion_diff_j(): Formatted analysis function used `afun` `estimate_proportion_diff()`. s_proportion_diff_j(): Statistics function estimating difference terms responder proportion.","code":""},{"path":"na.html/reference/prop_diff.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Proportion difference estimation — prop_diff","text":"[a_proportion_diff_j()] function `_j` suffix distinguish   [tern::a_proportion_diff()]. functions copy `tern` package   additional features: * Additional statistic `diff_est_ci` returned.   * `ref_path` needs provided extra argument specify control group column. performing unstratified analysis, methods `'cmh'`, `'strat_newcombe'`,   `'strat_newcombecc'` permitted.","code":""},{"path":"na.html/reference/prop_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion difference estimation — prop_diff","text":"","code":"## 'Mid' case: 4/4 respond in group A, 1/2 respond in group B. nex <- 100 # Number of example rows dta <- data.frame(   'rsp' = sample(c(TRUE, FALSE), nex, TRUE),   'grp' = sample(c('A', 'B'), nex, TRUE),   'f1' = sample(c('a1', 'a2'), nex, TRUE),   'f2' = sample(c('x', 'y', 'z'), nex, TRUE),   stringsAsFactors = TRUE )  l <- basic_table() |>   split_cols_by(var = 'grp') |>   analyze(     vars = 'rsp',     afun = a_proportion_diff_j,     show_labels = \"hidden\",     na_str = tern::default_na_str(),     extra_args = list(       conf_level = 0.9,       method = 'ha',       ref_path = c('grp', 'B')     )   )  build_table(l, df = dta) #>                                           A           B #> ——————————————————————————————————————————————————————— #> Difference in Response rate (%)         12.0            #>   90% CI (Anderson-Hauck)           (-5.4, 29.4)        #> % Difference (90% CI)             12.0 (-5.4, 29.4)      s_proportion_diff_j(   df = subset(dta, grp == 'A'),   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   conf_level = 0.90,   method = 'ha' ) #> $diff #> diff_ha  #>      12  #> attr(,\"label\") #> [1] \"Difference in Response rate (%)\" #>  #> $diff_ci #> diff_ci_ha_l diff_ci_ha_u  #>    -5.374519    29.374519  #> attr(,\"label\") #> [1] \"90% CI (Anderson-Hauck)\" #>  #> $diff_est_ci #>      diff_ha diff_ci_ha_l diff_ci_ha_u  #>    12.000000    -5.374519    29.374519  #> attr(,\"label\") #> [1] \"% Difference (90% CI)\" #>  #> $diff_ci_3d #>      diff_ha diff_ci_ha_l diff_ci_ha_u  #>    12.000000    -5.374519    29.374519  #> attr(,\"label\") #> [1] \"Relative Risk (90% CI)\" #>   # CMH example with strata s_proportion_diff_j(   df = subset(dta, grp == 'A'),   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   variables = list(strata = c('f1', 'f2')),   conf_level = 0.90,   method = 'cmh' ) #> $diff #> diff_cmh  #> 12.27932  #> attr(,\"label\") #> [1] \"Difference in Response rate (%)\" #>  #> $diff_ci #> diff_ci_cmh_l diff_ci_cmh_u  #>     -2.657093     27.215725  #> attr(,\"label\") #> [1] \"90% CI (CMH, without correction)\" #>  #> $diff_est_ci #>      diff_cmh diff_ci_cmh_l diff_ci_cmh_u  #>     12.279316     -2.657093     27.215725  #> attr(,\"label\") #> [1] \"% Difference (90% CI)\" #>  #> $diff_ci_3d #>      diff_cmh diff_ci_cmh_l diff_ci_cmh_u  #>     12.279316     -2.657093     27.215725  #> attr(,\"label\") #> [1] \"Relative Risk (90% CI)\" #>"},{"path":"na.html/reference/prop_diff_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference test for two proportions — prop_diff_test","title":"Difference test for two proportions — prop_diff_test","text":"`r lifecycle::badge('stable')` analysis function [a_test_proportion_diff()] can used create layout element test difference two proportions. primary analysis variable, `vars`, indicates whether response occurred record. See `method` parameter options methods use calculate p-value. Additionally, stratification variable can supplied via `strata` element `variables` argument. argument `alternative` specifies direction alternative hypothesis.","code":""},{"path":"na.html/reference/prop_diff_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference test for two proportions — prop_diff_test","text":"","code":"a_test_proportion_diff(   df,   .var,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_test_proportion_diff(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   method = c(\"chisq\", \"fisher\", \"cmh\"),   alternative = c(\"two.sided\", \"less\", \"greater\") )"},{"path":"na.html/reference/prop_diff_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference test for two proportions — prop_diff_test","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. ref_path (`character`) global reference group specification, see [get_ref_info()]. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. ... additional arguments lower level functions. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. .ref_group (`data.frame` `vector`) data corresponding reference group. .in_ref_col (`logical`) `TRUE` working reference level, `FALSE` otherwise. variables (named `list` `string`) list additional analysis variables. method (`string`) one `chisq`, `cmh`, `fisher`; specifies test used calculate p-value. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed.","code":""},{"path":"na.html/reference/prop_diff_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference test for two proportions — prop_diff_test","text":"* `a_test_proportion_diff()` returns corresponding list formatted [rtables::CellValue()]. * `s_test_proportion_diff()` returns named `list` single item `pval` attribute `label`   describing method used. p-value tests null hypothesis proportions two groups .","code":""},{"path":"na.html/reference/prop_diff_test.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Difference test for two proportions — prop_diff_test","text":"a_test_proportion_diff(): Formatted analysis function used `afun` s_test_proportion_diff(): Statistics function tests difference two proportions.","code":""},{"path":"na.html/reference/prop_diff_test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Difference test for two proportions — prop_diff_test","text":"functions forked `tern` package. Additional features : * Additional `alternative` argument sidedness test.   * Additional `ref_path` argument flexible reference column path specification.","code":""},{"path":[]},{"path":"na.html/reference/prop_diff_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference test for two proportions — prop_diff_test","text":"","code":"dta <- data.frame(   rsp = sample(c(TRUE, FALSE), 100, TRUE),   grp = factor(rep(c('A', 'B'), each = 50)),   strata = factor(rep(c('V', 'W', 'X', 'Y', 'Z'), each = 20)) )  # With `rtables` pipelines. l <- basic_table() |>   split_cols_by(var = 'grp') |>   analyze(     vars = 'rsp',     afun = a_test_proportion_diff,     show_labels = 'hidden',     extra_args = list(       method = 'cmh',       variables = list(strata = 'strata'),       ref_path = c('grp', 'B')     )   )  build_table(l, df = dta) #>                                              A     B #> ———————————————————————————————————————————————————— #>   p-value (Cochran-Mantel-Haenszel Test)   0.374"},{"path":"na.html/reference/prop_post_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function for Proportion Analysis Columns (TEFCGIS08 e.g.) — prop_post_fun","title":"Split Function for Proportion Analysis Columns (TEFCGIS08 e.g.) — prop_post_fun","text":"just split 3 columns `n`, `","code":""},{"path":"na.html/reference/prop_post_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function for Proportion Analysis Columns (TEFCGIS08 e.g.) — prop_post_fun","text":"","code":"prop_post_fun(ret, spl, fulldf, .spl_context)  prop_split_fun(df, spl, vals = NULL, labels = NULL, trim = FALSE, .spl_context)"},{"path":"na.html/reference/prop_post_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function for Proportion Analysis Columns (TEFCGIS08 e.g.) — prop_post_fun","text":"ret (`list`) return value previous split function. spl (`list`) split information. fulldf (`data.frame`) full data frame. .spl_context (`environment`) split context environment. df data frame contains analysis variables. vals character vector contains values use split. labels character vector contains labels statistics (without indent). trim single logical indicates whether trim values.","code":""},{"path":"na.html/reference/prop_post_fun.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split Function for Proportion Analysis Columns (TEFCGIS08 e.g.) — prop_post_fun","text":"split function used proportion table TEFCGIS08 similar ones.","code":""},{"path":[]},{"path":"na.html/reference/prop_ratio_cmh.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Risk CMH Statistic — prop_ratio_cmh","title":"Relative Risk CMH Statistic — prop_ratio_cmh","text":"Calculates relative risk defined ratio response rates experimental treatment group control treatment group, adjusted stratification factors applying Cochran-Mantel-Haenszel (CMH) weights.","code":""},{"path":"na.html/reference/prop_ratio_cmh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Risk CMH Statistic — prop_ratio_cmh","text":"","code":"prop_ratio_cmh(rsp, grp, strata, conf_level = 0.95)"},{"path":"na.html/reference/prop_ratio_cmh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Risk CMH Statistic — prop_ratio_cmh","text":"rsp (`logical`) whether subject responder . grp (`factor`) defining groups. strata (`factor`) variable one level per stratum length `rsp`. conf_level (`proportion`) confidence level interval.","code":""},{"path":"na.html/reference/prop_ratio_cmh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative Risk CMH Statistic — prop_ratio_cmh","text":"","code":"# Cochran-Mantel-Haenszel confidence interval  set.seed(2) rsp <- sample(c(TRUE, FALSE), 100, TRUE) grp <- sample(c('Placebo', 'Treatment'), 100, TRUE) grp <- factor(grp, levels = c('Placebo', 'Treatment')) strata_data <- data.frame(   'f1' = sample(c('a', 'b'), 100, TRUE),   'f2' = sample(c('x', 'y', 'z'), 100, TRUE),   stringsAsFactors = TRUE )  prop_ratio_cmh(   rsp = rsp, grp = grp, strata = interaction(strata_data),   conf_level = 0.90 ) #> $rel_risk_ci #>       est       lcl       ucl  #> 0.7417303 0.4907583 1.1210485  #>  #> $pval #> [1] 0.1892073 #>"},{"path":"na.html/reference/prop_table_afun.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","title":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","text":"function applies factor `x` column split prepared [prop_split_fun()] .","code":""},{"path":"na.html/reference/prop_table_afun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","text":"","code":"prop_table_afun(x, .spl_context, formats, add_total_level = FALSE)"},{"path":"na.html/reference/prop_table_afun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","text":"x (`factor`) factor variable analyze. .spl_context (`environment`) split context environment. formats (`list`) formats statistics. add_total_level (`flag`) whether add total level.","code":""},{"path":"na.html/reference/prop_table_afun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","text":"formatted result [rtables::rcell()].","code":""},{"path":"na.html/reference/prop_table_afun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatted Analysis Function for Proportion Analysis (TEFCGIS08 e.g.) — prop_table_afun","text":"column named `n`, counts categories well optional `Total` count shown. column named `percent`, percentages categories shown, optional blank entry `Total`. column named `cum_percent`, cumulative percentages shown instead.","code":""},{"path":"na.html/reference/proposal_argument_convention.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Arguments — proposal_argument_convention","title":"Standard Arguments — proposal_argument_convention","text":"documentation function lists arguments `tern` used repeatedly express analysis.","code":""},{"path":"na.html/reference/proposal_argument_convention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Arguments — proposal_argument_convention","text":"... additional arguments lower level functions. .aligns (`character`) alignment table contents (including labels). `NULL`, `'center'` applied. See [formatters::list_valid_aligns()] list currently supported alignments. .all_col_counts (`vector` `integer`) value represents global count column. Values taken `alt_counts_df` specified (see [rtables::build_table()]). .df_row (`data.frame`) data frame across columns given row split. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .in_ref_col (`logical`) `TRUE` working reference level, `FALSE` otherwise. .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative. .labels (named `character`) labels statistics (without indent). .N_col (`integer`) column-wise N (column count) full column analyzed typically passed `rtables`. .N_row (`integer`) row-wise N (row group count) group observations analyzed (.e. column-based subsetting) typically passed `rtables`. .ref_group (`data.frame` `vector`) data corresponding reference group. ref_path (`character`) global reference group specification, see [get_ref_info()]. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. .stats (`character`) statistics select table. .var (`string`) single variable name passed `rtables` requested statistics function. add_total_level (`flag`) adds 'total' level others includes levels constitute split. custom label can set level via `custom_label` argument. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed. col_by (`factor`) defining column groups. conf_level (`proportion`) confidence level interval. control (`list`) relevant list control options. data (`data.frame`) dataset containing variables summarize. df (`data.frame`) data set containing analysis variables. draw (`flag`) whether plot drawn. grp (`factor`) defining groups. groups_lists (named `list` `list`) optionally contains `subgroups` variable list, specifies new group levels via names levels belong character vectors elements list. id (`string`) subject variable name. is_event (`character`) variable name storing Logical values: `TRUE` event, `FALSE` time event censored. indent_mod `r lifecycle::badge('deprecated')` Please use `.indent_mods` argument instead. label_all (`string`) label total population analysis. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. lyt (`layout`) input layout analyses added . method (`string`) specifies test used calculate p-value difference two proportions. options, see [s_test_proportion_diff()]. Default `NULL` test performed. na.rm (`flag`) whether `NA` values removed `x` prior analysis. na_level `r lifecycle::badge('deprecated')` Please use `na_str` argument instead. na_str (`string`) string used replace `NA` empty values output. nested (`flag`) whether layout instruction applied within existing layout structure _if possible_ (`TRUE`, default) new top-level element (`FALSE`). Ignored nest split. underneath analyses, allowed. newpage (`flag`) whether plot drawn new page. considered `draw = TRUE` used. prune_zero_rows (`flag`) whether prune zero rows. riskdiff (`flag`) whether risk difference column present. set `TRUE`, [add_riskdiff()] must used `split_fun` prior column split table layout, specifying columns compared. See [stat_propdiff_ci()] details risk difference calculation. rsp (`logical`) whether subject responder . section_div (`string`) string repeated section divider group defined split instruction, `NA_character_` (default) section divider. show_labels (`string`) label visibility: one 'default', 'visible' 'hidden'. show_relative 'reduction' (`control - treatment`, default) 'increase' (`treatment - control`) shown relative change baseline? strata (`character` `NULL`) variable names indicating stratification factors. table_names (`character`) can customized case `vars` analyzed multiple times, avoid warnings `rtables`. tte (`numeric`) contains time--event duration values. var_labels (`character`) character label. variables (named `list` `string`) list additional analysis variables. vars (`character`) variable names primary analysis variable iterated . var (`string`) single variable name primary analysis variable. x (`numeric`) vector numbers want analyze. ctrl_grp (`string`) Level control group relative risk derivation.","code":""},{"path":"na.html/reference/proposal_argument_convention.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard Arguments — proposal_argument_convention","text":"Although function just returns `NULL` two uses,   `tern` users provides documentation arguments   commonly consistently used framework. developer adds   single reference point import `roxygen` argument description :   `@inheritParams proposal_argument_convention`","code":""},{"path":"na.html/reference/rbmi_analyse.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Multiple Imputed Datasets — rbmi_analyse","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"function takes multiple imputed datasets (generated [impute()] function) runs analysis function .","code":""},{"path":"na.html/reference/rbmi_analyse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"","code":"rbmi_analyse(   imputations,   fun = rbmi_ancova,   delta = NULL,   ...,   cluster_or_cores = 1,   .validate = TRUE )"},{"path":"na.html/reference/rbmi_analyse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"imputations `imputations` object created [impute()]. fun analysis function applied imputed dataset. See details. delta `data.frame` containing delta transformation applied imputed datasets prior running `fun`. See details. ... Additional arguments passed onto `fun`. cluster_or_cores number parallel processes use running function. Can also cluster object created [`make_rbmi_cluster()`]. See parallelisation section . .validate `imputations` checked ensure conforms required format (default = `TRUE`) ? Can gain small performance increase set `FALSE` analysing large number samples.","code":""},{"path":"na.html/reference/rbmi_analyse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"function works performing following steps: 1. Extract dataset `imputations` object. 2. Apply delta adjustments specified `delta` argument. 3. Run analysis function `fun` dataset. 4. Repeat steps 1-3 across datasets inside `imputations` object. 5. Collect return analysis results. analysis function `fun` must take `data.frame` first argument. options [rbmi_analyse()] passed onto `fun` via `...`. `fun` must return named list element list containing single numeric element called `est` (additionally `se` `df` originally specified [method_bayes()] [method_approxbayes()]) .e.: Please note `vars$subjid` column (defined original call [draws()]) scrambled data.frames provided `fun`. say contain original subject values hard coding subject ids strictly avoided. default `fun` [rbmi_ancova()] function. Please note function requires `vars` object, created [set_vars()], provided via `vars` argument e.g. `rbmi_analyse(imputeObj, vars = rbmi::set_vars(...))`. Please see documentation [rbmi_ancova()] full details. Please also note theoretical justification conditional mean imputation method (`method = method_condmean()` [draws()]) relies fact ANCOVA linear transformation outcomes. Thus care required applying alternative analysis functions setting. `delta` argument can used specify offsets applied outcome variable imputed datasets prior analysis. typically used sensitivity tipping point analyses. delta dataset must contain columns `vars$subjid`, `vars$visit` (specified original call [draws()]) `delta`. Essentially `data.frame` merged onto imputed dataset `vars$subjid` `vars$visit` outcome variable modified : “` imputed_data[[vars$outcome]] <- imputed_data[[vars$outcome]] + imputed_data[['delta']] “` Please note order provide maximum flexibility, `delta` argument can used modify /outcome values including imputed. Care must taken defining offsets. recommend use helper function [delta_template()] define delta datasets provides utility variables `is_missing` can used identify exactly visits imputed.","code":"myfun <- function(dat, ...) {     mod_1 <- lm(data = dat, outcome ~ group)     mod_2 <- lm(data = dat, outcome ~ group + covar)     x <- list(         trt_1 = list(             est = coef(mod_1)[['group']],  # Use [[ ]] for safety             se = sqrt(vcov(mod_1)['group', 'group']), # Use ['','']             df = df.residual(mod_1)         ),         trt_2 = list(             est = coef(mod_2)[['group']],  # Use [[ ]] for safety             se = sqrt(vcov(mod_2)['group', 'group']), # Use ['','']             df = df.residual(mod_2)         )      )      return(x)  }"},{"path":"na.html/reference/rbmi_analyse.html","id":"parallelisation","dir":"Reference","previous_headings":"","what":"Parallelisation","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"speed evaluation `rbmi_analyse()` can use `cluster_or_cores` argument enable parallelisation. Simply providing integer get `rbmi` automatically spawn many background processes parallelise across. using custom analysis function need ensure libraries global objects required function available sub-processes. need use [`make_rbmi_cluster()`] function example: “` my_custom_fun <- function(...) <analysis code> cl <- make_rbmi_cluster(     4,     objects = list('my_custom_fun' = my_custom_fun),     packages = c('dplyr', 'nlme') ) rbmi_analyse(     imputations = imputeObj,     fun = my_custom_fun,     cluster_or_cores = cl ) parallel::stopCluster(cl) “` Note significant overhead setting sub-processes transferring data back--forth main process sub-processes. parallelisation `rbmi_analyse()` function tends worth `> 2000` samples generated [`draws()`]. Conversely using parallelisation samples smaller may lead longer run times just running sequentially. important note implementation parallel processing within [`analyse()`] optimised around assumption parallel processes spawned machine remote cluster. One optimisation required data saved temporary file local disk read sub-process. done avoid overhead transferring data network. assumption stage need parallelising analysis remote cluster likely better parallelising across multiple `rbmi` runs rather within single `rbmi` run. Finally, tipping point analysis can get reasonable performance improvement re-using cluster call `rbmi_analyse()` e.g. “` cl <- make_rbmi_cluster(4) ana_1 <- rbmi_analyse(     imputations = imputeObj,     delta = delta_plan_1,     cluster_or_cores = cl ) ana_2 <- rbmi_analyse(     imputations = imputeObj,     delta = delta_plan_2,     cluster_or_cores = cl ) ana_3 <- rbmi_analyse(     imputations = imputeObj,     delta = delta_plan_3,     cluster_or_cores = cl ) parallel::clusterStop(cl) “`","code":""},{"path":[]},{"path":"na.html/reference/rbmi_analyse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse Multiple Imputed Datasets — rbmi_analyse","text":"","code":"library(rbmi) #>  #> Attaching package: ‘rbmi’ #> The following object is masked from ‘package:junco’: #>  #>     make_rbmi_cluster library(dplyr)  dat <- antidepressant_data dat$GENDER <- as.factor(dat$GENDER) dat$POOLINV <- as.factor(dat$POOLINV) dat <- expand_locf(   dat,   PATIENT = levels(dat$PATIENT),   # expand by PATIENT and VISIT   VISIT = levels(dat$VISIT),   vars = c(\"BASVAL\", \"THERAPY\"),   # fill with LOCF BASVAL and THERAPY   group = c(\"PATIENT\"),   order = c(\"PATIENT\", \"VISIT\") ) dat_ice <- dat %>%   arrange(PATIENT, VISIT) %>%   filter(is.na(CHANGE)) %>%   group_by(PATIENT) %>%   slice(1) %>%   ungroup() %>%   select(PATIENT, VISIT) %>%   mutate(strategy = \"JR\") dat_ice <- dat_ice[-which(dat_ice$PATIENT == 3618), ] vars <- set_vars(   outcome = \"CHANGE\",   visit = \"VISIT\",   subjid = \"PATIENT\",   group = \"THERAPY\",   covariates = c(\"THERAPY\") ) drawObj <- draws(   data = dat,   data_ice = dat_ice,   vars = vars,   method = method_condmean(type = \"jackknife\"),   quiet = TRUE ) references <- c(\"DRUG\" = \"PLACEBO\", \"PLACEBO\" = \"PLACEBO\") imputeObj <- impute(drawObj, references)  rbmi_analyse(imputations = imputeObj, vars = vars) #>  #> Analysis Object #> --------------- #> Number of Results: 1 + 172 #> Analysis Function: rbmi_ancova #> Delta Applied: FALSE #> Analysis Estimates: #>     var_4 #>     trt_PLACEBO_4 #>     lsm_DRUG_4 #>     lsm_PLACEBO_4 #>     var_5 #>     trt_PLACEBO_5 #>     lsm_DRUG_5 #>     lsm_PLACEBO_5 #>     var_6 #>     trt_PLACEBO_6 #>     lsm_DRUG_6 #>     lsm_PLACEBO_6 #>     var_7 #>     trt_PLACEBO_7 #>     lsm_DRUG_7 #>     lsm_PLACEBO_7 #>"},{"path":"na.html/reference/rbmi_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of Covariance — rbmi_ancova","title":"Analysis of Covariance — rbmi_ancova","text":"Performs analysis covariance two groups returning estimated \"treatment effect\" (.e. contrast two treatment groups) least square means estimates group.","code":""},{"path":"na.html/reference/rbmi_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of Covariance — rbmi_ancova","text":"","code":"rbmi_ancova(   data,   vars,   visits = NULL,   weights = c(\"counterfactual\", \"equal\", \"proportional_em\", \"proportional\") )"},{"path":"na.html/reference/rbmi_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of Covariance — rbmi_ancova","text":"data `data.frame` containing data used model. vars `vars` object generated [set_vars()]. `group`, `visit`, `outcome` `covariates` elements required. See details. visits optional character vector specifying visits fit ancova model . `NULL`, separate ancova model fit outcomes visit (determined `unique(data[[vars$visit]])`). See details. weights Character, either `\"counterfactual\"` (default), `\"equal\"`, `\"proportional_em\"` `\"proportional\"`. Specifies weighting strategy used calculating lsmeans. See weighting section details.","code":""},{"path":"na.html/reference/rbmi_ancova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of Covariance — rbmi_ancova","text":"function works follows: 1. Select first value `visits`. 2. Subset data observations occurred visit. 3. Fit linear model  `vars$outcome ~ vars$group + vars$covariates`. 4. Extract \"treatment effect\" & least square means treatment group. 5. Repeat points 2-3 values `visits`. value `visits` provided set `unique(data[[vars$visit]])`. order meet formatting standards set [rbmi_analyse()] results collapsed single list suffixed visit name, e.g.: “` list(    var_visit_1 = list(est = ...),    trt_B_visit_1 = list(est = ...),    lsm_A_visit_1 = list(est = ...),    lsm_B_visit_1 = list(est = ...),    var_visit_2 = list(est = ...),    trt_B_visit_2 = list(est = ...),    lsm_A_visit_2 = list(est = ...),    lsm_B_visit_2 = list(est = ...),    ... ) “` Please note \"trt\" refers treatment effects, \"lsm\" refers least square mean results. example `vars$group` two factor levels B. new \"var\" refers model estimated variance residuals. want include interaction terms model can done providing `covariates` argument [set_vars()] e.g. `set_vars(covariates = c(\"sex*age\"))`.","code":""},{"path":"na.html/reference/rbmi_ancova.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Analysis of Covariance — rbmi_ancova","text":"functions `rbmi_` prefix distinguish corresponding   `rbmi` package functions, copied . Additional features   include: * Support two treatment groups.   * Variance estimates returned.","code":""},{"path":[]},{"path":"na.html/reference/rbmi_ancova_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","title":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","text":"Performance analysis covariance. See [rbmi_ancova()] full details.","code":""},{"path":"na.html/reference/rbmi_ancova_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","text":"","code":"rbmi_ancova_single(   data,   outcome,   group,   covariates,   weights = c(\"counterfactual\", \"equal\", \"proportional_em\", \"proportional\") )"},{"path":"na.html/reference/rbmi_ancova_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","text":"data `data.frame` containing data used model. outcome string, name outcome variable `data`. group string, name group variable `data`. covariates character vector containing name additional covariates included model well interaction terms. weights Character, either `\"counterfactual\"` (default), `\"equal\"`, `\"proportional_em\"` `\"proportional\"`. Specifies weighting strategy used calculating lsmeans. See weighting section details.","code":""},{"path":"na.html/reference/rbmi_ancova_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","text":"- `group` must factor variable 2 levels. - `outcome` must continuous numeric variable.","code":""},{"path":[]},{"path":"na.html/reference/rbmi_ancova_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implements an Analysis of Covariance (ANCOVA) — rbmi_ancova_single","text":"","code":"iris2 <- iris[iris$Species %in% c(\"versicolor\", \"virginica\"), ] iris2$Species <- factor(iris2$Species) rbmi_ancova_single(iris2, \"Sepal.Length\", \"Species\", c(\"Petal.Length * Petal.Width\")) #> $var #> $var$est #> [1] 0.1128236 #>  #> $var$se #> [1] 0.01637017 #>  #> $var$df #> [1] 95 #>  #>  #> $trt_virginica #> $trt_virginica$est #> Speciesvirginica  #>       -0.5010775  #>  #> $trt_virginica$se #> [1] 0.1271019 #>  #> $trt_virginica$df #> [1] 95 #>  #>  #> $lsm_versicolor #> $lsm_versicolor$est #> [1] 6.512539 #>  #> $lsm_versicolor$se #> [1] 0.07188155 #>  #> $lsm_versicolor$df #> [1] 95 #>  #>  #> $lsm_virginica #> $lsm_virginica$est #> [1] 6.011461 #>  #> $lsm_virginica$se #> [1] 0.07188155 #>  #> $lsm_virginica$df #> [1] 95 #>  #>"},{"path":"na.html/reference/rbmi_mmrm.html","id":null,"dir":"Reference","previous_headings":"","what":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","title":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","text":"Performs MMRM two groups returning estimated 'treatment effect' (.e. contrast treatment groups control group) least square means estimates group.","code":""},{"path":"na.html/reference/rbmi_mmrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","text":"","code":"rbmi_mmrm(   data,   vars,   cov_struct = c(\"us\", \"toep\", \"cs\", \"ar1\"),   visits = NULL,   weights = c(\"counterfactual\", \"equal\"),   ... )"},{"path":"na.html/reference/rbmi_mmrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","text":"data (`data.frame`) containing data used model. vars (`vars`) list generated [set_vars()]. `subjid`, `group`, `visit`, `outcome` `covariates` elements required. See details. cov_struct (`string`) covariance structure use. Note covariance structure assumed treatment groups. visits (`NULL` `character`) optional character vector specifying visits fit MMRM . `NULL`, MMRM model fit whole dataset. weights (`string`) weighting strategy used calculating least square means, either `'counterfactual'` `'equal'`. ... additional arguments passed [mmrm::mmrm()], particular `method` `vcov` control degrees freedom variance-covariance adjustment methods well `reml` decide REML ML estimation.","code":""},{"path":"na.html/reference/rbmi_mmrm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","text":"function works follows: 1. Optionally select subset `data` corresponding `visits. 2. Fit MMRM `vars$outcome ~ vars$group + vars$visit + vars$covariates`    specified covariance structure visits within subjects. 3. Extract 'treatment effect' & least square means treatment group    vs control group. order meet formatting standards set [analyse()] results collapsed single list suffixed visit name, e.g.: “` list(    var_B_visit_1 = list(est = ...),    trt_B_visit_1 = list(est = ...),    lsm_A_visit_1 = list(est = ...),    lsm_B_visit_1 = list(est = ...),    var_B_visit_2 = list(est = ...),    trt_B_visit_2 = list(est = ...),    lsm_A_visit_2 = list(est = ...),    lsm_B_visit_2 = list(est = ...),    ... ) “` Please note 'trt' refers treatment effects, 'lsm' refers least square mean results. example `vars$group` two factor levels B. new 'var' refers model estimated variance residuals given visit, together degrees freedom (treatment group specific). want include additional interaction terms model can done providing `covariates` argument [set_vars()] e.g. `set_vars(covariates = c('sex*age'))`.","code":""},{"path":"na.html/reference/rbmi_mmrm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"MMRM Analysis for Imputed Datasets — rbmi_mmrm","text":"`group` `visit` interaction `group:visit` included default model, therefore please add `covariates` manually want include . make sense cases.","code":""},{"path":[]},{"path":"na.html/reference/rbmi_mmrm_single_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Single Visit Information from a Fitted MMRM for Multiple Imputation Analysis — rbmi_mmrm_single_info","title":"Extract Single Visit Information from a Fitted MMRM for Multiple Imputation Analysis — rbmi_mmrm_single_info","text":"Extracts relevant estimates given fitted MMRM. See [rbmi_mmrm()] full details.","code":""},{"path":"na.html/reference/rbmi_mmrm_single_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Single Visit Information from a Fitted MMRM for Multiple Imputation Analysis — rbmi_mmrm_single_info","text":"","code":"rbmi_mmrm_single_info(fit, visit_level, visit, group, weights)"},{"path":"na.html/reference/rbmi_mmrm_single_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Single Visit Information from a Fitted MMRM for Multiple Imputation Analysis — rbmi_mmrm_single_info","text":"fit (`mmrm`) fitted MMRM. visit_level (`string`) visit level extract information . visit (`string`) name visit variable. group (`string`) name group variable. weights (`string`) weighting strategy used calculating least square means, either `'counterfactual'` `'equal'`.","code":""},{"path":[]},{"path":"na.html/reference/real_add_overall_facet.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Overall Facet — real_add_overall_facet","title":"Add Overall Facet — real_add_overall_facet","text":"function help add overall facet tables","code":""},{"path":"na.html/reference/real_add_overall_facet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Overall Facet — real_add_overall_facet","text":"","code":"real_add_overall_facet(name, label)"},{"path":"na.html/reference/real_add_overall_facet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Overall Facet — real_add_overall_facet","text":"name character(1). Name/virtual 'value' new facet label character(1). label new facet","code":""},{"path":"na.html/reference/real_add_overall_facet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Overall Facet — real_add_overall_facet","text":"function usable directly split function.","code":""},{"path":"na.html/reference/real_add_overall_facet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Overall Facet — real_add_overall_facet","text":"current add_overall_facet bugged, can use directly fixed https://github.com/insightsengineering/rtables/issues/768","code":""},{"path":"na.html/reference/real_add_overall_facet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Overall Facet — real_add_overall_facet","text":"","code":"# split_rows_by( #   'AVALCAT1', #   split_fun = make_split_fun( #     post = list(real_add_overall_facet('Total', 'Total')) #   ), #   child_labels =  'hidden' # )"},{"path":"na.html/reference/relative_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative risk estimation — a_relative_risk","title":"Relative risk estimation — a_relative_risk","text":"analysis function [a_relative_risk()] used create layout element estimate relative risk response within studied population. CMH method available currently. primary analysis variable, `vars`, logical variable indicating whether response occurred record. stratification variable must supplied via `strata` element `variables` argument.","code":""},{"path":"na.html/reference/relative_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative risk estimation — a_relative_risk","text":"","code":"a_relative_risk(   df,   .var,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_relative_risk(   df,   .var,   .ref_group,   .in_ref_col,   variables = list(strata = NULL),   conf_level = 0.95,   method = \"cmh\",   weights_method = \"cmh\" )"},{"path":"na.html/reference/relative_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative risk estimation — a_relative_risk","text":"df (`data.frame`) input data frame. .var (`string`) name response variable. ref_path (`character`) path reference group. .spl_context (`environment`) split context environment. ... Additional arguments passed statistics function. .stats (`character`) statistics calculate. .formats (`list`) formats statistics. .labels (`list`) labels statistics. .indent_mods (`list`) indentation modifications statistics. .ref_group (`data.frame`) reference group data frame. .in_ref_col (`logical`) whether current column reference column. variables (`list`) list strata variable names. conf_level (`numeric`) confidence level confidence interval. method (`string`) method use relative risk calculation. weights_method (`string`) method use weights calculation stratified analysis.","code":""},{"path":"na.html/reference/relative_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative risk estimation — a_relative_risk","text":"* `a_relative_risk()` returns corresponding list formatted [rtables::CellValue()]. * `s_relative_risk()` returns named list elements `rel_risk_ci` `pval`.","code":""},{"path":"na.html/reference/relative_risk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative risk estimation — a_relative_risk","text":"variance CMH relative risk estimate calculated using   Greenland Robins (1985) variance estimation.","code":""},{"path":"na.html/reference/relative_risk.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Relative risk estimation — a_relative_risk","text":"a_relative_risk(): Formatted analysis function used `afun`. Note junco specific `ref_path` `.spl_context` arguments used reference column information. s_relative_risk(): Statistics function estimating relative risk response.","code":""},{"path":"na.html/reference/relative_risk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Relative risk estimation — a_relative_risk","text":"adapted `odds_ratio` functions `tern` package.","code":""},{"path":"na.html/reference/relative_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative risk estimation — a_relative_risk","text":"","code":"## 'Mid' case: 4/4 respond in group A, 1/2 respond in group B. nex <- 100 # Number of example rows dta <- data.frame(   'rsp' = sample(c(TRUE, FALSE), nex, TRUE),   'grp' = sample(c('A', 'B'), nex, TRUE),   'f1' = sample(c('a1', 'a2'), nex, TRUE),   'f2' = sample(c('x', 'y', 'z'), nex, TRUE),   stringsAsFactors = TRUE )  l <- basic_table() |>   split_cols_by(var = 'grp') |>   analyze(     vars = 'rsp',     afun = a_relative_risk,     extra_args = list(       conf_level = 0.90,       variables = list(strata = 'f1'),       ref_path = c('grp', 'B')     )   )  build_table(l, df = dta) #>                                    A            B #> ————————————————————————————————————————————————— #>   Relative risk (90% CI)   0.97 (0.68 - 1.37)     #>   p-value                        0.872            nex <- 100 # Number of example rows dta <- data.frame(   'rsp' = sample(c(TRUE, FALSE), nex, TRUE),   'grp' = sample(c('A', 'B'), nex, TRUE),   'f1' = sample(c('a1', 'a2'), nex, TRUE),   'f2' = sample(c('x', 'y', 'z'), nex, TRUE),   stringsAsFactors = TRUE )  s_relative_risk(   df = subset(dta, grp == 'A'),   .var = 'rsp',   .ref_group = subset(dta, grp == 'B'),   .in_ref_col = FALSE,   variables = list(strata = c('f1', 'f2')),   conf_level = 0.90 ) #> $rel_risk_ci #>       est       lcl       ucl  #> 0.8284753 0.5998172 1.1443009  #> attr(,\"label\") #> [1] \"Relative risk (90% CI)\" #>  #> $pval #> [1] 0.3341692 #>"},{"path":"na.html/reference/remove_col_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Removal of Unwanted Column Counts — remove_col_count","title":"Removal of Unwanted Column Counts — remove_col_count","text":"Remove N=xx column headers specified span_label_var columns - default 'rrisk_header","code":""},{"path":"na.html/reference/remove_col_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removal of Unwanted Column Counts — remove_col_count","text":"","code":"remove_col_count(obj, span_label_var = \"rrisk_header\")"},{"path":"na.html/reference/remove_col_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removal of Unwanted Column Counts — remove_col_count","text":"obj table tree object span_label_var spanning header text variable value column headers removed ","code":""},{"path":"na.html/reference/remove_col_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removal of Unwanted Column Counts — remove_col_count","text":"table tree object column counts specified columns removed","code":""},{"path":"na.html/reference/remove_col_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Removal of Unwanted Column Counts — remove_col_count","text":"works lowest level column splitting (since colcounts used)","code":""},{"path":"na.html/reference/remove_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","title":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","text":"function remove rows table based row text provided user.","code":""},{"path":"na.html/reference/remove_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","text":"","code":"remove_rows(removerowtext = NULL, reg_expr = FALSE)"},{"path":"na.html/reference/remove_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","text":"removerowtext define text string row row text removed. reg_expr Apply removerowtext regular expression (grepl fixed = TRUE)","code":""},{"path":"na.html/reference/remove_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","text":"function can utilized pruning function prune_table","code":""},{"path":"na.html/reference/remove_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pruning function to remove specific rows of a table regardless of counts — remove_rows","text":"","code":"ADSL <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   TRT01P = c(     'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB', 'Placebo',     'Placebo', 'Placebo', 'ARMA', 'ARMB'   ),   Category = c(     'Cat 1', 'Cat 2', 'Cat 1', 'Unknown', 'Cat 2',     'Cat 1', 'Unknown', 'Cat 1', 'Cat 2', 'Cat 1'   ),   SAFFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'),   PKFL = c('N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N') )  ADSL <- ADSL |>   dplyr::mutate(TRT01P = as.factor(TRT01P))  lyt <- basic_table() |>   split_cols_by(\"TRT01P\") |>    analyze(     \"Category\",     afun = a_freq_j,     extra_args = list(.stats = \"count_unique_fraction\")   )  result <- build_table(lyt, ADSL)  result #>             ARMA        ARMB       Placebo  #> ——————————————————————————————————————————— #> Cat 1     2 (66.7%)   1 (25.0%)   2 (66.7%) #> Cat 2     1 (33.3%)   2 (50.0%)       0     #> Unknown       0       1 (25.0%)   1 (33.3%)  # use pruning function to prune rows where category is Unknown result <- prune_table(result, prune_func = remove_rows(removerowtext = 'Unknown'))  result #>           ARMA        ARMB       Placebo  #> ————————————————————————————————————————— #> Cat 1   2 (66.7%)   1 (25.0%)   2 (66.7%) #> Cat 2   1 (33.3%)   2 (50.0%)       0"},{"path":"na.html/reference/resp01_a_comp_stat_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","text":"function applies `factor` column called `.var` `df`.","code":""},{"path":"na.html/reference/resp01_a_comp_stat_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","text":"","code":"resp01_a_comp_stat_factor(df, .var, include, ...)"},{"path":"na.html/reference/resp01_a_comp_stat_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. include (`character`) factor levels include comparison statistic results. ... see [resp01_a_comp_stat_logical()] additional required arguments.","code":""},{"path":"na.html/reference/resp01_a_comp_stat_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","text":"formatted result [rtables::rcell()].","code":""},{"path":"na.html/reference/resp01_a_comp_stat_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_factor","text":"","code":"dm <- droplevels(subset(formatters::DM, SEX %in% c(\"F\", \"M\")))  resp01_a_comp_stat_factor(   dm,   .var = \"COUNTRY\",   conf_level = 0.9,   include = c(\"USA\", \"CHN\"),   arm = \"SEX\",   strata = \"RACE\",   stat = \"comp_stat_ci\",   method = list(comp_stat_ci = \"or_cmh\"),   formats = list(     comp_stat_ci = jjcsformat_xx(\"xx.xx (xx.xx - xx.xx)\"),     pval = jjcsformat_pval_fct(0.05)   ) ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name     formatted_cell indent_mod row_label #> 1      CHN 1.00 (0.71 - 1.42)          0       CHN #> 2      USA 1.09 (0.64 - 1.86)          0       USA #> 3      BRA                             0       BRA #> 4      PAK                             0       PAK #> 5      NGA                             0       NGA #> 6      RUS                             0       RUS #> 7      JPN                             0       JPN #> 8      GBR                             0       GBR #> 9      CAN                             0       CAN"},{"path":"na.html/reference/resp01_a_comp_stat_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","text":"function applies `logical` column called `.var` `df`. response proportion compared treatment arms identified column `arm`.","code":""},{"path":"na.html/reference/resp01_a_comp_stat_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","text":"","code":"resp01_a_comp_stat_logical(   df,   .var,   conf_level,   include,   arm,   strata,   formats,   methods,   stat = c(\"comp_stat_ci\", \"pval\") )"},{"path":"na.html/reference/resp01_a_comp_stat_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. conf_level (`proportion`) confidence level interval. include (`flag`) whether include results variable. arm (`string`) column name data frame identifies treatment arms. strata (`character` `NULL`) variable names indicating stratification factors. formats (`list`) containing formats `comp_stat_ci` `pval`. methods (`list`) containing methods comparative statistics. element `comp_stat_ci` can 'rr' (relative risk), 'or_cmh' (odds ratio CMH estimation p-value) 'or_logistic' (odds ratio estimated conditional standard logistic regression). element `pval` can 'fisher' (Fisher's exact test) 'chisq' (chi-square test), used using unstratified analyses 'or_logistic'. stat (`string`) statistic return, either `comp_stat_ci` `pval`.","code":""},{"path":"na.html/reference/resp01_a_comp_stat_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","text":"formatted result [rtables::rcell()].","code":""},{"path":[]},{"path":"na.html/reference/resp01_a_comp_stat_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Analysis Function for Comparative Statistic in Response Tables (RESP01) — resp01_a_comp_stat_logical","text":"","code":"dm <- droplevels(subset(formatters::DM, SEX %in% c(\"F\", \"M\"))) dm$RESP <- as.logical(sample(c(TRUE, FALSE), size = nrow(DM), replace = TRUE))  resp01_a_comp_stat_logical(   dm,   .var = \"RESP\",   conf_level = 0.9,   include = TRUE,   arm = \"SEX\",   strata = \"RACE\",   stat = \"comp_stat_ci\",   method = list(comp_stat_ci = \"or_cmh\"),   formats = list(     comp_stat_ci = jjcsformat_xx(\"xx.xx (xx.xx - xx.xx)\"),     pval = jjcsformat_pval_fct(0.05)   ) ) #> rcell: 0.69 (0.49 - 0.98)"},{"path":"na.html/reference/resp01_acfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","title":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","text":"function applies `factor` `logical` columns called `.var` `df`. Depending position split, returns right formatted results RESP01 related layouts.","code":""},{"path":"na.html/reference/resp01_acfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","text":"","code":"resp01_acfun(   df,   labelstr = NULL,   label = NULL,   .var,   .spl_context,   include_comp,   .alt_df,   conf_level,   arm,   strata,   formats,   methods )"},{"path":"na.html/reference/resp01_acfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. label (`string`) logicals, label use. (factors, labels factor levels.) .var (`string`) single variable name passed `rtables` requested statistics function. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. include_comp (`character` `flag`) whether include comparative statistic results, either `character` factors `flag` logicals. .alt_df (`data.frame`) alternative data frame used denominator calculation. conf_level (`proportion`) confidence level interval. arm (`string`) column name data frame identifies treatment arms. strata (`character` `NULL`) variable names indicating stratification factors. formats (`list`) containing formats `prop_ci`, `comp_stat_ci` `pval`. methods (`list`) containing methods comparative statistics. element `comp_stat_ci` can 'rr' (relative risk), 'or_cmh' (odds ratio CMH estimation p-value) 'or_logistic' (odds ratio estimated conditional standard logistic regression). element `pval` can 'fisher' (Fisher's exact test) 'chisq' (chi-square test), used using unstratified analyses 'or_logistic'. element `prop_ci` specifies method proportion confidence interval calculation.","code":""},{"path":"na.html/reference/resp01_acfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","text":"formatted result [rtables::in_rows()] result.","code":""},{"path":"na.html/reference/resp01_acfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Analysis and Content Summary Function for Response Tables (RESP01) — resp01_acfun","text":"","code":"fake_spl_context <- data.frame(   cur_col_split_val = I(list(c(ARM = \"A: Drug X\", count_prop = \"count_prop\"))) ) dm <- droplevels(subset(DM, SEX %in% c(\"F\", \"M\"))) resp01_acfun(   dm,   .alt_df = dm,   .var = \"COUNTRY\",   .spl_context = fake_spl_context,   conf_level = 0.9,   include_comp = c(\"USA\", \"CHN\"),   arm = \"SEX\",   strata = \"RACE\",   methods = list(     comp_stat_ci = \"or_cmh\",     pval = \"\",     prop_ci = \"wald\"   ),   formats = list(     prop_ci = jjcsformat_xx(\"xx.% - xx.%\"),     comp_stat_ci = jjcsformat_xx(\"xx.xx (xx.xx - xx.xx)\"),     pval = jjcsformat_pval_fct(0.05)   ) ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1      CHN    179 (50.3%)          0       CHN #> 2      USA     44 (12.4%)          0       USA #> 3      BRA      29 (8.1%)          0       BRA #> 4      PAK      28 (7.9%)          0       PAK #> 5      NGA      24 (6.7%)          0       NGA #> 6      RUS      20 (5.6%)          0       RUS #> 7      JPN      18 (5.1%)          0       JPN #> 8      GBR       7 (2.0%)          0       GBR #> 9      CAN       7 (2.0%)          0       CAN fake_spl_context2 <- data.frame(   cur_col_split_val = I(list(c(ARM = \"Overall\", comp_stat_ci = \"comp_stat_ci\"))) ) resp01_acfun(   dm,   .alt_df = dm,   .var = \"COUNTRY\",   .spl_context = fake_spl_context2,   conf_level = 0.9,   include_comp = c(\"USA\", \"CHN\"),   arm = \"SEX\",   strata = \"RACE\",   methods = list(     comp_stat_ci = \"or_cmh\",     pval = \"\",     prop_ci = \"wald\"   ),   formats = list(     prop_ci = jjcsformat_xx(\"xx.% - xx.%\"),     comp_stat_ci = jjcsformat_xx(\"xx.xx (xx.xx - xx.xx)\"),     pval = jjcsformat_pval_fct(0.05)   ) ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name     formatted_cell indent_mod row_label #> 1      CHN 1.00 (0.71 - 1.42)          0       CHN #> 2      USA 1.09 (0.64 - 1.86)          0       USA #> 3      BRA                             0       BRA #> 4      PAK                             0       PAK #> 5      NGA                             0       NGA #> 6      RUS                             0       RUS #> 7      JPN                             0       JPN #> 8      GBR                             0       GBR #> 9      CAN                             0       CAN"},{"path":"na.html/reference/resp01_counts_cfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","title":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","text":"Content Row Function Counts Subgroups Response Tables (RESP01)","code":""},{"path":"na.html/reference/resp01_counts_cfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","text":"","code":"resp01_counts_cfun(df, labelstr, .spl_context, .alt_df, label_fstr)"},{"path":"na.html/reference/resp01_counts_cfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","text":"df (`data.frame`) data set containing analysis variables. labelstr (`character`) label level parent split currently summarized (must present second argument Content Row Functions). See [rtables::summarize_row_groups()] information. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. .alt_df (`data.frame`) alternative data frame used denominator calculation. label_fstr (`string`) format string label.","code":""},{"path":"na.html/reference/resp01_counts_cfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","text":"correct [rtables::in_rows()] result.","code":""},{"path":"na.html/reference/resp01_counts_cfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Content Row Function for Counts of Subgroups in Response Tables (RESP01) — resp01_counts_cfun","text":"","code":"fake_spl_context <- data.frame(   cur_col_split_val = I(list(c(ARM = \"A: Drug X\", count_prop = \"count_prop\"))) ) resp01_counts_cfun(   df = DM,   labelstr = \"Blue\",   .spl_context = fake_spl_context,   .alt_df = DM,   label_fstr = \"Color: %s\" ) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>      row_name formatted_cell indent_mod   row_label #> 1 Color: Blue            356          0 Color: Blue"},{"path":"na.html/reference/resp01_split_fun_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","title":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","text":"main purpose column dependent split either comparative statistic (relative risk odds ratio p-value) 'Overall' column, count proportions corresponding confidence intervals treatment arm columns.","code":""},{"path":"na.html/reference/resp01_split_fun_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","text":"","code":"resp01_split_fun_fct(method = c(\"rr\", \"or_logistic\", \"or_cmh\"), conf_level)"},{"path":"na.html/reference/resp01_split_fun_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","text":"method (`string`) method use comparative statistics. conf_level (`proportion`) confidence level interval.","code":""},{"path":"na.html/reference/resp01_split_fun_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","text":"split function use response table RESP01 similar ones.","code":""},{"path":[]},{"path":"na.html/reference/resp01_split_fun_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Function Factory for the Response Tables (RESP01) — resp01_split_fun_fct","text":"","code":"split_fun <- resp01_split_fun_fct(   method = \"or_cmh\",   conf_level = 0.95 )"},{"path":"na.html/reference/response_by_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Count denom fraction statistic — response_by_var","title":"Count denom fraction statistic — response_by_var","text":"Derives count_denom_fraction statistic (.e., 'xx /xx (xx.x percent)' )              Summarizes number unique subjects response = 'Y' given variable              (e.g. TRTEMFL) within category another variable (e.g., SEX).              Note denominator derived using input df,              order aligned alt_source_df, expected df includes subjects.","code":""},{"path":"na.html/reference/response_by_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count denom fraction statistic — response_by_var","text":"","code":"response_by_var(   df,   labelstr = NULL,   .var,   .N_col,   resp_var = NULL,   id = \"USUBJID\",   .format = jjcsformat_count_denom_fraction,   ... )"},{"path":"na.html/reference/response_by_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count denom fraction statistic — response_by_var","text":"df Name dataframe analyzed. labelstr Custom label variable analyzed. .var Name variable analyzed. Records non-missing values counted denominator. .N_col numeric(1). total current column. resp_var Name variable, , records value 'Y' counted numerator. id Name column df patient identifiers .format Format count/denominator/fraction output. ... Additional arguments passed function.","code":""},{"path":"na.html/reference/response_by_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count denom fraction statistic — response_by_var","text":"`RowsVerticalSection` use internal tabulation machinery `rtables`","code":""},{"path":"na.html/reference/response_by_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count denom fraction statistic — response_by_var","text":"analysis function use within `analyze`. Arguments          `df`, `.var` populated automatically rtables          tabulation process.","code":""},{"path":"na.html/reference/response_by_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count denom fraction statistic — response_by_var","text":"","code":"library(dplyr)  ADAE <- data.frame(   USUBJID = c(     'XXXXX01', 'XXXXX02', 'XXXXX03', 'XXXXX04', 'XXXXX05',     'XXXXX06', 'XXXXX07', 'XXXXX08', 'XXXXX09', 'XXXXX10'   ),   SEX_DECODE = c(     'Female', 'Female', 'Male', 'Female', 'Male',     'Female', 'Male', 'Female', 'Male', 'Female'   ),   TRT01A = c(     'ARMA', 'ARMB', 'ARMA', 'ARMB', 'ARMB',     'Placebo', 'Placebo', 'Placebo', 'ARMA', 'ARMB'   ),   TRTEMFL = c('Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y') )  ADAE <- ADAE |>   mutate(     TRT01A = as.factor(TRT01A),     SEX_DECODE = as.factor(SEX_DECODE)   )  lyt <- basic_table() |>   split_cols_by('TRT01A') |>   analyze(     vars = 'SEX_DECODE',     var_labels = 'Sex, n/Ns (%)',     show_labels = 'visible',     afun = response_by_var,     extra_args = list(resp_var = 'TRTEMFL'),     nested = FALSE   )  result <- build_table(lyt, ADAE)  result #>                     ARMA           ARMB         Placebo    #> —————————————————————————————————————————————————————————— #> Sex, n/Ns (%)                                              #>   Female        1/1 (100.0%)   3/3 (100.0%)   1/2 (50.0%)  #>   Male          1/2 (50.0%)    1/1 (100.0%)   1/1 (100.0%)"},{"path":"na.html/reference/rm_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Removal of Levels — rm_levels","title":"Removal of Levels — rm_levels","text":"custom function removing level inside pre step make_split_fun.","code":""},{"path":"na.html/reference/rm_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removal of Levels — rm_levels","text":"","code":"rm_levels(excl)"},{"path":"na.html/reference/rm_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removal of Levels — rm_levels","text":"excl Choose level(s) remove","code":""},{"path":"na.html/reference/rm_other_facets_fact.html","id":null,"dir":"Reference","previous_headings":"","what":"rm_other_facets_fact — rm_other_facets_fact","title":"rm_other_facets_fact — rm_other_facets_fact","text":"rm_other_facets_fact","code":""},{"path":"na.html/reference/rm_other_facets_fact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rm_other_facets_fact — rm_other_facets_fact","text":"","code":"rm_other_facets_fact(nm)"},{"path":"na.html/reference/rm_other_facets_fact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rm_other_facets_fact — rm_other_facets_fact","text":"nm character. names facets keep. facets removed","code":""},{"path":"na.html/reference/rm_other_facets_fact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rm_other_facets_fact — rm_other_facets_fact","text":"function suitable use within `post` portion make_split_fun","code":""},{"path":"na.html/reference/s_ancova_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Junco Extended ANCOVA Function — s_ancova_j","title":"Junco Extended ANCOVA Function — s_ancova_j","text":"Extension tern:::s_ancova, 3 extra statistics returned   * `lsmean_se`: Marginal mean estimated SE group.   * `lsmean_ci`: Marginal mean associated confidence interval group.   * `lsmean_diffci`: Difference mean associated confidence level one combined statistic.   addition, LS mean weights can specified.   addition, also NULL .ref_group can specified, lsmean_diff related estimates returned NA.","code":""},{"path":"na.html/reference/s_ancova_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Junco Extended ANCOVA Function — s_ancova_j","text":"","code":"s_ancova_j(   df,   .var,   .df_row,   variables,   .ref_group,   .in_ref_col,   conf_level,   interaction_y = FALSE,   interaction_item = NULL,   weights_emmeans = \"counterfactual\" )"},{"path":"na.html/reference/s_ancova_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Junco Extended ANCOVA Function — s_ancova_j","text":"df : need check inherit params tern::s_ancova .var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data set includes variables called .var variables. variables (named list string) list additional analysis variables, expected elements: arm (string) group variable, covariate adjusted means multiple groups summarized. Specifically, first level arm variable taken reference group. covariates (character) vector can contain single variable names (\"X1\"), /interaction terms indicated \"X1 * X2\". .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (flag)TRUE working reference level, FALSE otherwise. conf_level (proportion) confidence level interval. interaction_y (string flag) selected item inside interaction_item variable used select specific ANCOVA results. interaction needed, default option FALSE. interaction_item (string NULL) name variable interactions arm. interaction needed, default option NULL. weights_emmeans (`string`) argument [emmeans::emmeans()], `\"counterfactual\"` default.","code":""},{"path":"na.html/reference/s_ancova_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Junco Extended ANCOVA Function — s_ancova_j","text":"returns named list 8 statistics (3 extra compared `tern:::s_ancova()`).","code":""},{"path":[]},{"path":"na.html/reference/s_ancova_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Junco Extended ANCOVA Function — s_ancova_j","text":"","code":"library(dplyr) library(tern)  df <- iris |> filter(Species == \"virginica\") .df_row <- iris .var <- \"Petal.Length\" variables <- list(arm = \"Species\", covariates = \"Sepal.Length * Sepal.Width\") .ref_group <- iris |> filter(Species == \"setosa\") conf_level <- 0.95 s_ancova_j(df, .var, .df_row, variables, .ref_group, .in_ref_col = FALSE, conf_level) #> $n #> [1] 50 #> attr(,\"label\") #> [1] \"n\" #>  #> $lsmean #> [1] 5.071002 #> attr(,\"label\") #> [1] \"Adjusted Mean\" #>  #> $lsmean_se #> [1] 5.07100244 0.06041213 #> attr(,\"label\") #> [1] \"Adjusted Mean (SE)\" #>  #> $lsmean_ci #> [1] 5.071002 4.951593 5.190412 #> attr(,\"label\") #> [1] \"Adjusted Mean (95% CI)\" #>  #> $lsmean_diff #> [1] 3.062603 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means\" #>  #> $lsmean_diff_ci #> [1] 2.808526 3.316680 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means 95% CI\" #>  #> $lsmean_diffci #> [1] 3.062603 2.808526 3.316680 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means (95% CI)\" #>  #> $pval #> [1] 8.117283e-52 #> attr(,\"label\") #> [1] \"p-value\" #>"},{"path":"na.html/reference/s_eair100_levii_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Function for Exposure-Adjusted Incidence Rate — s_eair100_levii_j","title":"Statistical Function for Exposure-Adjusted Incidence Rate — s_eair100_levii_j","text":"function calculates exposure-adjusted incidence rates (EAIR) per 100 person-years specific level variable.","code":""},{"path":"na.html/reference/s_eair100_levii_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical Function for Exposure-Adjusted Incidence Rate — s_eair100_levii_j","text":"","code":"s_eair100_levii_j(   levii,   df,   .df_row,   .var,   .alt_df_full = NULL,   id = \"USUBJID\",   diff = FALSE,   conf_level = 0.95,   trt_var = NULL,   ctrl_grp = NULL,   cur_trt_grp = NULL,   inriskdiffcol = FALSE,   fup_var,   occ_var,   occ_dy )"},{"path":"na.html/reference/s_eair100_levii_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical Function for Exposure-Adjusted Incidence Rate — s_eair100_levii_j","text":"levii (`string`) specific level variable calculate EAIR . df (`data.frame`) data set containing analysis variables. .df_row (`data.frame`) data frame across columns given row split. .var (`string`) variable name passed `rtables`. .alt_df_full (`dataframe`) alternative dataset calculations. id (`string`) subject variable name. diff (`logical`) TRUE, risk difference calculations performed. conf_level (`proportion`) confidence level interval. trt_var (`string`) treatment variable name. ctrl_grp (`string`) control group value. cur_trt_grp (`string`) current treatment group value. inriskdiffcol (`logical`) flag indicating function called within risk difference column. fup_var (`string`) follow-variable name. occ_var (`string`) occurrence variable name. occ_dy (`string`) occurrence day variable name.","code":""},{"path":"na.html/reference/s_eair100_levii_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical Function for Exposure-Adjusted Incidence Rate — s_eair100_levii_j","text":"list containing following statistics: n_event: Number events person_years: Total person-years follow-eair: Exposure-adjusted incidence rate per 100 person-years eair_diff: Risk difference EAIR (diff=TRUE inriskdiffcol=TRUE) eair_diff_ci: Confidence interval risk difference (diff=TRUE inriskdiffcol=TRUE)","code":""},{"path":"na.html/reference/s_patyrs_j.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical Function for Patient Years — s_patyrs_j","title":"Statistical Function for Patient Years — s_patyrs_j","text":"function calculates patient years based provided data.","code":""},{"path":"na.html/reference/s_patyrs_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical Function for Patient Years — s_patyrs_j","text":"","code":"s_patyrs_j(   df,   .var,   id = \"USUBJID\",   .alt_df_full,   source = c(\"alt_df\", \"df\"),   inriskdiffcol = FALSE )"},{"path":"na.html/reference/s_patyrs_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical Function for Patient Years — s_patyrs_j","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) variable name containing patient years data. id (`string`) subject variable name. .alt_df_full (`dataframe`) alternative dataset calculations. source (`string`) source data, either \"alt_df\" \"df\". inriskdiffcol (`logical`) flag indicating function called within risk difference column.","code":""},{"path":"na.html/reference/s_patyrs_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical Function for Patient Years — s_patyrs_j","text":"list containing patient years statistics.","code":""},{"path":"na.html/reference/s_proportion_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"s_function for proportion of factor levels — s_proportion_factor","title":"s_function for proportion of factor levels — s_proportion_factor","text":"simple statistics function prepares numbers percentages   required format. denominator alternative counts data set   given row column split. total row shown, just total number shown (without 100","code":""},{"path":"na.html/reference/s_proportion_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s_function for proportion of factor levels — s_proportion_factor","text":"","code":"s_proportion_factor(   x,   .alt_df,   use_alt_counts = TRUE,   show_total = c(\"none\", \"top\", \"bottom\"),   total_label = \"Total\" )"},{"path":"na.html/reference/s_proportion_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"s_function for proportion of factor levels — s_proportion_factor","text":"x (`factor`) categorical variable want analyze. .alt_df (`data.frame`) alternative data frame used denominator calculation. use_alt_counts (`flag`) whether `.alt_df` used total, .e. denominator. , number non-missing values `x` used. show_total (`string`) show total level optionally top bottom factor levels. total_label (`string`) label use optional total level.","code":""},{"path":"na.html/reference/s_proportion_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"s_function for proportion of factor levels — s_proportion_factor","text":"[rtables::in_rows()] result proportion statistics.","code":""},{"path":[]},{"path":"na.html/reference/s_proportion_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"s_function for proportion of `TRUE` in logical vector — s_proportion_logical","title":"s_function for proportion of `TRUE` in logical vector — s_proportion_logical","text":"simple statistics function prepares numbers percentages   required format. denominator alternative counts data set   given row column split.","code":""},{"path":"na.html/reference/s_proportion_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"s_function for proportion of `TRUE` in logical vector — s_proportion_logical","text":"","code":"s_proportion_logical(x, label = \"Responders\", .alt_df)"},{"path":"na.html/reference/s_proportion_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"s_function for proportion of `TRUE` in logical vector — s_proportion_logical","text":"x (`logical`) binary variable want analyze. label (`string`) label use. .alt_df (`data.frame`) alternative data frame used denominator calculation.","code":""},{"path":"na.html/reference/s_proportion_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"s_function for proportion of `TRUE` in logical vector — s_proportion_logical","text":"[rtables::in_rows()] result proportion statistics.","code":""},{"path":[]},{"path":"na.html/reference/s_summarize_ancova_j.html","id":null,"dir":"Reference","previous_headings":"","what":"ANCOVA Summary Function — a_summarize_ancova_j","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"Combination tern::s_summary, ANCOVA based estimates mean diff columns, based ANCOVA function `s_ancova_j`","code":""},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"","code":"a_summarize_ancova_j(   df,   .var,   .df_row,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )  s_summarize_ancova_j(df, .var, .df_row, .ref_group, .in_ref_col, ...)"},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"df : need check inherit params tern::s_ancova .var (string) single variable name passed rtables requested statistics function. .df_row (data.frame) data set includes variables called .var variables. ref_path (`character`) path reference group. .spl_context (`environment`) split context environment. ... Additional arguments passed `s_ancova_j`. .stats (`character`) statistics calculate. .formats (`list`) formats statistics. .labels (`list`) labels statistics. .indent_mods (`list`) indentation modifications statistics. .ref_group (data.frame vector) data corresponding reference group. .in_ref_col (flag)TRUE working reference level, FALSE otherwise.","code":""},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"* `a_summarize_ancova_j()` returns corresponding list formatted [rtables::CellValue()]. returns statistics tern::s_summary(x), appended new statistics based upon ANCOVA","code":""},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"Combination tern::s_summary, ANCOVA based estimates mean diff columns, based ANCOVA function `s_ancova_j`","code":""},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"a_summarize_ancova_j(): Formatted analysis function used `afun`. Note junco specific `ref_path` `.spl_context` arguments used reference column information.","code":""},{"path":[]},{"path":"na.html/reference/s_summarize_ancova_j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANCOVA Summary Function — a_summarize_ancova_j","text":"","code":"basic_table() |>   split_cols_by(\"Species\") |>   add_colcounts() |>   analyze(     vars = \"Petal.Length\",     afun = a_summarize_ancova_j,     show_labels = \"hidden\",     na_str = tern::default_na_str(),     table_names = \"unadj\",     var_labels = \"Unadjusted comparison\",     extra_args = list(       variables = list(arm = \"Species\", covariates = NULL),       conf_level = 0.95,       .labels = c(lsmean = \"Mean\", lsmean_diff = \"Difference in Means\"),       ref_path = c(\"Species\", \"setosa\")     )   ) |>     analyze(       vars = \"Petal.Length\",       afun = a_summarize_ancova_j,       show_labels = \"hidden\",       na_str = tern::default_na_str(),       table_names = \"adj\",       var_labels = \"Adjusted comparison (covariates: Sepal.Length and Sepal.Width)\",       extra_args = list(         variables = list(           arm = \"Species\",           covariates = c(\"Sepal.Length\", \"Sepal.Width\")         ),         conf_level = 0.95,         ref_path = c(\"Species\", \"setosa\")       )     ) |>   build_table(iris) #>                                              setosa            versicolor           virginica     #>                                              (N=50)              (N=50)              (N=50)       #> ————————————————————————————————————————————————————————————————————————————————————————————————— #> n                                              50                  50                  50         #> Mean (SD)                                 1.46 (0.174)        4.26 (0.470)        5.55 (0.552)    #> Median                                        1.50                4.35                5.55        #> Min, max                                   1.00, 1.90          3.00, 5.10          4.50, 6.90     #> 25% and 75%-ile                            1.40, 1.60          4.00, 4.60          5.10, 5.90     #> Adjusted Mean (SE)                         1.46 (0.06)         4.26 (0.06)         5.55 (0.06)    #> Adjusted Mean (95% CI)                  1.46 (1.34, 1.58)   4.26 (4.14, 4.38)   5.55 (5.43, 5.67) #> Difference in Adjusted Means (95% CI)                       2.80 (2.63, 2.97)   4.09 (3.92, 4.26) #>   p-value                                                        <0.001              <0.001       #> n                                              50                  50                  50         #> Mean (SD)                                 1.46 (0.174)        4.26 (0.470)        5.55 (0.552)    #> Median                                        1.50                4.35                5.55        #> Min, max                                   1.00, 1.90          3.00, 5.10          4.50, 6.90     #> 25% and 75%-ile                            1.40, 1.60          4.00, 4.60          5.10, 5.90     #> Adjusted Mean (SE)                         2.02 (0.08)         4.19 (0.05)         5.07 (0.06)    #> Adjusted Mean (95% CI)                  2.02 (1.87, 2.17)   4.19 (4.09, 4.28)   5.07 (4.95, 5.18) #> Difference in Adjusted Means (95% CI)                       2.17 (1.96, 2.38)   3.05 (2.81, 3.29) #>   p-value                                                        <0.001              <0.001        library(dplyr) library(tern)  df <- iris |> filter(Species == \"virginica\") .df_row <- iris .var <- \"Petal.Length\" variables <- list(arm = \"Species\", covariates = \"Sepal.Length * Sepal.Width\") .ref_group <- iris |> filter(Species == \"setosa\") conf_level <- 0.95 s_summarize_ancova_j(   df,   .var = .var,   .df_row = .df_row,   variables = variables,   .ref_group = .ref_group,   .in_ref_col = FALSE,   conf_level = conf_level ) #> $n #>  n  #> 50  #>  #> $sum #>   sum  #> 277.6  #>  #> $mean #>  mean  #> 5.552  #>  #> $sd #>        sd  #> 0.5518947  #>  #> $se #>        se  #> 0.0780497  #>  #> $mean_sd #>      mean        sd  #> 5.5520000 0.5518947  #>  #> $mean_se #>      mean        se  #> 5.5520000 0.0780497  #>  #> $mean_ci #> mean_ci_lwr mean_ci_upr  #>    5.395153    5.708847  #> attr(,\"label\") #> [1] \"Mean 95% CI\" #>  #> $mean_sei #> mean_sei_lwr mean_sei_upr  #>      5.47395      5.63005  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSE\" #>  #> $mean_sdi #> mean_sdi_lwr mean_sdi_upr  #>     5.000105     6.103895  #> attr(,\"label\") #> [1] \"Mean -/+ 1xSD\" #>  #> $mean_ci_3d #>        mean mean_ci_lwr mean_ci_upr  #>    5.552000    5.395153    5.708847  #> attr(,\"label\") #> [1] \"Mean (95% CI)\" #>  #> $mean_pval #>      p_value  #> 4.093231e-51  #> attr(,\"label\") #> [1] \"Mean p-value (H0: mean = 0)\" #>  #> $median #> median  #>   5.55  #>  #> $mad #> mad  #>   0  #>  #> $median_ci #> median_ci_lwr median_ci_upr  #>           5.2           5.7  #> attr(,\"conf_level\") #> [1] 0.9671609 #> attr(,\"label\") #> [1] \"Median 95% CI\" #>  #> $median_ci_3d #>        median median_ci_lwr median_ci_upr  #>          5.55          5.20          5.70  #> attr(,\"label\") #> [1] \"Median (95% CI)\" #>  #> $quantiles #> quantile_0.25 quantile_0.75  #>           5.1           5.9  #> attr(,\"label\") #> [1] \"25% and 75%-ile\" #>  #> $iqr #> iqr  #> 0.8  #>  #> $range #> min max  #> 4.5 6.9  #>  #> $min #> min  #> 4.5  #>  #> $max #> max  #> 6.9  #>  #> $median_range #> median    min    max  #>   5.55   4.50   6.90  #> attr(,\"label\") #> [1] \"Median (Min - Max)\" #>  #> $cv #>       cv  #> 9.940466  #>  #> $geom_mean #> geom_mean  #>  5.525789  #>  #> $geom_sd #>  geom_sd  #> 1.102724  #>  #> $geom_mean_sd #> geom_mean   geom_sd  #>  5.525789  1.102724  #>  #> $geom_mean_ci #> mean_ci_lwr mean_ci_upr  #>    5.374343    5.681502  #> attr(,\"label\") #> [1] \"Geometric Mean 95% CI\" #>  #> $geom_cv #>  geom_cv  #> 9.801743  #>  #> $geom_mean_ci_3d #>   geom_mean mean_ci_lwr mean_ci_upr  #>    5.525789    5.374343    5.681502  #> attr(,\"label\") #> [1] \"Geometric Mean (95% CI)\" #>  #> $n #> [1] 50 #> attr(,\"label\") #> [1] \"n\" #>  #> $lsmean #> [1] 5.071002 #> attr(,\"label\") #> [1] \"Adjusted Mean\" #>  #> $lsmean_se #> [1] 5.07100244 0.06041213 #> attr(,\"label\") #> [1] \"Adjusted Mean (SE)\" #>  #> $lsmean_ci #> [1] 5.071002 4.951593 5.190412 #> attr(,\"label\") #> [1] \"Adjusted Mean (95% CI)\" #>  #> $lsmean_diff #> [1] 3.062603 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means\" #>  #> $lsmean_diff_ci #> [1] 2.808526 3.316680 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means 95% CI\" #>  #> $lsmean_diffci #> [1] 3.062603 2.808526 3.316680 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means (95% CI)\" #>  #> $pval #> [1] 8.117283e-52 #> attr(,\"label\") #> [1] \"p-value\" #>"},{"path":"na.html/reference/safe_prune_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","title":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","text":"Safely Prune Table Empty Table Message Needed","code":""},{"path":"na.html/reference/safe_prune_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","text":"","code":"safe_prune_table(   tt,   prune_func = prune_empty_level,   stop_depth = NA,   empty_msg = \" - No Data To Display - \",   spancols = FALSE )"},{"path":"na.html/reference/safe_prune_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","text":"tt (TableTree related class) TableTree object representing populated table. prune_func (function) function called subtree returns TRUE entire subtree removed. stop_depth (numeric(1)) depth subtrees checked pruning. Defaults NA indicates pruning happen levels. empty_msg character(1). message place table rows left pruning spancols logical(1). `empty_msg` spanned across table's columns (`TRUE`) placed rows row label (`FALSE`). Defaults `FALSE` currently.","code":""},{"path":"na.html/reference/safe_prune_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","text":"`tt` pruned based arguments, , pruning remove rows, TableTree column structure, one row containing empty message spanning columns","code":""},{"path":"na.html/reference/safe_prune_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely Prune Table With Empty Table Message If Needed — safe_prune_table","text":"","code":"# always prune prfun <- function(tt) TRUE  lyt <- basic_table() |>   split_cols_by('ARM') |>   split_cols_by('STRATA1') |>   split_rows_by('SEX') |>   analyze('AGE') tbl <- build_table(lyt, ex_adsl)  safe_prune_table(tbl, prfun) #>                               A: Drug X         B: Placebo         C: Combination    #>                             A     B     C     A      B     C      A       B      C   #> ———————————————————————————————————————————————————————————————————————————————————— #>  - No Data To Display -"},{"path":"na.html/reference/set_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Output Titles — set_titles","title":"Set Output Titles — set_titles","text":"Retrieves titles footnotes list specified titles              argument appends table tree specified obj argument.","code":""},{"path":"na.html/reference/set_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Output Titles — set_titles","text":"","code":"set_titles(obj, titles)"},{"path":"na.html/reference/set_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Output Titles — set_titles","text":"obj table tree titles footnotes appended. titles list object containing titles footnotes appended.","code":""},{"path":"na.html/reference/set_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Output Titles — set_titles","text":"table tree object specified obj argument, titles           footnotes appended.","code":""},{"path":[]},{"path":"na.html/reference/set_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Output Titles — set_titles","text":"","code":"# set_titles(obj, get_titles_csv(tblid))"},{"path":"na.html/reference/short_split_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortcut for Creating Custom Column Splits — short_split_result","title":"Shortcut for Creating Custom Column Splits — short_split_result","text":"short cut common use [rtables::make_split_result()] need create custom column splits different labels using full dataset column. automatically sets values, datasplit (using full dataset column), subset_exprs (using TRUE subsets) parameters make_split_result().","code":""},{"path":"na.html/reference/short_split_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortcut for Creating Custom Column Splits — short_split_result","text":"","code":"short_split_result(..., fulldf)"},{"path":"na.html/reference/short_split_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortcut for Creating Custom Column Splits — short_split_result","text":"... sequence named labels columns. fulldf (`data.frame`) `fulldf` used column.","code":""},{"path":"na.html/reference/short_split_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortcut for Creating Custom Column Splits — short_split_result","text":"result [rtables::make_split_result()].","code":""},{"path":"na.html/reference/smart_colwidths_1page.html","id":null,"dir":"Reference","previous_headings":"","what":"Colwidths for all columns to be forced on one page — smart_colwidths_1page","title":"Colwidths for all columns to be forced on one page — smart_colwidths_1page","text":"Colwidths columns forced one page","code":""},{"path":"na.html/reference/smart_colwidths_1page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colwidths for all columns to be forced on one page — smart_colwidths_1page","text":"","code":"smart_colwidths_1page(   tt,   fontspec,   col_gap = 6L,   rowlabel_width = inches_to_spaces(2, fontspec),   print_width_ins = ifelse(landscape, 11, 8.5) - 2.12,   landscape = FALSE,   lastcol_gap = TRUE )"},{"path":"na.html/reference/smart_colwidths_1page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colwidths for all columns to be forced on one page — smart_colwidths_1page","text":"tt TableTree object calculate column widths fontspec Font specification object col_gap Column gap spaces rowlabel_width Width row labels spaces print_width_ins Print width inches landscape Whether output landscape orientation lastcol_gap Whether include gap last column","code":""},{"path":"na.html/reference/string_to_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Case Conversion — string_to_title","title":"Title Case Conversion — string_to_title","text":"Title Case Conversion","code":""},{"path":"na.html/reference/string_to_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Case Conversion — string_to_title","text":"","code":"string_to_title(x)"},{"path":"na.html/reference/string_to_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Case Conversion — string_to_title","text":"x Input string","code":""},{"path":"na.html/reference/string_to_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Case Conversion — string_to_title","text":"String converted title case (first letter word capitalized)","code":""},{"path":"na.html/reference/summarize_coxreg_multivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","title":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","text":"Layout Generating Function TEFOS03 Related Cox Regression Layouts","code":""},{"path":"na.html/reference/summarize_coxreg_multivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","text":"","code":"summarize_coxreg_multivar(   lyt,   var,   variables,   control = control_coxreg(),   formats = list(coef_se = jjcsformat_xx(\"xx.xx (xx.xx)\"), hr_est =     jjcsformat_xx(\"xx.xx\"), hr_ci = jjcsformat_xx(\"(xx.xx, xx.xx)\"), pval =     jjcsformat_pval_fct(0)) )"},{"path":"na.html/reference/summarize_coxreg_multivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","text":"lyt (`layout`) input layout analyses added . var (`string`) variable data, used. variables (named `list` `string`) list additional analysis variables. control (`list`) relevant list control options. formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting.","code":""},{"path":"na.html/reference/summarize_coxreg_multivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","text":"Modified layout.","code":""},{"path":"na.html/reference/summarize_coxreg_multivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout Generating Function for TEFOS03 and Related Cox Regression Layouts — summarize_coxreg_multivar","text":"","code":"anl <- tern::tern_ex_adtte |>   dplyr::mutate(EVENT = 1 - CNSR)  variables <- list(   time = 'AVAL',   event = 'EVENT',   arm = 'ARM',   covariates = c('SEX', 'AGE') )  basic_table() |>   summarize_coxreg_multivar(     var = 'STUDYID',     variables = variables   ) |>   build_table(df = anl) #>                                                    Model Fit               Hazard Ratio       #>                                              Coeff. (SE)    p-value   Estimate      95% CI    #> ————————————————————————————————————————————————————————————————————————————————————————————— #> Model Parameter                                                                               #>   Treatment (B: Placebo vs. A: Drug X)       0.42 (0.09)    <0.001      1.52     (1.26, 1.83) #>   Treatment (C: Combination vs. A: Drug X)   0.66 (0.10)    <0.001      1.93     (1.59, 2.34) #>   Sex (M vs. F)                              -0.13 (0.08)    0.098      0.88     (0.76, 1.02) #>   Age                                        0.00 (0.01)     0.645      1.00     (0.99, 1.01)"},{"path":"na.html/reference/summarize_lsmeans_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","title":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","text":"Layout Generating Function LS Means Wide Table Layouts","code":""},{"path":"na.html/reference/summarize_lsmeans_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","text":"","code":"summarize_lsmeans_wide(   lyt,   variables,   ref_level,   treatment_levels,   conf_level,   pval_sided = \"2\",   include_variance = TRUE,   include_pval = TRUE,   formats = list(lsmean = jjcsformat_xx(\"xx.x\"), mse = jjcsformat_xx(\"xx.x\"), df =     jjcsformat_xx(\"xx.\"), lsmean_diff = jjcsformat_xx(\"xx.x\"), se =     jjcsformat_xx(\"xx.xx\"), ci = jjcsformat_xx(\"(xx.xx, xx.xx)\"), pval =     jjcsformat_pval_fct(0)) )"},{"path":"na.html/reference/summarize_lsmeans_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","text":"lyt empty layout, .e. result [rtables::basic_table()] variables (named `list` `string`) list additional analysis variables. ref_level (`string`) reference level treatment arm variable. treatment_levels (`character`) non-reference levels treatment arm variable. conf_level (`proportion`) confidence level interval. pval_sided (`string`) either '2' two-sided '1' 1-sided greater control '-1' 1-sided smaller control alternative hypothesis. include_variance (`flag`) whether include variance statistics (M.S. error d.f.). include_pval (`flag`) whether include p-value column. formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting.","code":""},{"path":"na.html/reference/summarize_lsmeans_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","text":"Modified layout.","code":""},{"path":"na.html/reference/summarize_lsmeans_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout Generating Function for LS Means Wide Table Layouts — summarize_lsmeans_wide","text":"","code":"variables <- list(   response = 'FEV1',   covariates = c('RACE', 'SEX'),   arm = 'ARMCD',   id = 'USUBJID',   visit = 'AVISIT' ) fit <- fit_ancova(   vars = variables,   data = mmrm::fev_data,   conf_level = 0.9,   weights_emmeans = 'equal' ) anl <- broom::tidy(fit) basic_table() |>   summarize_lsmeans_wide(     variables = variables,     ref_level = fit$ref_level,     treatment_levels = fit$treatment_levels,     pval_sided = '2',     conf_level = 0.8   ) |>   build_table(df = anl) #>            Reference Group             Testing Group                                                     Testing - Reference                    #>        Treatment   N    LS Mean   Treatment   N    LS Mean   M. S. Error   Error DF   LS Mean    SE       80% CI      2-sided p-value~[super a] #> ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> VIS1      PBO      68    33.2        TRT      66    36.8        41.2         129        3.7     1.13   (1.80, 5.56)             0.001           #>  #> VIS2      PBO      69    38.0        TRT      71    42.3        26.0         135        4.2     0.88   (2.79, 5.70)            <0.001           #>  #> VIS3      PBO      71    43.8        TRT      58    46.8        15.0         124        3.1     0.70   (1.89, 4.22)            <0.001           #>  #> VIS4      PBO      67    48.7        TRT      67    52.5        94.6         129        3.9     1.70   (1.07, 6.71)             0.024"},{"path":"na.html/reference/summarize_mmrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"`r lifecycle::badge('stable')` functions can used produce tables MMRM results, within tables split arms visits. helpful higher-level row splits needed (e.g. splits parameter subgroup).","code":""},{"path":"na.html/reference/summarize_mmrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"","code":"s_summarize_mmrm(   df,   .var,   variables,   ref_levels,   .spl_context,   alternative = c(\"two.sided\", \"less\", \"greater\"),   show_relative = c(\"reduction\", \"increase\"),   ... )  a_summarize_mmrm(   df,   .var,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"na.html/reference/summarize_mmrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. variables (named `list` `string`) list additional analysis variables. ref_levels (`list`) `visit` `arm` reference levels. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed. show_relative 'reduction' (`control - treatment`, default) 'increase' (`treatment - control`) shown relative change baseline? ... eventually passed [fit_mmrm_j()] via [h_summarize_mmrm()]. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative.","code":""},{"path":"na.html/reference/summarize_mmrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"* `a_summarize_mmrm()` returns corresponding list formatted [rtables::CellValue()].","code":""},{"path":"na.html/reference/summarize_mmrm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"s_summarize_mmrm(): Statistics function extracting estimates, including results reference visit, showing LS mean estimates reference arm reference visit. uses [s_lsmeans()] final processing. a_summarize_mmrm(): Formatted analysis function used `afun`.","code":""},{"path":"na.html/reference/summarize_mmrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic tabulation of MMRM results with tables — summarize_mmrm","text":"","code":"set.seed(123) longdat <- data.frame(   ID = rep(DM$ID, 5),   AVAL = c(     rep(0, nrow(DM)),     rnorm(n = nrow(DM) * 4)   ),   VISIT = factor(rep(paste0('V', 0:4), each = nrow(DM))) ) |>   dplyr::inner_join(DM, by = 'ID')  basic_table() |>   split_rows_by('VISIT') |>   split_cols_by('ARM') |>   analyze(     vars = 'AVAL',     afun = a_summarize_mmrm,     na_str = tern::default_na_str(),     show_labels = \"hidden\",     extra_args = list(       variables = list(         covariates = c('AGE'),         id = 'ID',         arm = 'ARM',         visit = 'VISIT'       ),       conf_level = 0.9,       cor_struct = 'toeplitz',       ref_levels = list(VISIT = 'V0', ARM = 'B: Placebo')     )   ) |>   build_table(longdat) |>   prune_table(all_zero) #>                                                   A: Drug X                B: Placebo             C: Combination     #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> V1                                                                                                                   #>   n                                                  121                      106                      129           #>   Adjusted Mean (SE)                            0.081 (0.090)            -0.139 (0.096)           0.104 (0.087)      #>     Adjusted Mean 90% CI                       (-0.066, 0.229)          (-0.297, 0.019)          (-0.039, 0.247)     #>     Adjusted Mean (90% CI)                  0.081 (-0.066, 0.229)    -0.139 (-0.297, 0.019)   0.104 (-0.039, 0.247)  #>   Difference in Adjusted Means (SE)             0.220 (0.132)                                     0.243 (0.130)      #>     Difference in Adjusted Means 90% CI         (0.004, 0.437)                                    (0.030, 0.457)     #>     Difference in Adjusted Means (90% CI)    0.220 (0.004, 0.437)                              0.243 (0.030, 0.457)  #>     Relative Reduction (%)                          158.6%                                            175.1%         #>     2-sided p-value                                 0.094                                             0.061          #> V2                                                                                                                   #>   n                                                  121                      106                      129           #>   Adjusted Mean (SE)                            -0.079 (0.090)           -0.124 (0.096)           0.076 (0.087)      #>     Adjusted Mean 90% CI                       (-0.226, 0.069)          (-0.282, 0.034)          (-0.067, 0.219)     #>     Adjusted Mean (90% CI)                  -0.079 (-0.226, 0.069)   -0.124 (-0.282, 0.034)   0.076 (-0.067, 0.219)  #>   Difference in Adjusted Means (SE)             0.046 (0.132)                                     0.200 (0.130)      #>     Difference in Adjusted Means 90% CI        (-0.171, 0.262)                                   (-0.013, 0.413)     #>     Difference in Adjusted Means (90% CI)   0.046 (-0.171, 0.262)                             0.200 (-0.013, 0.413)  #>     Relative Reduction (%)                          36.8%                                             161.0%         #>     2-sided p-value                                 0.728                                             0.123          #> V3                                                                                                                   #>   n                                                  121                      106                      129           #>   Adjusted Mean (SE)                            0.060 (0.090)            0.101 (0.096)            0.110 (0.087)      #>     Adjusted Mean 90% CI                       (-0.088, 0.208)          (-0.057, 0.259)          (-0.033, 0.253)     #>     Adjusted Mean (90% CI)                  0.060 (-0.088, 0.208)    0.101 (-0.057, 0.259)    0.110 (-0.033, 0.253)  #>   Difference in Adjusted Means (SE)             -0.041 (0.132)                                    0.009 (0.130)      #>     Difference in Adjusted Means 90% CI        (-0.257, 0.176)                                   (-0.204, 0.223)     #>     Difference in Adjusted Means (90% CI)   -0.041 (-0.257, 0.176)                            0.009 (-0.204, 0.223)  #>     Relative Reduction (%)                          40.3%                                             -9.1%          #>     2-sided p-value                                 0.757                                             0.943          #> V4                                                                                                                   #>   n                                                  121                      106                      129           #>   Adjusted Mean (SE)                            0.113 (0.090)            -0.133 (0.096)           -0.022 (0.087)     #>     Adjusted Mean 90% CI                       (-0.035, 0.260)          (-0.291, 0.025)          (-0.165, 0.121)     #>     Adjusted Mean (90% CI)                  0.113 (-0.035, 0.260)    -0.133 (-0.291, 0.025)   -0.022 (-0.165, 0.121) #>   Difference in Adjusted Means (SE)             0.245 (0.132)                                     0.111 (0.130)      #>     Difference in Adjusted Means 90% CI         (0.029, 0.462)                                   (-0.103, 0.324)     #>     Difference in Adjusted Means (90% CI)    0.245 (0.029, 0.462)                             0.111 (-0.103, 0.324)  #>     Relative Reduction (%)                          184.9%                                            83.5%          #>     2-sided p-value                                 0.062                                             0.393"},{"path":"na.html/reference/summarize_row_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout Creating Function Adding Row Counts — summarize_row_counts","title":"Layout Creating Function Adding Row Counts — summarize_row_counts","text":"simple wrapper [rtables::summarize_row_groups()] main additional value can choose whether want use alternative (usually ADSL) data set counts (default) use original data set.","code":""},{"path":"na.html/reference/summarize_row_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout Creating Function Adding Row Counts — summarize_row_counts","text":"","code":"summarize_row_counts(lyt, label_fstr = \"%s\", alt_counts = TRUE)"},{"path":"na.html/reference/summarize_row_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout Creating Function Adding Row Counts — summarize_row_counts","text":"lyt (`layout`) input layout analyses added . label_fstr (`string`) `sprintf` style format string. can contain one ` generates row label. alt_counts (`flag`) whether row counts taken `alt_counts_df` (`TRUE`) `df` (`FALSE`).","code":""},{"path":"na.html/reference/summarize_row_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout Creating Function Adding Row Counts — summarize_row_counts","text":"modified layout latest row split now contains counts.","code":""},{"path":"na.html/reference/summarize_row_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout Creating Function Adding Row Counts — summarize_row_counts","text":"","code":"basic_table() |>   split_cols_by('ARM') |>   add_colcounts() |>   split_rows_by('RACE', split_fun = drop_split_levels) |>   summarize_row_counts(label_fstr = 'RACE value - %s') |>   analyze('AGE', afun = list_wrap_x(summary), format = 'xx.xx') |>   build_table(DM, alt_counts_df = rbind(DM, DM)) #>                                          A: Drug X   B: Placebo   C: Combination #>                                           (N=242)     (N=212)        (N=258)     #> ———————————————————————————————————————————————————————————————————————————————— #> RACE value - ASIAN                          158         136            168       #>   Min.                                     20.00       21.00          22.00      #>   1st Qu.                                  29.00       28.00          30.00      #>   Median                                   33.00       32.50          33.50      #>   Mean                                     34.20       32.68          34.63      #>   3rd Qu.                                  38.50       36.00          38.00      #>   Max.                                     58.00       55.00          53.00      #> RACE value - BLACK OR AFRICAN AMERICAN      56           48             54       #>   Min.                                     23.00       21.00          24.00      #>   1st Qu.                                  29.00       28.75          29.00      #>   Median                                   33.00       30.00          32.00      #>   Mean                                     34.68       31.71          34.00      #>   3rd Qu.                                  37.25       36.25          39.00      #>   Max.                                     60.00       42.00          51.00      #> RACE value - WHITE                          28           28             36       #>   Min.                                     30.00       25.00          28.00      #>   1st Qu.                                  38.00       31.00          30.25      #>   Median                                   40.50       37.50          35.00      #>   Mean                                     39.36       36.93          35.11      #>   3rd Qu.                                  43.50       40.00          37.50      #>   Max.                                     47.00       55.00          47.00"},{"path":"na.html/reference/tabulate_lsmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulation of Least Square Means Results — tabulate_lsmeans","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"`r lifecycle::badge('stable')` functions can used produce tables LS means, e.g. [fit_mmrm_j()] [fit_ancova()].","code":""},{"path":"na.html/reference/tabulate_lsmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"","code":"# S3 method for class 'tern_model' tidy(x, ...)  s_lsmeans(   df,   .in_ref_col,   alternative = c(\"two.sided\", \"less\", \"greater\"),   show_relative = c(\"reduction\", \"increase\") )  a_lsmeans(   df,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"na.html/reference/tabulate_lsmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"x (`numeric`) vector numbers want analyze. ... additional arguments lower level functions. df (`data.frame`) data set containing analysis variables. .in_ref_col (`logical`) `TRUE` working reference level, `FALSE` otherwise. alternative (`string`) whether `two.sided`, one-sided `less` `greater` p-value displayed. show_relative 'reduction' (`control - treatment`, default) 'increase' (`treatment - control`) shown relative change baseline? ref_path (`character`) global reference group specification, see [get_ref_info()]. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative.","code":""},{"path":"na.html/reference/tabulate_lsmeans.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"tidy(tern_model): Helper method ([broom::tidy()]) prepare `data.frame` `tern_model` object containing least-squares means contrasts. s_lsmeans(): Statistics function extracting estimates tidied least-squares means data frame. a_lsmeans(): Formatted Analysis function used `afun`","code":""},{"path":"na.html/reference/tabulate_lsmeans.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"functions forked `tern.mmrm` package. Additional features   : * Additional `ref_path` argument [summarize_lsmeans()]   * function general also works LS means results ANCOVA   * Additional statistic `diff_mean_est_ci` returned   * P-value sidedness can chosen","code":""},{"path":"na.html/reference/tabulate_lsmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulation of Least Square Means Results — tabulate_lsmeans","text":"","code":"result <- fit_mmrm_j(   vars = list(     response = 'FEV1',     covariates = c('RACE', 'SEX'),     id = 'USUBJID',     arm = 'ARMCD',     visit = 'AVISIT'   ),   data = mmrm::fev_data,   cor_struct = 'unstructured',   weights_emmeans = 'equal' )  df <- broom::tidy(result)  s_lsmeans(df[8, ], .in_ref_col = FALSE) #> $n #> [1] 67 #>  #> $adj_mean_se #> [1] 52.78422  1.18776 #>  #> $adj_mean_ci #> [1] 50.43481 55.13362 #> attr(,\"label\") #> [1] \"Adjusted Mean 95% CI\" #>  #> $adj_mean_est_ci #> [1] 52.78422 50.43481 55.13362 #> attr(,\"label\") #> [1] \"Adjusted Mean (95% CI)\" #>  #> $diff_mean_se #> [1] 4.398457 1.680545 #>  #> $diff_mean_ci #> [1] 1.074493 7.722422 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means 95% CI\" #>  #> $diff_mean_est_ci #> [1] 4.398457 1.074493 7.722422 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means (95% CI)\" #>  #> $change #> [1] -0.09090396 #> attr(,\"label\") #> [1] \"Relative Reduction (%)\" #>  #> $p_value #> [1] 0.009886854 #> attr(,\"label\") #> [1] \"2-sided p-value\" #>  s_lsmeans(df[8, ], .in_ref_col = FALSE, alternative = \"greater\", show_relative = \"increase\") #> $n #> [1] 67 #>  #> $adj_mean_se #> [1] 52.78422  1.18776 #>  #> $adj_mean_ci #> [1] 50.43481 55.13362 #> attr(,\"label\") #> [1] \"Adjusted Mean 95% CI\" #>  #> $adj_mean_est_ci #> [1] 52.78422 50.43481 55.13362 #> attr(,\"label\") #> [1] \"Adjusted Mean (95% CI)\" #>  #> $diff_mean_se #> [1] 4.398457 1.680545 #>  #> $diff_mean_ci #> [1] 1.074493 7.722422 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means 95% CI\" #>  #> $diff_mean_est_ci #> [1] 4.398457 1.074493 7.722422 #> attr(,\"label\") #> [1] \"Difference in Adjusted Means (95% CI)\" #>  #> $change #> [1] 0.09090396 #> attr(,\"label\") #> [1] \"Relative Increase (%)\" #>  #> $p_value #> [1] 0.004943427 #> attr(,\"label\") #> [1] \"1-sided p-value (greater)\" #>   dat_adsl <- mmrm::fev_data |>   dplyr::select(USUBJID, ARMCD) |>   unique()  basic_table() |>   split_cols_by(\"ARMCD\") |>   add_colcounts() |>   split_rows_by(\"AVISIT\") |>   analyze(     \"AVISIT\",     afun = a_lsmeans,     show_labels = \"hidden\",     na_str = tern::default_na_str(),     extra_args = list(       .stats = c(         \"n\",         \"adj_mean_se\",         \"adj_mean_ci\",         \"diff_mean_se\",         \"diff_mean_ci\"       ),       .labels = c(         adj_mean_se = \"Adj. LS Mean (Std. Error)\",         adj_mean_ci = \"95% CI\",         diff_mean_ci = \"95% CI\"       ),       .formats = c(adj_mean_se = jjcsformat_xx(\"xx.x (xx.xx)\")),       alternative = \"greater\",       ref_path = c(\"ARMCD\", result$ref_level)     )   ) |>   build_table(     df = broom::tidy(result),     alt_counts_df = dat_adsl   ) #>                                             PBO                TRT        #>                                           (N=105)             (N=95)      #> ————————————————————————————————————————————————————————————————————————— #> VIS1                                                                      #>   n                                          68                 66        #>   Adj. LS Mean (Std. Error)             33.3 (0.76)        37.1 (0.76)    #>     95% CI                            (31.839, 34.825)   (35.599, 38.613) #>   Difference in Adjusted Means (SE)                       3.774 (1.074)   #>     95% CI                                                (1.651, 5.897)  #> VIS2                                                                      #>   n                                          69                 71        #>   Adj. LS Mean (Std. Error)             38.2 (0.61)        41.9 (0.60)    #>     95% CI                            (36.963, 39.380)   (40.713, 43.094) #>   Difference in Adjusted Means (SE)                       3.732 (0.859)   #>     95% CI                                                (2.035, 5.430)  #> VIS3                                                                      #>   n                                          71                 58        #>   Adj. LS Mean (Std. Error)             43.7 (0.46)        46.8 (0.51)    #>     95% CI                            (42.760, 44.588)   (45.748, 47.761) #>   Difference in Adjusted Means (SE)                       3.081 (0.690)   #>     95% CI                                                (1.716, 4.445)  #> VIS4                                                                      #>   n                                          67                 67        #>   Adj. LS Mean (Std. Error)             48.4 (1.19)        52.8 (1.19)    #>     95% CI                            (46.035, 50.737)   (50.435, 55.134) #>   Difference in Adjusted Means (SE)                       4.398 (1.681)   #>     95% CI                                                (1.074, 7.722)"},{"path":"na.html/reference/tabulate_rbmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulation of RBMI Results — tabulate_rbmi","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"`r lifecycle::badge('stable')` functions can used produce tables RBMI.","code":""},{"path":"na.html/reference/tabulate_rbmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"","code":"h_tidy_pool(x, visit_name, group_names)  s_rbmi_lsmeans(df, .in_ref_col, show_relative = c(\"reduction\", \"increase\"))  a_rbmi_lsmeans(   df,   ref_path,   .spl_context,   ...,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL )"},{"path":"na.html/reference/tabulate_rbmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"x (`list`) list pooled object `rbmi` analysis results. list includes analysis results, confidence level, hypothesis testing type. visit_name (`string`) single visit level. group_names (`character`) group levels. df (`data.frame`) input LS means results. .in_ref_col (`flag`) whether reference column specified. show_relative (`string`) 'reduction' (`control - treatment`, default) 'increase' (`treatment - control`) relative change baseline? ref_path (`character`) global reference group specification, see [get_ref_info()]. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. ... additional arguments lower level functions. .stats (`character`) statistics select table. .formats (named `character` `list`) formats statistics. See Details `analyze_vars` information `'auto'` setting. .labels (named `character`) labels statistics (without indent). .indent_mods (named `integer`) indent modifiers labels. Defaults 0, corresponds unmodified default behavior. Can negative.","code":""},{"path":"na.html/reference/tabulate_rbmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"`data.frame` results pooled analysis single visit. list statistics extracted tidied LS means data frame.","code":""},{"path":"na.html/reference/tabulate_rbmi.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"h_tidy_pool(): Helper function produce data frame results pool single visit. s_rbmi_lsmeans(): Statistics function extracting estimates tidied RBMI results data frame. a_rbmi_lsmeans(): Formatted Analysis function used `afun`.","code":""},{"path":"na.html/reference/tabulate_rbmi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tabulation of RBMI Results — tabulate_rbmi","text":"functions forked `tern.rbmi`. Additional features : * Additional `ref_path` argument. * Extraction variance statistics `tidy()` method. * Adapted `rbmi` forked functions update two treatment groups.","code":""},{"path":"na.html/reference/tefos03_afun.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis Function for TEFOS03 and Related Table Layouts — tefos03_afun","title":"Analysis Function for TEFOS03 and Related Table Layouts — tefos03_afun","text":"Analysis Function TEFOS03 Related Table Layouts","code":""},{"path":"na.html/reference/tefos03_afun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis Function for TEFOS03 and Related Table Layouts — tefos03_afun","text":"","code":"tefos03_afun(df, .var, .spl_context, variables, control, formats)"},{"path":"na.html/reference/tefos03_afun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis Function for TEFOS03 and Related Table Layouts — tefos03_afun","text":"df (`data.frame`) data set containing analysis variables. .var (`string`) single variable name passed `rtables` requested statistics function. .spl_context (`data.frame`) gives information ancestor split states passed `rtables`. variables (`list`) see [tern::fit_coxreg_multivar()] required variable specifications. control (`list`) [tern::control_coxreg()]. formats (`list`) including `coef_se`, `hr_est`, `hr_ci` `pval` formats.","code":""},{"path":"na.html/reference/tefos03_first_post_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"First Level Column Split Function for TEFOS03 (mmy) Table Layout — tefos03_first_post_fun","title":"First Level Column Split Function for TEFOS03 (mmy) Table Layout — tefos03_first_post_fun","text":"First Level Column Split Function TEFOS03 (mmy) Table Layout","code":""},{"path":"na.html/reference/tefos03_first_post_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First Level Column Split Function for TEFOS03 (mmy) Table Layout — tefos03_first_post_fun","text":"","code":"tefos03_first_post_fun(ret, spl, fulldf, .spl_context)"},{"path":[]},{"path":"na.html/reference/tefos03_second_split_fun_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Second Level Column Split Function Factory for TEFOS03 (mmy) Table Layout — tefos03_second_split_fun_fct","title":"Second Level Column Split Function Factory for TEFOS03 (mmy) Table Layout — tefos03_second_split_fun_fct","text":"Second Level Column Split Function Factory TEFOS03 (mmy) Table Layout","code":""},{"path":"na.html/reference/tefos03_second_split_fun_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second Level Column Split Function Factory for TEFOS03 (mmy) Table Layout — tefos03_second_split_fun_fct","text":"","code":"tefos03_second_split_fun_fct(conf_level)"},{"path":"na.html/reference/tefos03_second_split_fun_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Second Level Column Split Function Factory for TEFOS03 (mmy) Table Layout — tefos03_second_split_fun_fct","text":"conf_level (`proportion`) confidence level interval.","code":""},{"path":"na.html/reference/tefos03_second_split_fun_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Second Level Column Split Function Factory for TEFOS03 (mmy) Table Layout — tefos03_second_split_fun_fct","text":"Split function use TEFOS03 (mmy) related table layouts.","code":""},{"path":[]},{"path":"na.html/reference/tern_default_stats_formats_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"na.html/reference/tern_default_stats_formats_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","text":"","code":"tern_get_stats(   method_groups = \"analyze_vars_numeric\",   stats_in = NULL,   custom_stats_in = NULL,   add_pval = FALSE,   tern_defaults = tern_default_stats )  tern_get_formats_from_stats(   stats,   formats_in = NULL,   levels_per_stats = NULL,   tern_defaults = tern_default_formats )  tern_get_labels_from_stats(   stats,   labels_in = NULL,   levels_per_stats = NULL,   label_attr_from_stats = NULL,   tern_defaults = tern_default_labels )  tern_get_indents_from_stats(   stats,   indents_in = NULL,   levels_per_stats = NULL,   tern_defaults = stats::setNames(as.list(rep(0L, length(stats))), stats) )  tern_default_labels"},{"path":"na.html/reference/tern_default_stats_formats_labels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","text":"object class character length 40.","code":""},{"path":"na.html/reference/tern_default_stats_formats_labels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","text":"tern_get_stats(): Get statistics available given method group (analyze function). tern_get_formats_from_stats(): Get formats corresponding list statistics. tern_get_labels_from_stats(): Get labels corresponding list statistics. tern_get_indents_from_stats(): Get row indent modifiers corresponding list statistics/rows. tern_default_labels: Named `character` vector default labels `tern`. copied latest GitHub version, otherwise tern test fails.","code":""},{"path":"na.html/reference/tern_default_stats_formats_labels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get default statistical methods and their associated formats, labels, and indent modifiers — tern_default_stats_formats_labels","text":"functions copied `tern` package file   `utils_default_stats_formats_labels.R` GitHub development version 0.9.7.9017.   Slight modifications applied enhance functionality: * `tern_get_stats` added `tern_stats` argument avoid hardcoding within function's body.   * `tern_get_labels_from_stats` careful receiving partial `labels_in`      partial `label_attr_from_stats`. features included `tern` package, file removed   `junco` package, functions used `tern` namespace directly.","code":""},{"path":"na.html/reference/tidy.pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper method (for [`broom::tidy()`]) to prepare a data frame from an `pool` `rbmi` object containing the LS means and contrasts and multiple visits — tidy.pool","title":"Helper method (for [`broom::tidy()`]) to prepare a data frame from an `pool` `rbmi` object containing the LS means and contrasts and multiple visits — tidy.pool","text":"Helper method ([`broom::tidy()`]) prepare data frame   `pool` `rbmi` object containing LS means contrasts multiple visits","code":""},{"path":"na.html/reference/tidy.pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper method (for [`broom::tidy()`]) to prepare a data frame from an `pool` `rbmi` object containing the LS means and contrasts and multiple visits — tidy.pool","text":"","code":"# S3 method for class 'pool' tidy(x, visits, ...)"},{"path":"na.html/reference/tidy.pool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper method (for [`broom::tidy()`]) to prepare a data frame from an `pool` `rbmi` object containing the LS means and contrasts and multiple visits — tidy.pool","text":"x (`pool`) list pooled object `rbmi` analysis results. list includes analysis results, confidence level, hypothesis testing type. visits (`character`) visit levels. Otherwise hard guess . ... Additional arguments. used. Needed match generic signature .","code":""},{"path":"na.html/reference/tidy.pool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper method (for [`broom::tidy()`]) to prepare a data frame from an `pool` `rbmi` object containing the LS means and contrasts and multiple visits — tidy.pool","text":"`data.frame`.","code":""},{"path":"na.html/reference/tt_to_tbldf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create TableTree as DataFrame via gentlg — tt_to_tbldf","title":"Create TableTree as DataFrame via gentlg — tt_to_tbldf","text":"Create TableTree DataFrame via gentlg","code":""},{"path":"na.html/reference/tt_to_tbldf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create TableTree as DataFrame via gentlg — tt_to_tbldf","text":"","code":"tt_to_tbldf(   tt,   fontspec = font_spec(\"Times\", 9L, 1),   string_map = default_str_map,   markup_df = dps_markup_df )"},{"path":"na.html/reference/tt_to_tbldf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create TableTree as DataFrame via gentlg — tt_to_tbldf","text":"tt TableTree object convert data frame fontspec Font specification object string_map Unicode mapping special characters markup_df Data frame containing markup information","code":""},{"path":"na.html/reference/tt_to_tlgrtf.html","id":null,"dir":"Reference","previous_headings":"","what":"TableTree to .rtf Conversion — tt_to_tlgrtf","title":"TableTree to .rtf Conversion — tt_to_tlgrtf","text":"function convert TableTree .rtf","code":""},{"path":"na.html/reference/tt_to_tlgrtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TableTree to .rtf Conversion — tt_to_tlgrtf","text":"","code":"tt_to_tlgrtf(   tt,   file = file.path(\".\", tolower(tlg_type(tt))),   orientation = c(\"portrait\", \"landscape\"),   colwidths = def_colwidths(tt, fontspec, col_gap = col_gap, label_width_ins =     label_width_ins, type = tlgtype),   label_width_ins = 2,   watermark = NULL,   pagenum = ifelse(tlgtype == \"Listing\", TRUE, FALSE),   fontspec = font_spec(\"Times\", 9L, 1.2),   pg_width = pg_width_by_orient(orientation == \"landscape\"),   margins = c(0, 0, 0, 0),   paginate = tlg_type(tt) == \"Table\",   col_gap = ifelse(tlgtype == \"Listing\", 0.5, 3),   nosplitin = list(row = character(), col = character()),   verbose = FALSE,   tlgtype = tlg_type(tt),   string_map = default_str_map,   markup_df = dps_markup_df,   combined_rtf = FALSE,   one_table = TRUE,   border_mat = make_header_bordmat(obj = tt),   ... )"},{"path":"na.html/reference/tt_to_tlgrtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableTree to .rtf Conversion — tt_to_tlgrtf","text":"tt TableTree object convert RTF file character(1). File create, including path, excluding .rtf extension. orientation Orientation output (\"portrait\" \"landscape\") colwidths Column widths table label_width_ins Label width inches watermark (optional) String containing desired watermark RTF outputs. Vectorized. pagenum (optional) Logical. true page numbers added right side footer section format page x/y. Vectorized. (Default = FALSE) fontspec Font specification object pg_width Page width inches margins Margins inches (top, right, bottom, left) paginate Whether paginate output col_gap Column gap spaces nosplitin list(row=, col=). Path elements whose children paginated within can avoided. e.g., list(col=\"TRT01A\") means split within treatment arms unless associated columns fit single page. verbose Whether print verbose output tlgtype Type output (Table, Listing, Figure) string_map Unicode mapping special characters markup_df Data frame containing markup information combined_rtf logical(1). case result broken multiple parts due width, combined rtf file also created. Defaults `FALSE`. one_table logical(1). `tt` (non-`MatrixPrintForm`) list, parts added rtf within single table (`TRUE`, default) separate tables. End users generally need set . border_mat matrix. `m x k` matrix m number columns `tt` k number lines header takes . See [tidytlg::add_bottom_borders] matrix contain. Users specify default behavior meet needs. ... Additional arguments passed gentlg","code":""},{"path":"na.html/reference/tt_to_tlgrtf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TableTree to .rtf Conversion — tt_to_tlgrtf","text":"function aids converting rtables TableTree desired .rtf file.","code":""},{"path":"na.html/reference/tt_to_tlgrtf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"TableTree to .rtf Conversion — tt_to_tlgrtf","text":"`file` always include path. Path extracted passed separately `gentlg`. `one_table` `FALSE`, width row label   pseudocolumn can directly controlled due limitation   `tidytlg::gentlg`. proportion full page first value   colwidths take preserved columns equally   split remaining available width. cause, e.g.,   elements within allparts rtf generated `combined_rtf` `TRUE`   differ visually content individual part rtfs.","code":""},{"path":[]},{"path":"na.html/reference/var_relabel_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel Variables in a Dataset — var_relabel_list","title":"Relabel Variables in a Dataset — var_relabel_list","text":"function relabels variables dataset based provided list labels. can either replace existing labels add labels variables without .","code":""},{"path":"na.html/reference/var_relabel_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel Variables in a Dataset — var_relabel_list","text":"","code":"var_relabel_list(x, lbl_list, replace_existing = TRUE)"},{"path":"na.html/reference/var_relabel_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel Variables in a Dataset — var_relabel_list","text":"x (`data.frame`) dataset containing variables relabeled. lbl_list (`list`) named list labels apply variables. replace_existing (`logical`) TRUE, existing labels replaced; FALSE, variables without labels updated.","code":""},{"path":"na.html/reference/var_relabel_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel Variables in a Dataset — var_relabel_list","text":"dataset updated variable labels.","code":""},{"path":[]},{"path":"na.html/news/index.html","id":"initial-cran-release-0-0-1","dir":"Changelog","previous_headings":"","what":"Initial CRAN release","title":"junco 0.0.1","text":"First release junco package Table Listing (TL) Reporting Provides functions produce tables listings R Built rtables package framework Includes integration formatters, rtables, tidytlg, tern packages","code":""}]
