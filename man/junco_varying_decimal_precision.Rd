% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyze_varying_d.R, R/h_vard.R,
%   R/junco_default_formats_vard.R
\docType{data}
\name{a_summary_d_j}
\alias{a_summary_d_j}
\alias{junco_varying_decimal_precision}
\alias{a_summarize_ancova_d_j}
\alias{junco_default_formats_d}
\alias{junco_get_precision_df}
\alias{format_xxd}
\alias{xxd_to_xx}
\alias{h_get_d}
\alias{h_check_d}
\title{Utilities and analysis functions (\code{afuns}) for varying decimal precision}
\format{
\itemize{
\item \code{junco_default_formats_d} is a named vector of available default formats, with each element
named for their corresponding statistic. Both \code{xx.x} and \code{xx.d} style notation can be used, as well as formatting functions.
}
}
\usage{
a_summary_d_j(
  df,
  ...,
  .var,
  .df_row,
  .stats = NULL,
  .formats = NULL,
  .labels = NULL,
  .indent_mods = NULL,
  .format_defaults = junco_default_formats_d,
  formatting_fun = jjcsformat_xx,
  d = 1,
  d_unspecified = 0
)

a_summarize_ancova_d_j(
  df,
  .var,
  .df_row,
  ref_path,
  .spl_context,
  ...,
  .stats = NULL,
  .formats = NULL,
  .labels = NULL,
  .indent_mods = NULL,
  .format_defaults = junco_default_formats_d,
  formatting_fun = jjcsformat_xx,
  d = 1,
  d_unspecified = 0
)

junco_default_formats_d

junco_get_precision_df(df, decimal = 3, precisionby = NULL, precisionon)

format_xxd(str, d = 0, formatting_fun = NULL)

xxd_to_xx(str, d = 0)

h_get_d(d, .df_row, .var, d_unspecified = 0)

h_check_d(d, .var, d_unspecified = 0, msg_pre = NULL)
}
\arguments{
\item{df}{Input dataframe}

\item{...}{additional arguments for the lower level functions.}

\item{.var}{(\code{string})\cr Variable name to get the decimal precision from (only used when \code{d} is a named numeric vector.)}

\item{.df_row}{(\code{data.frame})\cr data frame across all of the columns for the given row split.}

\item{.stats}{(\code{character})\cr statistics to select for the table.}

\item{.formats}{(named \code{character} or \code{list})\cr formats for the statistics. See Details in \code{analyze_vars} for more
information on the \code{'auto'} setting.}

\item{.labels}{(named \code{character})\cr labels for the statistics (without indent).}

\item{.indent_mods}{(named \code{integer})\cr indent modifiers for the labels. Defaults to 0, which corresponds to the
unmodified default behavior. Can be negative.}

\item{.format_defaults}{Named vector of default formats (defaulted to \code{junco_default_formats_d}, but \code{tern::tern_default_formats} can be used as well.)}

\item{formatting_fun}{(NULL or \verb{function(1)})\cr A formatting function to apply after the xx.d to xx.x conversion.}

\item{d}{(\code{integer(1)})\cr Value of the decimal precision to use.}

\item{d_unspecified}{(\code{integer(1)})\cr Value to set when no misspecification is detected, but value remained unassigned.}

\item{ref_path}{(\code{character})\cr global reference group specification, see \code{\link[=get_ref_info]{get_ref_info()}}.}

\item{.spl_context}{(\code{data.frame})\cr gives information about ancestor split states
that is passed by \code{rtables}.}

\item{decimal}{Cap to the precision derivation}

\item{precisionby}{Grouping variable in the precision derivation process.}

\item{precisionon}{Variable for which the precision has to be calculated.}

\item{str}{(named \code{list})\cr Named list with strings with xx.d or xx notations, or formatting functions.}

\item{msg_pre}{(\code{string})\cr String to add to message when misspecification is detected.}
}
\value{
\itemize{
\item \code{a_summary_d_j()} returns the corresponding list with formatted \code{\link[rtables:CellValue]{rtables::CellValue()}}.
}

\itemize{
\item \code{a_summarize_ancova_d_j()} returns the corresponding list with formatted \code{\link[rtables:CellValue]{rtables::CellValue()}}.
}

\itemize{
\item \code{junco_get_precision_df()}: when precisionby is not null : a dataframe with precision by variables and data precision values, the variable "decimal" will contain the precision
otherwise \code{numeric(1)}
}

\itemize{
\item \code{format_xxd()}: A named \code{list} with xx.d strings converted to xx.x strings, and if not null, the formatting function \code{formatting_fun} applied to the string. Formatting functions remain unchanged.
}

\itemize{
\item \code{xxd_to_xx()}: A named \code{list} with xx.d strings converted to xx.x strings. Formatting functions remain unchanged.
}

\itemize{
\item \code{h_get_d()}: Returns the value for the decimal precision to use (\code{integer(1)}).
}

\itemize{
\item h_check_d(): \code{logical(1)} TRUE if no issues are detected.
}
}
\description{
Utilities and analysis functions (\code{afuns}) for varying decimal precision
}
\section{Functions}{
\itemize{
\item \code{a_summary_d_j()}: Junco specific analysis function as alternative to \code{tern::a_summary} that can handle varying decimal precision

\item \code{a_summarize_ancova_d_j()}: Junco specific analysis function as alternative to \code{tern:::a_ancova} that can handle varying decimal precision

\item \code{junco_default_formats_d}: Named list of junco default formats for various junco/tern based statistics (mainly for \code{tern::s_summary} and \code{ancova} methods).

\item \code{junco_get_precision_df()}: Get precision from data

\item \code{format_xxd()}: Convert xx.d notation to xx.x notation and apply formatting function

\item \code{xxd_to_xx()}: Convert xx.d notation to xx.x notation

\item \code{h_get_d()}: Get decimal precision from specification

\item \code{h_check_d()}: Check specifications for varying decimal precision

}}
\examples{
junco_get_precision_df(formatters::ex_adsl, precisionon = "BMRKR1", decimal = 1)
junco_get_precision_df(formatters::ex_adsl, precisionon = "BMRKR1", decimal = 7)
junco_get_precision_df(formatters::ex_adsl, precisionon = "AGE", decimal = 7)
prec_df <- junco_get_precision_df(formatters::ex_advs, 
precisionon = "AVAL", precisionby = c("PARAMCD"), decimal = 3) 
prec_df

}
\keyword{datasets}
\keyword{internal}
