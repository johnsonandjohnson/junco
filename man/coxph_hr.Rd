% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coxph_hr.R
\name{coxph_hr}
\alias{coxph_hr}
\alias{a_coxph_hr}
\alias{s_coxph_hr}
\title{Workaround statistics function to add HR with CI}
\usage{
a_coxph_hr(
  df,
  .var,
  ref_path,
  .spl_context,
  ...,
  .stats = NULL,
  .formats = NULL,
  .labels = NULL,
  .indent_mods = NULL
)

s_coxph_hr(
  df,
  .ref_group,
  .in_ref_col,
  .var,
  is_event,
  strata = NULL,
  control = control_coxph(),
  alternative = c("two.sided", "less", "greater")
)
}
\arguments{
\item{df}{(`data.frame`)\cr data set containing all analysis variables.}

\item{.var}{(`string`)\cr single variable name that is passed by `rtables` when requested
by a statistics function.}

\item{ref_path}{(`character`)\cr global reference group specification, see [get_ref_info()].}

\item{.spl_context}{(`data.frame`)\cr gives information about ancestor split states
that is passed by `rtables`.}

\item{...}{additional arguments for the lower level functions.}

\item{.stats}{(`character`)\cr statistics to select for the table.}

\item{.formats}{(named `character` or `list`)\cr formats for the statistics. See Details in `analyze_vars` for more
information on the `'auto'` setting.}

\item{.labels}{(named `character`)\cr labels for the statistics (without indent).}

\item{.indent_mods}{(named `integer`)\cr indent modifiers for the labels. Defaults to 0, which corresponds to the
unmodified default behavior. Can be negative.}

\item{.ref_group}{(`data.frame` or `vector`)\cr the data corresponding to the reference group.}

\item{.in_ref_col}{(`logical`)\cr `TRUE` when working with the reference level, `FALSE` otherwise.}

\item{is_event}{(`character`)\cr variable name storing Logical values: `TRUE` if event,
`FALSE` if time to event is censored.}

\item{strata}{(`character` or `NULL`)\cr variable names indicating stratification factors.}

\item{control}{(`list`)\cr relevant list of control options.}

\item{alternative}{(`string`)\cr whether `two.sided`, or one-sided `less` or `greater` p-value
should be displayed.}
}
\description{
This is a workaround for [tern::s_coxph_pairwise()], which adds a statistic
containing the hazard ratio estimate together with the confidence interval.
}
\section{Functions}{
\itemize{
\item \code{a_coxph_hr()}: Formatted analysis function which is used as `afun`.

\item \code{s_coxph_hr()}: Statistics function forked from [tern::s_coxph_pairwise()].
the difference is that:
1) It returns the additional statistic `lr_stat_df` (log rank statistic with degrees of freedom).

}}
\examples{
library(dplyr)

adtte_f <- tern::tern_ex_adtte |>
  filter(PARAMCD == "OS") |>
  mutate(is_event = CNSR == 0)

df <- adtte_f |> filter(ARMCD == 'ARM A')
df_ref_group <- adtte_f |> filter(ARMCD == 'ARM B')

basic_table() |>
  split_cols_by(var = 'ARMCD', ref_group = 'ARM A') |>
  add_colcounts() |>
  analyze("AVAL",
    afun = s_coxph_hr,
    extra_args = list(is_event = 'is_event'),
    var_labels = 'Unstratified Analysis',
    show_labels = 'visible'
  ) |>
  build_table(df = adtte_f)

  basic_table() |>
  split_cols_by(var = 'ARMCD', ref_group = 'ARM A') |>
  add_colcounts() |>
  analyze("AVAL",
          afun = s_coxph_hr,
          extra_args = list(is_event = 'is_event',
                            strata = 'SEX',
                            control = tern::control_coxph(pval_method = 'wald')),
          var_labels = 'Unstratified Analysis',
          show_labels = 'visible'
  ) |>
  build_table(df = adtte_f)
adtte_f <- tern::tern_ex_adtte |>
  dplyr::filter(PARAMCD == "OS") |>
  dplyr::mutate(is_event = CNSR == 0)
df <- adtte_f |> dplyr::filter(ARMCD == 'ARM A')
df_ref <- adtte_f |> dplyr::filter(ARMCD == 'ARM B')

s_coxph_hr(
  df = df,
  .ref_group = df_ref,
  .in_ref_col = FALSE,
  .var = 'AVAL',
  is_event = 'is_event',
  strata = NULL
)
}
