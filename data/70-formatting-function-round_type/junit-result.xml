<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="a_freq_resp_var_j" timestamp="2025-09-13T14:10:53Z" hostname="4b1fd581cab4" tests="9" skipped="0" failures="0" errors="0" time="0.638">
    <testcase time="0.185" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_as_expected_with_basic_usage"/>
    <testcase time="0.103" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_as_expected_with_basic_usage"/>
    <testcase time="0.00800000000000001" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_as_expected_with_basic_usage"/>
    <testcase time="0.069" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_with_factor_responses"/>
    <testcase time="0.0640000000000001" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_handles_missing_values_correctly"/>
    <testcase time="0.0429999999999997" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_errors_on_invalid_responses"/>
    <testcase time="0.0449999999999999" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_errors_when_resp_var_is_null"/>
    <testcase time="0.0610000000000004" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_with_drop_levels_parameter"/>
    <testcase time="0.0599999999999996" classname="a_freq_resp_var_j" name="a_freq_resp_var_j_works_with_riskdiff_parameter"/>
  </testsuite>
  <testsuite name="a_summarize_aval_chg_diff" timestamp="2025-09-13T14:10:54Z" hostname="4b1fd581cab4" tests="7" skipped="0" failures="0" errors="0" time="0.473">
    <testcase time="0.024" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_as_expected"/>
    <testcase time="0.189" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_as_expected"/>
    <testcase time="0.004" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_as_expected"/>
    <testcase time="0.25" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_with_ancova_TRUE"/>
    <testcase time="0.00099999999999989" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_with_ancova_TRUE"/>
    <testcase time="0.004" classname="a_summarize_aval_chg_diff" name="a_summarize_aval_chg_diff_j_works_with_ancova_TRUE"/>
  </testsuite>
  <testsuite name="analyze_values" timestamp="2025-09-13T14:10:55Z" hostname="4b1fd581cab4" tests="7" skipped="0" failures="0" errors="0" time="0.118">
    <testcase time="0.0249999999999999" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.0800000000000001" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.00300000000000011" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.00199999999999978" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.00300000000000011" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.00300000000000011" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
    <testcase time="0.00199999999999978" classname="analyze_values" name="analyze_values_correctly_modifies_layout_with_proper_formats"/>
  </testsuite>
  <testsuite name="ancova" timestamp="2025-09-13T14:10:55Z" hostname="4b1fd581cab4" tests="3" skipped="0" failures="0" errors="0" time="0.72">
    <testcase time="0.194" classname="ancova" name="fit_ancova_works_as_expected"/>
    <testcase time="0.00099999999999989" classname="ancova" name="fit_ancova_works_as_expected"/>
    <testcase time="0.525" classname="ancova" name="fit_ancova_works_as_expected"/>
  </testsuite>
  <testsuite name="ancova_rbmi" timestamp="2025-09-13T14:10:55Z" hostname="4b1fd581cab4" tests="7" skipped="0" failures="0" errors="0" time="0.091">
    <testcase time="0.0340000000000007" classname="ancova_rbmi" name="rbmi_ancova_single_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.00299999999999923" classname="ancova_rbmi" name="rbmi_ancova_single_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.0170000000000003" classname="ancova_rbmi" name="ancova_now_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.00999999999999979" classname="ancova_rbmi" name="ancova_now_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.00900000000000034" classname="ancova_rbmi" name="ancova_now_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.0149999999999997" classname="ancova_rbmi" name="ancova_now_works_also_with_multiple_treatment_arms"/>
    <testcase time="0.00300000000000011" classname="ancova_rbmi" name="ancova_now_works_also_with_multiple_treatment_arms"/>
  </testsuite>
  <testsuite name="blank_line" timestamp="2025-09-13T14:10:56Z" hostname="4b1fd581cab4" tests="15" skipped="0" failures="0" errors="0" time="0.787">
    <testcase time="0.248" classname="blank_line" name="insert_blank_line_works_as_expected"/>
    <testcase time="0.165999999999999" classname="blank_line" name="insert_blank_line_works_as_expected"/>
    <testcase time="0.226000000000001" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.125999999999999" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00300000000000011" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00300000000000011" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00199999999999978" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00300000000000011" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00300000000000011" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.000999999999999446" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00100000000000033" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00100000000000033" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.000999999999999446" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.00200000000000067" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
    <testcase time="0.000999999999999446" classname="blank_line" name="insert_blank_line_optionally_uses_custom_table_names"/>
  </testsuite>
  <testsuite name="cmp_functions" timestamp="2025-09-13T14:10:56Z" hostname="4b1fd581cab4" tests="4" skipped="0" failures="0" errors="0" time="0.304">
    <testcase time="0.221" classname="cmp_functions" name="cmp_split_fun_works_as_expected"/>
    <testcase time="0.0250000000000004" classname="cmp_functions" name="cmp_cfun_works_correctly_for_expected_column"/>
    <testcase time="0.0259999999999998" classname="cmp_functions" name="cmp_cfun_works_correctly_for_received_column"/>
    <testcase time="0.032" classname="cmp_functions" name="cmp_cfun_works_correctly_for_missing_column"/>
  </testsuite>
  <testsuite name="column_stats" timestamp="2025-09-13T14:10:57Z" hostname="4b1fd581cab4" tests="29" skipped="0" failures="0" errors="0" time="0.114">
    <testcase time="0.00900000000000034" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.00399999999999956" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.00199999999999978" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.00200000000000067" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.000999999999999446" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.00100000000000033" classname="column_stats" name="column_stats_returns_correct_row_values_for_AVAL_mean"/>
    <testcase time="0.00600000000000023" classname="column_stats" name="column_stats_excludes_Baseline_for_CHG_stat_N"/>
    <testcase time="0.00299999999999923" classname="column_stats" name="column_stats_excludes_Baseline_for_CHG_stat_N"/>
    <testcase time="0.00200000000000067" classname="column_stats" name="column_stats_excludes_Baseline_for_CHG_stat_N"/>
    <testcase time="0.00199999999999978" classname="column_stats" name="column_stats_excludes_Baseline_for_CHG_stat_N"/>
    <testcase time="0.00199999999999978" classname="column_stats" name="column_stats_excludes_Baseline_for_CHG_stat_N"/>
    <testcase time="0.00700000000000056" classname="column_stats" name="column_stats_calculates_SD_statistic_correctly"/>
    <testcase time="0.00699999999999967" classname="column_stats" name="column_stats_calculates_mean_sd_statistic_correctly"/>
    <testcase time="0.00699999999999967" classname="column_stats" name="column_stats_calculates_SE_statistic_correctly"/>
    <testcase time="0.00700000000000056" classname="column_stats" name="column_stats_calculates_Med_Min_Max_correctly"/>
    <testcase time="0.00399999999999956" classname="column_stats" name="column_stats_calculates_Med_Min_Max_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_calculates_Med_Min_Max_correctly"/>
    <testcase time="0.00699999999999967" classname="column_stats" name="column_stats_handles_BASE_variable_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_BASE_variable_correctly"/>
    <testcase time="0.00600000000000023" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00299999999999923" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00200000000000067" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00299999999999923" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00300000000000011" classname="column_stats" name="column_stats_handles_iec_round_type_correctly"/>
    <testcase time="0.00600000000000023" classname="column_stats" name="calc_N_returns_NULL_for_non_AVAL_variables"/>
  </testsuite>
  <testsuite name="colwidths" timestamp="2025-09-13T14:10:57Z" hostname="4b1fd581cab4" tests="11" skipped="0" failures="0" errors="0" time="0.527">
    <testcase time="0.147" classname="colwidths" name="ttype_wrap_vec_works_as_expected"/>
    <testcase time="0.0549999999999997" classname="colwidths" name="check_wrap_nobreak_works_as_expected"/>
    <testcase time="0.0510000000000002" classname="colwidths" name="check_wrap_nobreak_works_as_expected"/>
    <testcase time="0.0720000000000001" classname="colwidths" name="def_colwidths_works_as_expected"/>
    <testcase time="0.102" classname="colwidths" name="listing_column_widths_works_as_expected"/>
    <testcase time="0.00299999999999923" classname="colwidths" name="listing_column_widths_works_as_expected"/>
    <testcase time="0.0660000000000007" classname="colwidths" name="find_free_colspc_works_as_expected"/>
    <testcase time="0.00800000000000001" classname="colwidths" name="smart_colwidths_1page_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="colwidths" name="smart_colwidths_1page_works_as_expected"/>
    <testcase time="0.00699999999999967" classname="colwidths" name="smart_colwidths_1page_works_as_expected"/>
    <testcase time="0.0130000000000008" classname="colwidths" name="spaces_to_inches_works_as_expected"/>
  </testsuite>
  <testsuite name="count_pct" timestamp="2025-09-13T14:10:57Z" hostname="4b1fd581cab4" tests="24" skipped="0" failures="1" errors="0" time="8.336">
    <testcase time="0.276999999999999" classname="count_pct" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.2" classname="count_pct" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.204000000000001" classname="count_pct" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.113" classname="count_pct" name="a_freq_j_with_specific_val_CHN_and_denom_option"/>
    <testcase time="0.169" classname="count_pct" name="a_freq_j_with_specific_val_CHN_and_denom_option"/>
    <testcase time="0.121" classname="count_pct" name="a_freq_j_with_specific_val_CHN_and_denom_option"/>
    <testcase time="0.167" classname="count_pct" name="a_freq_j_with_N_only"/>
    <testcase time="0.162" classname="count_pct" name="a_freq_j_with_N_only"/>
    <testcase time="0.186" classname="count_pct" name="a_freq_j_with_TotCol_only"/>
    <testcase time="0.187" classname="count_pct" name="a_freq_j_with_TotCol_only"/>
    <testcase time="1.153" classname="count_pct" name="a_freq_j_as_cfun"/>
    <testcase time="1.147" classname="count_pct" name="a_freq_j_as_cfun"/>
    <testcase time="0.134" classname="count_pct" name="a_freq_j_with_label_map"/>
    <testcase time="0.120000000000001" classname="count_pct" name="a_freq_j_with_label_map"/>
    <testcase time="0.203999999999999" classname="count_pct" name="a_freq_j_old_count_pats_case_"/>
    <testcase time="0.202" classname="count_pct" name="a_freq_j_old_count_pats_case_"/>
    <testcase time="0.211" classname="count_pct" name="a_freq_j_old_count_pats_case_"/>
    <testcase time="0.791" classname="count_pct" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.622999999999999" classname="count_pct" name="a_freq_j_with_N_subgroup_as_denom">
      <failure type="failure" message="Snapshot of code has changed: ('test-count_pct.R:287:3')">Snapshot of code has changed:
old[18:27] vs new[18:27]
    M                                                                
      CHN              26/46 (56.5%)   30/48 (62.5%)   25/53 (47.2%) 
      USA               3/46 (6.5%)    5/48 (10.4%)     7/53 (13.2%) 
-     BRA              6/46 (13.0%)     3/48 (6.3%)     5/53 (9.4%)  
+     BRA              6/46 (13.0%)     3/48 (6.2%)     5/53 (9.4%)  
      PAK               3/46 (6.5%)     4/48 (8.3%)     5/53 (9.4%)  
      NGA               3/46 (6.5%)     2/48 (4.2%)     6/53 (11.3%) 
-     RUS               1/46 (2.2%)     3/48 (6.3%)     1/53 (1.9%)  
+     RUS               1/46 (2.2%)     3/48 (6.2%)     1/53 (1.9%)  
      JPN               1/46 (2.2%)     0/48 (0.0%)     2/53 (3.8%)  
      GBR               2/46 (4.3%)     1/48 (2.1%)     1/53 (1.9%)  
      CAN               1/46 (2.2%)     0/48 (0.0%)     1/53 (1.9%)  

* Run `testthat::snapshot_accept('count_pct')` to accept the change.
* Run `testthat::snapshot_review('count_pct')` to interactively review the change.</failure>
    </testcase>
    <testcase time="0.579000000000001" classname="count_pct" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="1.15" classname="count_pct" name="a_freq_j_with_N_trt_as_denom_special_situation"/>
    <testcase time="0.106" classname="count_pct" name="a_freq_j_with_N_trt_as_denom_special_situation"/>
    <testcase time="0.125999999999999" classname="count_pct" name="a_freq_j_with_keep_levels_CHN_NGA_"/>
    <testcase time="0.00399999999999956" classname="count_pct" name="a_freq_j_with_keep_levels_CHN_NGA_"/>
  </testsuite>
  <testsuite name="count_pct_relrisk" timestamp="2025-09-13T14:11:06Z" hostname="4b1fd581cab4" tests="14" skipped="0" failures="0" errors="0" time="3.235">
    <testcase time="0.239000000000001" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.00300000000000011" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.218" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.0129999999999999" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.214" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.00399999999999956" classname="count_pct_relrisk" name="a_freq_j_with_val_NA_and_denom_option"/>
    <testcase time="0.215999999999999" classname="count_pct_relrisk" name="a_freq_j_with_risk_difference_method_cmh"/>
    <testcase time="0.00600000000000023" classname="count_pct_relrisk" name="a_freq_j_with_risk_difference_method_cmh"/>
    <testcase time="0.778" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.00200000000000067" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.779999999999999" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.00300000000000011" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.757000000000001" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
    <testcase time="0.00199999999999889" classname="count_pct_relrisk" name="a_freq_j_with_N_subgroup_as_denom"/>
  </testsuite>
  <testsuite name="coxph_hr" timestamp="2025-09-13T14:11:09Z" hostname="4b1fd581cab4" tests="8" skipped="0" failures="0" errors="0" time="0.323">
    <testcase time="0.0289999999999999" classname="coxph_hr" name="s_coxph_hr_works_with_default_arguments_and_no_stratification_factors"/>
    <testcase time="0.0210000000000008" classname="coxph_hr" name="s_coxph_hr_works_with_default_arguments_and_no_stratification_factors"/>
    <testcase time="0.00799999999999912" classname="coxph_hr" name="s_coxph_hr_works_with_default_arguments_and_no_stratification_factors"/>
    <testcase time="0.00799999999999912" classname="coxph_hr" name="s_coxph_hr_works_with_default_arguments_and_no_stratification_factors"/>
    <testcase time="0.0730000000000004" classname="coxph_hr" name="a_coxph_hr_works_with_custom_arguments_and_stratification_factors"/>
    <testcase time="0.0560000000000009" classname="coxph_hr" name="a_coxph_hr_works_with_custom_arguments_and_stratification_factors"/>
    <testcase time="0.0640000000000001" classname="coxph_hr" name="a_coxph_hr_works_with_stratification_factors_for_Log_Rank_test"/>
    <testcase time="0.0640000000000001" classname="coxph_hr" name="a_coxph_hr_works_with_stratification_factors_for_Log_Rank_test"/>
  </testsuite>
  <testsuite name="coxreg_multivar" timestamp="2025-09-13T14:11:09Z" hostname="4b1fd581cab4" tests="15" skipped="0" failures="0" errors="0" time="1.657">
    <testcase time="0.0679999999999978" classname="coxreg_multivar" name="h_extract_coxreg_multivar_works_as_expected"/>
    <testcase time="0.198" classname="coxreg_multivar" name="tefos03_first_split_fun_works_as_expected"/>
    <testcase time="0.0229999999999997" classname="coxreg_multivar" name="tefos03_first_split_fun_works_as_expected"/>
    <testcase time="0.0390000000000015" classname="coxreg_multivar" name="tefos03_first_split_fun_works_as_expected"/>
    <testcase time="0.456" classname="coxreg_multivar" name="tefos03_second_split_fun_fct_works_as_expected"/>
    <testcase time="0.0300000000000011" classname="coxreg_multivar" name="tefos03_second_split_fun_fct_works_as_expected"/>
    <testcase time="0.0559999999999974" classname="coxreg_multivar" name="tefos03_second_split_fun_fct_works_as_expected"/>
    <testcase time="0.0240000000000009" classname="coxreg_multivar" name="tefos03_afun_works_as_expected"/>
    <testcase time="0.022000000000002" classname="coxreg_multivar" name="tefos03_afun_works_as_expected"/>
    <testcase time="0.139999999999997" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_as_expected_with_defaults"/>
    <testcase time="0.0750000000000028" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_as_expected_with_defaults"/>
    <testcase time="0.0939999999999976" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_as_expected_with_custom_options"/>
    <testcase time="0.0750000000000028" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_as_expected_with_custom_options"/>
    <testcase time="0.222999999999999" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_with_row_splits"/>
    <testcase time="0.134" classname="coxreg_multivar" name="summarize_coxreg_multivar_works_with_row_splits"/>
  </testsuite>
  <testsuite name="estimate_proportion_diff" timestamp="2025-09-13T14:11:11Z" hostname="4b1fd581cab4" tests="6" skipped="0" failures="0" errors="0" time="0.171">
    <testcase time="0.00999999999999801" classname="estimate_proportion_diff" name="s_proportion_diff_j_works_as_expected"/>
    <testcase time="0.0330000000000013" classname="estimate_proportion_diff" name="s_proportion_diff_j_works_as_expected"/>
    <testcase time="0.00400000000000134" classname="estimate_proportion_diff" name="s_proportion_diff_j_works_as_expected"/>
    <testcase time="0.0329999999999977" classname="estimate_proportion_diff" name="s_proportion_diff_j_works_as_expected"/>
    <testcase time="0.0459999999999994" classname="estimate_proportion_diff" name="a_proportion_diff_j_works_as_expected_in_a_table_layout"/>
    <testcase time="0.0450000000000017" classname="estimate_proportion_diff" name="a_proportion_diff_j_works_as_expected_in_a_table_layout"/>
  </testsuite>
  <testsuite name="event_free" timestamp="2025-09-13T14:11:11Z" hostname="4b1fd581cab4" tests="8" skipped="0" failures="0" errors="0" time="0.407">
    <testcase time="0.0159999999999982" classname="event_free" name="s_event_free_works_with_default_arguments"/>
    <testcase time="0.0210000000000008" classname="event_free" name="s_event_free_works_with_default_arguments"/>
    <testcase time="0.0100000000000016" classname="event_free" name="s_event_free_works_with_percent_format"/>
    <testcase time="0.0199999999999996" classname="event_free" name="s_event_free_works_with_percent_format"/>
    <testcase time="0.106999999999999" classname="event_free" name="a_event_free_works_with_default_arguments_in_a_table_layout"/>
    <testcase time="0.0629999999999988" classname="event_free" name="a_event_free_works_with_default_arguments_in_a_table_layout"/>
    <testcase time="0.107000000000003" classname="event_free" name="a_event_free_works_with_customized_arguments_in_a_table_layout"/>
    <testcase time="0.0629999999999988" classname="event_free" name="a_event_free_works_with_customized_arguments_in_a_table_layout"/>
  </testsuite>
  <testsuite name="get_ref_info" timestamp="2025-09-13T14:11:11Z" hostname="4b1fd581cab4" tests="5" skipped="0" failures="0" errors="0" time="0.52">
    <testcase time="0.117999999999999" classname="get_ref_info" name="get_ref_info_works_with_a_df_analysis_function"/>
    <testcase time="0.0860000000000021" classname="get_ref_info" name="get_ref_info_works_with_a_df_analysis_function"/>
    <testcase time="0.137999999999998" classname="get_ref_info" name="get_ref_info_works_with_a_vector_analysis_function"/>
    <testcase time="0.116" classname="get_ref_info" name="get_ref_info_works_with_a_vector_analysis_function"/>
    <testcase time="0.0620000000000012" classname="get_ref_info" name="get_ref_info_works_with_a_vector_analysis_function"/>
  </testsuite>
  <testsuite name="h_freq_funs" timestamp="2025-09-13T14:11:12Z" hostname="4b1fd581cab4" tests="18" skipped="0" failures="0" errors="0" time="0.082">
    <testcase time="0.0100000000000016" classname="h_freq_funs" name="h_update_factor_works_correctly"/>
    <testcase time="0.00199999999999889" classname="h_freq_funs" name="h_update_factor_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_update_factor_works_correctly"/>
    <testcase time="0.0069999999999979" classname="h_freq_funs" name="h_df_add_newlevels_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_df_add_newlevels_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_df_add_newlevels_works_correctly"/>
    <testcase time="0.00400000000000134" classname="h_freq_funs" name="h_df_add_newlevels_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_df_add_newlevels_works_correctly"/>
    <testcase time="0.00600000000000023" classname="h_freq_funs" name="h_colexpr_substr_works_correctly"/>
    <testcase time="0.00199999999999889" classname="h_freq_funs" name="h_colexpr_substr_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_colexpr_substr_works_correctly"/>
    <testcase time="0.00600000000000023" classname="h_freq_funs" name="h_get_label_map_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_get_label_map_works_correctly"/>
    <testcase time="0.00700000000000145" classname="h_freq_funs" name="h_subset_combo_works_correctly"/>
    <testcase time="0.00399999999999778" classname="h_freq_funs" name="h_subset_combo_works_correctly"/>
    <testcase time="0.00300000000000011" classname="h_freq_funs" name="h_subset_combo_works_correctly"/>
    <testcase time="0.00400000000000134" classname="h_freq_funs" name="h_subset_combo_works_correctly"/>
    <testcase time="0.00900000000000034" classname="h_freq_funs" name="h_subset_combo_works_correctly"/>
  </testsuite>
  <testsuite name="jjcs_num_formats" timestamp="2025-09-13T14:11:12Z" hostname="4b1fd581cab4" tests="16" skipped="0" failures="0" errors="0" time="0.97">
    <testcase time="0.0539999999999985" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.00500000000000256" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.00499999999999901" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.148" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.238" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.00499999999999901" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.00600000000000023" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.00700000000000145" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.0599999999999987" classname="jjcs_num_formats" name="jjcs_num_formats_works"/>
    <testcase time="0.036999999999999" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.00700000000000145" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.0510000000000019" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.075999999999997" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.0370000000000026" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.0679999999999978" classname="jjcs_num_formats" name="jjcsformats_NA_works"/>
    <testcase time="0.166" classname="jjcs_num_formats" name="jjcsformats_count_fraction_works"/>
  </testsuite>
  <testsuite name="jjcsformats" timestamp="2025-09-13T14:11:13Z" hostname="4b1fd581cab4" tests="21" skipped="0" failures="0" errors="0" time="0.613">
    <testcase time="0.216000000000001" classname="jjcsformats" name="jjjcs_formats_work"/>
    <testcase time="0.0350000000000001" classname="jjcsformats" name="jjjcs_formats_work"/>
    <testcase time="0.0359999999999978" classname="jjcsformats" name="jjjcs_formats_work"/>
    <testcase time="0.0840000000000032" classname="jjcsformats" name="jjjcs_formats_work"/>
    <testcase time="0.00599999999999667" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00400000000000134" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="round_type_support_works"/>
    <testcase time="0.0470000000000006" classname="jjcsformats" name="jjcsformat_range_fct_is_formatting_ranges_as_expected"/>
    <testcase time="0.0939999999999976" classname="jjcsformats" name="jjcsformat_pval_fct_works"/>
    <testcase time="0.00600000000000023" classname="jjcsformats" name="some_special_cases_for_jjcsformat_pval_fct"/>
    <testcase time="0.00300000000000011" classname="jjcsformats" name="some_special_cases_for_jjcsformat_pval_fct"/>
    <testcase time="0.00500000000000256" classname="jjcsformats" name="some_special_cases_for_jjcsformat_pval_fct"/>
    <testcase time="0.0449999999999982" classname="jjcsformats" name="some_special_cases_for_jjcsformat_pval_fct"/>
    <testcase time="0.00600000000000023" classname="jjcsformats" name="jjcsformat_xx_works_also_for_empty_cells"/>
    <testcase time="0.00499999999999901" classname="jjcsformats" name="jjcsformat_xx_works_also_for_cells_with_0_length_vectors"/>
  </testsuite>
  <testsuite name="junco_utils_default_stats_formats_labels" timestamp="2025-09-13T14:11:14Z" hostname="4b1fd581cab4" tests="6" skipped="0" failures="1" errors="0" time="0.167">
    <testcase time="0.0280000000000022" classname="junco_utils_default_stats_formats_labels" name="get_stats_works_as_expected"/>
    <testcase time="0.0380000000000003" classname="junco_utils_default_stats_formats_labels" name="get_formats_from_stats_works_as_expected">
      <failure type="failure" message="Snapshot of code has changed: ('test-junco_utils_default_stats_formats_labels.R:18:3')">Snapshot of code has changed:
old[2:51] vs new[2:42]
    res
  Output
    $quantiles_upper
-   function(
-           x,
-           output,
-           round_type = c("sas", "iec"),
-           na_str = na_str_dflt) {
-         if (anyNA(na_str) || (replace_na_dflt &amp;&amp; any(na_str == "NA"))) {
-           na_inds &lt;- which(is.na(na_str) | (replace_na_dflt &amp; na_str == "NA"))
+   function (x, output, round_type = c("sas", "iec"), na_str = na_str_dflt) 
+   {
+       if (anyNA(na_str) || (replace_na_dflt &amp;&amp; any(na_str == "NA"))) {
+           na_inds &lt;- which(is.na(na_str) | (replace_na_dflt &amp; na_str == 
+               "NA"))
            na_str[na_inds] &lt;- rep(na_str_dflt, length.out = length(na_str))[na_inds]
-         }
+       }
-         if (length(x) == 0 || isTRUE(all(x == ""))) {
+       if (length(x) == 0 || isTRUE(all(x == ""))) {
            return(NULL)
-         } else if (!length(positions[[1]]) == length(x)) {
-           stop(
-             "Error: input str in call to jjcsformat_xx must contain same number of xx as the number of stats."
-           )
-         }
-         
-         round_type &lt;- match.arg(round_type)
-         
-         values &lt;- Map(y = x, fun = roundings, na_str = na_str, function(y, fun, na_str, output)
-           fun(y, na_str = na_str, round_type = round_type))
-         
-         regmatches(x = str, m = positions)[[1]] &lt;- values
-         return(str)
        }
+       else if (!length(positions[[1]]) == length(x)) {
+           stop("Error: input str in call to jjcsformat_xx must contain same number of xx as the number of stats.")
+       }
+       round_type &lt;- match.arg(round_type)
+       values &lt;- Map(y = x, fun = roundings, na_str = na_str, function(y, 
+           fun, na_str, output) fun(y, na_str = na_str, round_type = round_type))
+       regmatches(x = str, m = positions)[[1]] &lt;- values
+       return(str)
+   }
    &lt;environment: base&gt;
    
    $range_with_cens_info
-   function(x, output, round_type = c("iec", "sas"), ...) {
+   function (x, output, round_type = c("iec", "sas"), ...) 
+   {
        round_type &lt;- match.arg(round_type)
-       checkmate::assert_numeric(
-         x,
-         len = 4L,
-         finite = TRUE,
-         any.missing = FALSE
-       )
+       checkmate::assert_numeric(x, len = 4L, finite = TRUE, any.missing = FALSE)
        checkmate::assert_true(all(x[c(3, 4)] %in% c(0, 1)))
-   
-       res &lt;- vapply(x[c(1, 2)], FUN = function(x){
-         format_value(x, format_xx, round_type = round_type)
+       res &lt;- vapply(x[c(1, 2)], FUN = function(x) {
+           format_value(x, format_xx, round_type = round_type)
        }, character(1))
-       if (x[3] == 1) res[1] &lt;- paste0(res[1], "+")
-       if (x[4] == 1) res[2] &lt;- paste0(res[2], "+")
+       if (x[3] == 1) 
+           res[1] &lt;- paste0(res[1], "+")
+       if (x[4] == 1) 
+           res[2] &lt;- paste0(res[2], "+")
        paste0("(", res[1], ", ", res[2], ")")
-     }
+   }
    &lt;environment: base&gt;
    

* Run `testthat::snapshot_accept('junco_utils_default_stats_formats_labels')` to accept the change.
* Run `testthat::snapshot_review('junco_utils_default_stats_formats_labels')` to interactively review the change.</failure>
    </testcase>
    <testcase time="0.0479999999999983" classname="junco_utils_default_stats_formats_labels" name="get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="junco_utils_default_stats_formats_labels" name="get_label_attr_from_stats_works_as_expected"/>
    <testcase time="0.0229999999999997" classname="junco_utils_default_stats_formats_labels" name="get_label_attr_from_stats_works_as_expected"/>
    <testcase time="0.0240000000000009" classname="junco_utils_default_stats_formats_labels" name="get_indents_from_stats_works_as_expected"/>
  </testsuite>
  <testsuite name="kaplan_meier" timestamp="2025-09-13T14:11:14Z" hostname="4b1fd581cab4" tests="14" skipped="0" failures="0" errors="0" time="0.395">
    <testcase time="0.0150000000000006" classname="kaplan_meier" name="s_kaplan_meier_works_with_default_arguments"/>
    <testcase time="0.0209999999999972" classname="kaplan_meier" name="s_kaplan_meier_works_with_default_arguments"/>
    <testcase time="0.00900000000000034" classname="kaplan_meier" name="s_kaplan_meier_works_with_customized_arguments"/>
    <testcase time="0.0199999999999996" classname="kaplan_meier" name="s_kaplan_meier_works_with_customized_arguments"/>
    <testcase time="0.0110000000000028" classname="kaplan_meier" name="a_kaplan_meier_works_with_default_arguments"/>
    <testcase time="0.000999999999997669" classname="kaplan_meier" name="a_kaplan_meier_works_with_default_arguments"/>
    <testcase time="0.0229999999999997" classname="kaplan_meier" name="a_kaplan_meier_works_with_default_arguments"/>
    <testcase time="0.0110000000000028" classname="kaplan_meier" name="a_kaplan_meier_works_with_customized_arguments"/>
    <testcase time="0.000999999999997669" classname="kaplan_meier" name="a_kaplan_meier_works_with_customized_arguments"/>
    <testcase time="0.032" classname="kaplan_meier" name="a_kaplan_meier_works_with_customized_arguments"/>
    <testcase time="0.0609999999999999" classname="kaplan_meier" name="a_kaplan_meier_works_inside_analyze_in_table"/>
    <testcase time="0.0670000000000002" classname="kaplan_meier" name="a_kaplan_meier_works_inside_analyze_in_table"/>
    <testcase time="0.0650000000000013" classname="kaplan_meier" name="a_kaplan_meier_works_inside_analyze_in_table_with_custom_arguments"/>
    <testcase time="0.0579999999999998" classname="kaplan_meier" name="a_kaplan_meier_works_inside_analyze_in_table_with_custom_arguments"/>
  </testsuite>
  <testsuite name="markup_unicodify" timestamp="2025-09-13T14:11:14Z" hostname="4b1fd581cab4" tests="1" skipped="0" failures="0" errors="0" time="0.027">
    <testcase time="0.0269999999999975" classname="markup_unicodify" name="dps_markup_works_with_and_"/>
  </testsuite>
  <testsuite name="mmrm" timestamp="2025-09-13T14:11:14Z" hostname="4b1fd581cab4" tests="5" skipped="0" failures="0" errors="0" time="0.278">
    <testcase time="0.146000000000001" classname="mmrm" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results_including_one_and_two_sided_p_values"/>
    <testcase time="0.00300000000000011" classname="mmrm" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results_including_one_and_two_sided_p_values"/>
    <testcase time="0.00300000000000011" classname="mmrm" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results_including_one_and_two_sided_p_values"/>
    <testcase time="0.00300000000000011" classname="mmrm" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results_including_one_and_two_sided_p_values"/>
    <testcase time="0.123000000000001" classname="mmrm" name="fit_mmrm_j_works_as_expected"/>
  </testsuite>
  <testsuite name="mmrm_rbmi" timestamp="2025-09-13T14:11:14Z" hostname="4b1fd581cab4" tests="6" skipped="0" failures="0" errors="0" time="0.228">
    <testcase time="0.143999999999998" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
    <testcase time="0.00100000000000122" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
    <testcase time="0.0269999999999975" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
    <testcase time="0.0260000000000034" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
    <testcase time="0.0269999999999975" classname="mmrm_rbmi" name="mmrm_rbmi_works_as_expected"/>
  </testsuite>
  <testsuite name="odds_ratio" timestamp="2025-09-13T14:11:15Z" hostname="4b1fd581cab4" tests="18" skipped="0" failures="0" errors="0" time="0.326">
    <testcase time="0.0139999999999993" classname="odds_ratio" name="s_odds_ratio_j_returns_NA_when_one_group_has_no_responders_and_option_set"/>
    <testcase time="0.00500000000000256" classname="odds_ratio" name="s_odds_ratio_j_returns_NA_when_one_group_has_no_responders_and_option_set"/>
    <testcase time="0.0150000000000006" classname="odds_ratio" name="s_odds_ratio_j_returns_NA_when_one_group_has_no_responders_and_option_set_with_strata"/>
    <testcase time="0.00499999999999901" classname="odds_ratio" name="s_odds_ratio_j_returns_NA_when_one_group_has_no_responders_and_option_set_with_strata"/>
    <testcase time="0.00799999999999912" classname="odds_ratio" name="s_odds_ratio_j_does_not_fail_with_only_non_responders"/>
    <testcase time="0.00300000000000011" classname="odds_ratio" name="s_odds_ratio_j_does_not_fail_with_only_non_responders"/>
    <testcase time="0.0120000000000005" classname="odds_ratio" name="s_odds_ratio_j_does_not_fail_with_only_one_grp"/>
    <testcase time="0.00400000000000134" classname="odds_ratio" name="s_odds_ratio_j_does_not_fail_with_only_one_grp"/>
    <testcase time="0.00999999999999801" classname="odds_ratio" name="or_glm_j_does_not_fail_with_only_non_responders"/>
    <testcase time="0.00700000000000145" classname="odds_ratio" name="or_glm_j_does_not_fail_with_only_non_responders"/>
    <testcase time="0.0399999999999991" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_unstratified_analysis"/>
    <testcase time="0.0470000000000006" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_unstratified_analysis"/>
    <testcase time="0.0249999999999986" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_unstratified_analysis"/>
    <testcase time="0.00300000000000011" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_unstratified_analysis"/>
    <testcase time="0.0459999999999994" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_CMH_analysis"/>
    <testcase time="0.0530000000000008" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_CMH_analysis"/>
    <testcase time="0.0259999999999998" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_CMH_analysis"/>
    <testcase time="0.00300000000000011" classname="odds_ratio" name="a_odds_ratio_j_works_in_a_table_layout_as_expected_for_CMH_analysis"/>
  </testsuite>
  <testsuite name="patyrs-eair100" timestamp="2025-09-13T14:11:15Z" hostname="4b1fd581cab4" tests="4" skipped="0" failures="0" errors="0" time="1.379">
    <testcase time="0.234999999999999" classname="patyrs_eair100" name="Check_patient_years_numbers_are_giving_expected_result"/>
    <testcase time="0.390000000000001" classname="patyrs_eair100" name="Check_aeir100_numbers_are_giving_expected_result"/>
    <testcase time="0.376999999999999" classname="patyrs_eair100" name="Check_aeir100_numbers_are_giving_expected_result_when_fup_var_argument_is_changed"/>
    <testcase time="0.377000000000002" classname="patyrs_eair100" name="Check_aeir100_numbers_are_giving_expected_result_when_occ_dy_argument_is_changed"/>
  </testsuite>
  <testsuite name="pool_rbmi" timestamp="2025-09-13T14:11:16Z" hostname="4b1fd581cab4" tests="30" skipped="0" failures="0" errors="0" time="2.483">
    <testcase time="0.0159999999999982" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00100000000000122" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00199999999999889" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="mod_pool_internal_rubin_combines_results_correctly"/>
    <testcase time="0.00499999999999901" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00200000000000244" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00999999999999801" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00400000000000134" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00199999999999889" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00400000000000134" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00199999999999889" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.00300000000000011" classname="pool_rbmi" name="pool_function_processes_and_returns_combined_results"/>
    <testcase time="0.524999999999999" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="0.689" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="0.00600000000000023" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="0.00499999999999901" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="1.159" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="0.00600000000000023" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
    <testcase time="0.00600000000000023" classname="pool_rbmi" name="rbmi_pool_works_fine"/>
  </testsuite>
  <testsuite name="proportions" timestamp="2025-09-13T14:11:19Z" hostname="4b1fd581cab4" tests="21" skipped="0" failures="0" errors="0" time="0.636">
    <testcase time="0.0339999999999989" classname="proportions" name="s_proportion_factor_works_as_expected"/>
    <testcase time="0.027000000000001" classname="proportions" name="s_proportion_factor_shows_optional_total_row_on_top"/>
    <testcase time="0.0259999999999998" classname="proportions" name="s_proportion_factor_shows_optional_total_row_in_bottom"/>
    <testcase time="0.0269999999999975" classname="proportions" name="s_proportion_factor_optionally_uses_number_of_non_missing_levels_as_total"/>
    <testcase time="0.0370000000000026" classname="proportions" name="s_proportion_logical_works_as_expected"/>
    <testcase time="0.0259999999999998" classname="proportions" name="c_proportion_logical_works_as_expected"/>
    <testcase time="0.00900000000000034" classname="proportions" name="h_get_design_mat_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="proportions" name="h_get_design_mat_works_as_expected"/>
    <testcase time="0.00499999999999901" classname="proportions" name="a_proportion_ci_logical_works_as_expected"/>
    <testcase time="0.0210000000000008" classname="proportions" name="a_proportion_ci_logical_works_as_expected"/>
    <testcase time="0.0069999999999979" classname="proportions" name="a_proportion_ci_factor_works_as_expected"/>
    <testcase time="0.0229999999999997" classname="proportions" name="a_proportion_ci_factor_works_as_expected"/>
    <testcase time="0.228000000000002" classname="proportions" name="prop_split_fun_works_as_expected"/>
    <testcase time="0.0259999999999998" classname="proportions" name="prop_table_afun_works_as_expected_with_total_row"/>
    <testcase time="0.0229999999999997" classname="proportions" name="prop_table_afun_works_as_expected_with_total_row"/>
    <testcase time="0.0219999999999985" classname="proportions" name="prop_table_afun_works_as_expected_with_total_row"/>
    <testcase time="0.00500000000000256" classname="proportions" name="prop_table_afun_works_as_expected_with_total_row"/>
    <testcase time="0.0259999999999998" classname="proportions" name="prop_table_afun_works_as_expected_by_default_without_total_row"/>
    <testcase time="0.0329999999999977" classname="proportions" name="prop_table_afun_works_as_expected_by_default_without_total_row"/>
    <testcase time="0.0240000000000009" classname="proportions" name="prop_table_afun_works_as_expected_by_default_without_total_row"/>
    <testcase time="0.00499999999999901" classname="proportions" name="prop_table_afun_works_as_expected_by_default_without_total_row"/>
  </testsuite>
  <testsuite name="pruning_functions" timestamp="2025-09-13T14:11:21Z" hostname="4b1fd581cab4" tests="30" skipped="0" failures="0" errors="0" time="9.219">
    <testcase time="1.453" classname="pruning_functions" name="count_pruner_is_identical_to_standard_pruning_in_cases_where_we_have_all_0_s"/>
    <testcase time="2.761" classname="pruning_functions" name="count_pruner_is_identical_to_standard_pruning_in_cases_where_we_have_all_0_s"/>
    <testcase time="0.970999999999997" classname="pruning_functions" name="count_pruner_keeps_everything_if_0_condition_is_not_met"/>
    <testcase time="0.0330000000000013" classname="pruning_functions" name="count_pruner_with_cat_include_removes_text_correctly"/>
    <testcase time="0.0279999999999987" classname="pruning_functions" name="count_pruner_with_cat_include_does_nothing_if_text_is_supplied_and_it_is_not_text_that_is_in_the_table"/>
    <testcase time="0.054000000000002" classname="pruning_functions" name="count_pruner_does_remove_if_text_is_supplied_and_all_columns_are_0"/>
    <testcase time="0.0410000000000039" classname="pruning_functions" name="remove_rows_does_remove_if_text_is_supplied_as_fixed_and_text_is_matched"/>
    <testcase time="0.0399999999999991" classname="pruning_functions" name="remove_rows_does_remove_if_text_is_supplied_as_fixed_and_text_is_matched"/>
    <testcase time="0.0659999999999954" classname="pruning_functions" name="remove_rows_does_remove_if_text_is_supplied_as_fixed_and_text_is_matched"/>
    <testcase time="0.00300000000000011" classname="pruning_functions" name="remove_rows_does_remove_if_text_is_supplied_as_fixed_and_text_is_matched"/>
    <testcase time="0.00200000000000244" classname="pruning_functions" name="remove_rows_does_remove_if_text_is_supplied_as_fixed_and_text_is_matched"/>
    <testcase time="0.0069999999999979" classname="pruning_functions" name="keep_non_null_rows_pruning_function_or_via_keep_rows"/>
    <testcase time="0.00300000000000011" classname="pruning_functions" name="keep_non_null_rows_pruning_function_or_via_keep_rows"/>
    <testcase time="0.203000000000003" classname="pruning_functions" name="test_keep_non_null_rows"/>
    <testcase time="0.00900000000000034" classname="pruning_functions" name="bspt_pruner_both_fraction_and_diff_from_control_are_NULL"/>
    <testcase time="0.00799999999999557" classname="pruning_functions" name="bspt_pruner_both_fraction_and_diff_from_control_are_NULL"/>
    <testcase time="0.217000000000006" classname="pruning_functions" name="bspt_pruner_with_fraction"/>
    <testcase time="0.323999999999998" classname="pruning_functions" name="bspt_pruner_with_fraction_and_diff_from_control"/>
    <testcase time="0.549999999999997" classname="pruning_functions" name="bspt_pruner_with_fraction_and_diff_from_control_and_keeprowtext"/>
    <testcase time="0.00300000000000011" classname="pruning_functions" name="bspt_pruner_with_fraction_and_diff_from_control_and_keeprowtext"/>
    <testcase time="0.173000000000002" classname="pruning_functions" name="count_pruner_in_small_groups"/>
    <testcase time="1.117" classname="pruning_functions" name="bspt_pruner_in_AE_like_tables"/>
    <testcase time="0.00300000000000011" classname="pruning_functions" name="bspt_pruner_in_AE_like_tables"/>
    <testcase time="0.00200000000000244" classname="pruning_functions" name="bspt_pruner_in_AE_like_tables"/>
    <testcase time="0.191000000000003" classname="pruning_functions" name="bspt_pruner_with_less_obvious_control_specifications"/>
    <testcase time="0.887" classname="pruning_functions" name="bspt_pruner_with_less_obvious_control_specifications"/>
    <testcase time="0.00300000000000011" classname="pruning_functions" name="bspt_pruner_with_less_obvious_control_specifications"/>
    <testcase time="0.0429999999999993" classname="pruning_functions" name="check_that_if_all_data_is_pruned_leaving_no_rows_the_outcome_is_the_message"/>
    <testcase time="0.00999999999999801" classname="pruning_functions" name="check_that_if_message_is_changed_this_is_reflected_in_the_final_table_tree"/>
    <testcase time="0.0140000000000029" classname="pruning_functions" name="check_that_when_spancols_TRUE_is_used_then_we_have_expected_behaviour"/>
  </testsuite>
  <testsuite name="rbmi" timestamp="2025-09-13T14:11:29Z" hostname="4b1fd581cab4" tests="26" skipped="0" failures="0" errors="0" time="18.688">
    <testcase time="0.00999999999999801" classname="rbmi" name="find_missing_chg_after_avisit_works_as_expected"/>
    <testcase time="0.00399999999999778" classname="rbmi" name="find_missing_chg_after_avisit_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="find_missing_chg_after_avisit_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="rbmi" name="find_missing_chg_after_avisit_handles_unsorted_input_correctly"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="find_missing_chg_after_avisit_handles_unsorted_input_correctly"/>
    <testcase time="0.00800000000000267" classname="rbmi" name="find_missing_chg_after_avisit_validates_input_correctly"/>
    <testcase time="0.00499999999999545" classname="rbmi" name="find_missing_chg_after_avisit_validates_input_correctly"/>
    <testcase time="0.00400000000000489" classname="rbmi" name="find_missing_chg_after_avisit_validates_input_correctly"/>
    <testcase time="0.00600000000000023" classname="rbmi" name="make_rbmi_cluster_returns_NULL_when_cluster_or_cores_is_1"/>
    <testcase time="2.371" classname="rbmi" name="make_rbmi_cluster_exports_objects_and_loads_packages"/>
    <testcase time="2.294" classname="rbmi" name="make_rbmi_cluster_handles_existing_cluster"/>
    <testcase time="0.0309999999999988" classname="rbmi" name="make_rbmi_cluster_rejects_invalid_cluster_or_cores_parameter"/>
    <testcase time="0.00600000000000023" classname="rbmi" name="par_lapply_works_with_and_without_cluster"/>
    <testcase time="2.393" classname="rbmi" name="par_lapply_works_with_and_without_cluster"/>
    <testcase time="2.095" classname="rbmi" name="make_rbmi_cluster_loads_rbmi_namespaces_correctly"/>
    <testcase time="9.422" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00199999999999534" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00200000000000244" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00300000000000011" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
    <testcase time="0.00200000000000244" classname="rbmi" name="Parallisation_works_with_rbmi_analyse_and_produces_identical_results"/>
  </testsuite>
  <testsuite name="relative_risk" timestamp="2025-09-13T14:11:47Z" hostname="4b1fd581cab4" tests="8" skipped="0" failures="0" errors="0" time="0.143">
    <testcase time="0.0399999999999991" classname="relative_risk" name="s_relative_risk_returns_NA_when_one_group_has_no_responders"/>
    <testcase time="0.00499999999999545" classname="relative_risk" name="s_relative_risk_returns_NA_when_one_group_has_no_responders"/>
    <testcase time="0.00600000000000023" classname="relative_risk" name="prop_ratio_cmh_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="relative_risk" name="prop_ratio_cmh_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="relative_risk" name="prop_ratio_cmh_works_also_with_a_single_stratum"/>
    <testcase time="0.00600000000000023" classname="relative_risk" name="prop_ratio_cmh_works_also_with_a_single_stratum"/>
    <testcase time="0.0690000000000026" classname="relative_risk" name="a_relative_risk_in_table_layout_gives_same_results_as_with_SAS"/>
    <testcase time="0.00500000000000256" classname="relative_risk" name="a_relative_risk_in_table_layout_gives_same_results_as_with_SAS"/>
  </testsuite>
  <testsuite name="remove_col_count" timestamp="2025-09-13T14:11:48Z" hostname="4b1fd581cab4" tests="1" skipped="0" failures="0" errors="0" time="0.086">
    <testcase time="0.0859999999999985" classname="remove_col_count" name="remove_col_count_works"/>
  </testsuite>
  <testsuite name="resp01_functions" timestamp="2025-09-13T14:11:48Z" hostname="4b1fd581cab4" tests="13" skipped="0" failures="0" errors="0" time="1.045">
    <testcase time="0.405999999999999" classname="resp01_functions" name="resp01_split_fun_fct_1_works_as_expected"/>
    <testcase time="0.347999999999999" classname="resp01_functions" name="resp01_split_fun_fct_2_works_as_expected"/>
    <testcase time="0.0249999999999986" classname="resp01_functions" name="resp01_counts_cfun_1_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="resp01_functions" name="resp01_counts_cfun_2_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="resp01_functions" name="resp01_counts_cfun_3_works_as_expected"/>
    <testcase time="0.0279999999999987" classname="resp01_functions" name="resp01_a_comp_stat_logical_or_cmh_works_as_expected"/>
    <testcase time="0.0310000000000059" classname="resp01_functions" name="resp01_a_comp_stat_logical_or_logistic_works_as_expected"/>
    <testcase time="0.0259999999999962" classname="resp01_functions" name="resp01_a_comp_stat_logical_rr_works_as_expected"/>
    <testcase time="0.0339999999999989" classname="resp01_functions" name="resp01_a_comp_stat_factor_or_cmh_works_as_expected"/>
    <testcase time="0.0360000000000014" classname="resp01_functions" name="resp01_a_comp_stat_factor_or_logistic_works_as_expected"/>
    <testcase time="0.0300000000000011" classname="resp01_functions" name="resp01_acfun_works_as_expected"/>
    <testcase time="0.0399999999999991" classname="resp01_functions" name="resp01_acfun_works_2_as_expected"/>
    <testcase time="0.0290000000000035" classname="resp01_functions" name="resp01_acfun_3_works_as_expected"/>
  </testsuite>
  <testsuite name="response_by_var" timestamp="2025-09-13T14:11:49Z" hostname="4b1fd581cab4" tests="9" skipped="0" failures="0" errors="0" time="0.726">
    <testcase time="0.0949999999999989" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.070999999999998" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.130000000000003" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.0679999999999978" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.070999999999998" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.0690000000000026" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.0760000000000005" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.0719999999999956" classname="response_by_var" name="response_by_var_various_scenarios"/>
    <testcase time="0.0740000000000052" classname="response_by_var" name="response_by_var_various_scenarios"/>
  </testsuite>
  <testsuite name="sorting_functions" timestamp="2025-09-13T14:11:50Z" hostname="4b1fd581cab4" tests="7" skipped="0" failures="0" errors="0" time="7.53">
    <testcase time="0.519999999999996" classname="sorting_functions" name="jj_complex_scorefun_is_identical_to_standard_sorting_spanningheadercolvar_NA"/>
    <testcase time="0.222000000000001" classname="sorting_functions" name="jj_complex_scorefun_is_identical_to_standard_sorting_spanningheadercolvar_spanhead"/>
    <testcase time="0.224000000000004" classname="sorting_functions" name="jj_complex_scorefun_sorts_correctly_with_colpath"/>
    <testcase time="0.281999999999996" classname="sorting_functions" name="jj_complex_scorefun_places_specified_category_at_the_start_firstcat"/>
    <testcase time="0.287999999999997" classname="sorting_functions" name="jj_complex_scorefun_places_specified_category_at_the_end_lastcat"/>
    <testcase time="3.411" classname="sorting_functions" name="jj_complex_scorefun_uses_first_column_to_sort_usefirstcol"/>
    <testcase time="2.58300000000001" classname="sorting_functions" name="jj_complex_scorefun_uses_first_column_when_no_spanning_header_usefirstcol"/>
  </testsuite>
  <testsuite name="split_functions" timestamp="2025-09-13T14:11:57Z" hostname="4b1fd581cab4" tests="11" skipped="0" failures="0" errors="0" time="0.725">
    <testcase time="0.0649999999999977" classname="split_functions" name="cond_rm_facets_works"/>
    <testcase time="0.00400000000000489" classname="split_functions" name="cond_rm_facets_works"/>
    <testcase time="0.00400000000000489" classname="split_functions" name="cond_rm_facets_works"/>
    <testcase time="0.00400000000000489" classname="split_functions" name="cond_rm_facets_works"/>
    <testcase time="0.0959999999999894" classname="split_functions" name="rm_levels_works"/>
    <testcase time="0.121000000000009" classname="split_functions" name="real_add_overall_facet_works"/>
    <testcase time="0.0420000000000016" classname="split_functions" name="make_combo_splitfun_works"/>
    <testcase time="0.00300000000000011" classname="split_functions" name="make_combo_splitfun_works"/>
    <testcase time="0.129999999999995" classname="split_functions" name="combine_nonblank_works"/>
    <testcase time="0.0369999999999919" classname="split_functions" name="combine_nonblank_works"/>
    <testcase time="0.219000000000008" classname="split_functions" name="rm_blank_levels_works"/>
  </testsuite>
  <testsuite name="string_to_title" timestamp="2025-09-13T14:11:58Z" hostname="4b1fd581cab4" tests="4" skipped="0" failures="0" errors="0" time="0.027">
    <testcase time="0.00900000000000034" classname="string_to_title" name="string_to_title_works_as_expected_for_string"/>
    <testcase time="0.00600000000000023" classname="string_to_title" name="string_to_title_works_as_expected_for_character_vector"/>
    <testcase time="0.00600000000000023" classname="string_to_title" name="string_to_title_works_as_expected_for_factors"/>
    <testcase time="0.00600000000000023" classname="string_to_title" name="string_to_title_works_as_expected_for_factors_missing_levels_"/>
  </testsuite>
  <testsuite name="summarize_ancova" timestamp="2025-09-13T14:11:58Z" hostname="4b1fd581cab4" tests="9" skipped="0" failures="0" errors="0" time="0.393">
    <testcase time="0.019999999999996" classname="summarize_ancova" name="h_ancova_works_as_expected"/>
    <testcase time="0.00100000000000477" classname="summarize_ancova" name="h_ancova_works_as_expected"/>
    <testcase time="0.0189999999999912" classname="summarize_ancova" name="s_ancova_j_works_as_expected"/>
    <testcase time="0.00100000000000477" classname="summarize_ancova" name="s_ancova_j_works_as_expected"/>
    <testcase time="0.0150000000000006" classname="summarize_ancova" name="s_ancova_j_works_as_expected"/>
    <testcase time="0.00400000000000489" classname="summarize_ancova" name="s_ancova_j_works_as_expected"/>
    <testcase time="0.000999999999990564" classname="summarize_ancova" name="s_ancova_j_works_as_expected"/>
    <testcase time="0.0940000000000083" classname="summarize_ancova" name="s_summarize_ancova_works_as_expected"/>
    <testcase time="0.238" classname="summarize_ancova" name="a_summarize_ancova_j_works_as_expected_in_table_layout"/>
  </testsuite>
  <testsuite name="summarize_mmrm" timestamp="2025-09-13T14:11:58Z" hostname="4b1fd581cab4" tests="14" skipped="0" failures="0" errors="0" time="2.403">
    <testcase time="0.188999999999993" classname="summarize_mmrm" name="h_summarize_mmrm_works_with_healthy_input"/>
    <testcase time="0.0499999999999972" classname="summarize_mmrm" name="h_summarize_mmrm_works_with_healthy_input"/>
    <testcase time="0.122" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_non_ref_cell"/>
    <testcase time="0.0360000000000014" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_non_ref_cell"/>
    <testcase time="0.0100000000000051" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_ref_col_cell"/>
    <testcase time="0.027000000000001" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_ref_col_cell"/>
    <testcase time="0.007000000000005" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_ref_row_cell"/>
    <testcase time="0.0209999999999866" classname="summarize_mmrm" name="s_summarize_mmrm_works_with_healthy_input_in_ref_row_cell"/>
    <testcase time="0.347000000000008" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_in_table_layout"/>
    <testcase time="0.120999999999995" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_in_table_layout"/>
    <testcase time="0.122" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_in_table_layout"/>
    <testcase time="0.792000000000002" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_below_row_splits"/>
    <testcase time="0.293000000000006" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_below_row_splits"/>
    <testcase time="0.265999999999991" classname="summarize_mmrm" name="a_summarize_mmrm_works_as_expected_below_row_splits"/>
  </testsuite>
  <testsuite name="summarize_row_counts" timestamp="2025-09-13T14:12:00Z" hostname="4b1fd581cab4" tests="4" skipped="0" failures="0" errors="0" time="0.477">
    <testcase time="0.162000000000006" classname="summarize_row_counts" name="summarize_row_counts_works_as_expected_without_alt_counts"/>
    <testcase time="0.0750000000000028" classname="summarize_row_counts" name="summarize_row_counts_works_as_expected_without_alt_counts"/>
    <testcase time="0.156999999999996" classname="summarize_row_counts" name="summarize_row_counts_works_as_expected_with_alt_counts"/>
    <testcase time="0.0829999999999984" classname="summarize_row_counts" name="summarize_row_counts_works_as_expected_with_alt_counts"/>
  </testsuite>
  <testsuite name="tabulate_lsmeans" timestamp="2025-09-13T14:12:01Z" hostname="4b1fd581cab4" tests="11" skipped="0" failures="0" errors="0" time="1.579">
    <testcase time="0.103999999999999" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_MMRM_fit_when_not_in_reference_column"/>
    <testcase time="0.00100000000000477" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_MMRM_fit_when_not_in_reference_column"/>
    <testcase time="0.0219999999999914" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_MMRM_fit_when_not_in_reference_column"/>
    <testcase time="0.0200000000000102" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_MMRM_fit_when_not_in_reference_column"/>
    <testcase time="0.0200000000000102" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_MMRM_fit_when_not_in_reference_column"/>
    <testcase time="0.0989999999999895" classname="tabulate_lsmeans" name="summarize_lsmeans_can_show_two_and_one_sided_p_values_correctly"/>
    <testcase time="0.424000000000007" classname="tabulate_lsmeans" name="summarize_lsmeans_can_show_two_and_one_sided_p_values_correctly"/>
    <testcase time="0.406999999999996" classname="tabulate_lsmeans" name="summarize_lsmeans_can_show_two_and_one_sided_p_values_correctly"/>
    <testcase time="0.412000000000006" classname="tabulate_lsmeans" name="summarize_lsmeans_can_show_two_and_one_sided_p_values_correctly"/>
    <testcase time="0.0689999999999884" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_ANCOVA_fit_when_not_in_reference_column"/>
    <testcase time="0.00100000000000477" classname="tabulate_lsmeans" name="s_lsmeans_works_as_expected_with_ANCOVA_fit_when_not_in_reference_column"/>
  </testsuite>
  <testsuite name="tabulate_lsmeans_wide" timestamp="2025-09-13T14:12:03Z" hostname="4b1fd581cab4" tests="19" skipped="0" failures="0" errors="0" time="1.59">
    <testcase time="0.0319999999999965" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected"/>
    <testcase time="0.0220000000000056" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected"/>
    <testcase time="0.0220000000000056" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected"/>
    <testcase time="0.0219999999999914" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected"/>
    <testcase time="0.0210000000000008" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected"/>
    <testcase time="0.0360000000000014" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group"/>
    <testcase time="0.0220000000000056" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group"/>
    <testcase time="0.0219999999999914" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group"/>
    <testcase time="0.0260000000000105" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group_for_MMRM_case"/>
    <testcase time="0.0219999999999914" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group_for_MMRM_case"/>
    <testcase time="0.0220000000000056" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group_for_MMRM_case"/>
    <testcase time="0.0219999999999914" classname="tabulate_lsmeans_wide" name="lsmeans_wide_cfun_works_as_expected_with_more_than_one_treatment_group_for_MMRM_case"/>
    <testcase time="0.282000000000011" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_works_as_expected"/>
    <testcase time="0.137999999999991" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_works_as_expected"/>
    <testcase time="0.102000000000004" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_works_as_expected_with_more_than_1_treatment_group"/>
    <testcase time="0.263999999999996" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_works_as_expected_with_more_than_1_treatment_group"/>
    <testcase time="0.155000000000001" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_works_as_expected_with_more_than_1_treatment_group"/>
    <testcase time="0.246000000000009" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_can_omit_variance_and_p_value_columns"/>
    <testcase time="0.111999999999995" classname="tabulate_lsmeans_wide" name="summarize_lsmeans_wide_can_omit_variance_and_p_value_columns"/>
  </testsuite>
  <testsuite name="tabulate_rbmi" timestamp="2025-09-13T14:12:04Z" hostname="4b1fd581cab4" tests="13" skipped="0" failures="0" errors="0" time="0.301">
    <testcase time="0.0229999999999961" classname="tabulate_rbmi" name="h_tidy_pool_is_produced_correctly_for_ANCOVA_case"/>
    <testcase time="0.00900000000000034" classname="tabulate_rbmi" name="h_tidy_pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.00300000000000011" classname="tabulate_rbmi" name="h_tidy_pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.00199999999999534" classname="tabulate_rbmi" name="h_tidy_pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.0180000000000007" classname="tabulate_rbmi" name="tidy.pool_is_produced_correctly_for_ANCOVA_case"/>
    <testcase time="0.00900000000000034" classname="tabulate_rbmi" name="tidy.pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.00200000000000955" classname="tabulate_rbmi" name="tidy.pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.00300000000000011" classname="tabulate_rbmi" name="tidy.pool_is_produced_correctly_for_MMRM_case"/>
    <testcase time="0.0159999999999911" classname="tabulate_rbmi" name="s_rbmi_lsmeans_works_with_as_expected_with_.in_ref_col_TRUE"/>
    <testcase time="0.0190000000000055" classname="tabulate_rbmi" name="s_rbmi_lsmeans_works_with_as_expected_with_.in_ref_col_FALSE"/>
    <testcase time="0.0180000000000007" classname="tabulate_rbmi" name="s_rbmi_lsmeans_also_works_with_show_relative_increase"/>
    <testcase time="0.0879999999999939" classname="tabulate_rbmi" name="a_rbmi_lsmeans_works_as_expected_in_table_layout"/>
    <testcase time="0.0910000000000082" classname="tabulate_rbmi" name="a_rbmi_lsmeans_works_as_expected_in_table_layout"/>
  </testsuite>
  <testsuite name="tern_utils_default_stats_formats_labels" timestamp="2025-09-13T14:12:04Z" hostname="4b1fd581cab4" tests="52" skipped="0" failures="0" errors="0" time="0.33">
    <testcase time="0.0109999999999957" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.0229999999999961" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00200000000000955" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.019999999999996" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00199999999999534" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.0200000000000102" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00199999999999534" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.019999999999996" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_defaults"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00200000000000955" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00400000000000489" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_well_with_pval"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_selection_of_stats"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_selection_of_stats"/>
    <testcase time="0.00400000000000489" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_selection_of_stats"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_stats_works_as_expected_for_selection_of_stats"/>
    <testcase time="0.00500000000000966" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00199999999999534" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_formats_from_stats_works_as_expected"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.0210000000000008" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00200000000000955" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_as_expected"/>
    <testcase time="0.00699999999999079" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_with_labels_in_works_when_adding_levels_to_stats"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_works_fine_for_cases_with_levels"/>
    <testcase time="0.00499999999999545" classname="tern_utils_default_stats_formats_labels" name="tern_get_indents_from_stats_works_as_expected"/>
    <testcase time="0.0210000000000008" classname="tern_utils_default_stats_formats_labels" name="tern_get_indents_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_indents_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_indents_from_stats_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name="tern_get_indents_from_stats_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name="tern_get_labels_from_stats_correctly_combines_labels_in_and_label_attr_from_stats"/>
    <testcase time="0.00500000000000966" classname="tern_utils_default_stats_formats_labels" name=".unlist_keep_nulls_works_as_expected_non_recursively"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name=".unlist_keep_nulls_works_as_expected_non_recursively_with_NA"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name=".split_std_from_custom_stats_works_as_expected_with_a_list"/>
    <testcase time="0.00199999999999534" classname="tern_utils_default_stats_formats_labels" name=".split_std_from_custom_stats_works_as_expected_with_a_list"/>
    <testcase time="0.00300000000000011" classname="tern_utils_default_stats_formats_labels" name=".split_std_from_custom_stats_works_as_expected_with_a_list"/>
    <testcase time="0.0240000000000009" classname="tern_utils_default_stats_formats_labels" name=".split_std_from_custom_stats_works_as_expected_with_a_single_input"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name=".apply_stat_functions_works_as_expected_without_custom_stat_functions"/>
    <testcase time="0.00600000000000023" classname="tern_utils_default_stats_formats_labels" name=".apply_stat_functions_works_as_expected_with_custom_stat_functions"/>
  </testsuite>
  <testsuite name="test_proportion_diff" timestamp="2025-09-13T14:12:05Z" hostname="4b1fd581cab4" tests="32" skipped="0" failures="0" errors="0" time="0.471">
    <testcase time="0.0409999999999968" classname="test_proportion_diff" name="s_test_proportion_diff_works_as_expected"/>
    <testcase time="0.0220000000000056" classname="test_proportion_diff" name="s_test_proportion_diff_works_as_expected"/>
    <testcase time="0.0210000000000008" classname="test_proportion_diff" name="s_test_proportion_diff_works_as_expected"/>
    <testcase time="0.0349999999999966" classname="test_proportion_diff" name="a_test_proportion_diff_works_as_expected_in_table_layout"/>
    <testcase time="0.0439999999999969" classname="test_proportion_diff" name="a_test_proportion_diff_works_as_expected_in_table_layout"/>
    <testcase time="0.00600000000000023" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.019999999999996" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.00200000000000955" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.0210000000000008" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.019999999999996" classname="test_proportion_diff" name="prop_chisq_returns_right_result"/>
    <testcase time="0.00600000000000023" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.0200000000000102" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.0210000000000008" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.019999999999996" classname="test_proportion_diff" name="prop_cmh_returns_right_result"/>
    <testcase time="0.00900000000000034" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.00100000000000477" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.019999999999996" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.0130000000000052" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.0230000000000103" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.00499999999999545" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.0200000000000102" classname="test_proportion_diff" name="prop_cmh_also_works_when_there_are_strata_with_just_one_observation"/>
    <testcase time="0.00599999999998602" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
    <testcase time="0.0200000000000102" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
    <testcase time="0.0210000000000008" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
    <testcase time="0.00199999999999534" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
    <testcase time="0.0200000000000102" classname="test_proportion_diff" name="prop_fisher_returns_right_result"/>
  </testsuite>
  <testsuite name="titles_file" timestamp="2025-09-13T14:12:05Z" hostname="4b1fd581cab4" tests="6" skipped="0" failures="0" errors="0" time="0.05">
    <testcase time="0.0109999999999957" classname="titles_file" name="title_files_work"/>
    <testcase time="0.00499999999999545" classname="titles_file" name="title_files_work"/>
    <testcase time="0.0240000000000009" classname="titles_file" name="title_files_work"/>
    <testcase time="0.00300000000000011" classname="titles_file" name="title_files_work"/>
    <testcase time="0.00300000000000011" classname="titles_file" name="title_files_work"/>
    <testcase time="0.00400000000000489" classname="titles_file" name="title_files_work"/>
  </testsuite>
  <testsuite name="tt_to_tblfile" timestamp="2025-09-13T14:12:05Z" hostname="4b1fd581cab4" tests="15" skipped="0" failures="1" errors="4" time="8.975">
    <testcase time="2.16799999999999" classname="tt_to_tblfile" name="tt_to_tlgrtf_works_with_input_Table_and_fontspec_size_8">
      <failure type="failure" message="Expected `rtf_out_wrapper(tbl_wide, &quot;testfontsize8&quot;, fontspec = fontspec)` to run without any errors. ('test-tt_to_tblfile.R:47:3')">Expected `rtf_out_wrapper(tbl_wide, "testfontsize8", fontspec = fontspec)` to run without any errors.
i Actually got a &lt;simpleError&gt; with text:
  could not find function "get_round_type"</failure>
    </testcase>
    <testcase time="0.103999999999999" classname="tt_to_tblfile" name="tt_to_tlgrtf_works_with_an_empty_listing">
      <error type="error" message="Error in `get_round_type(tt)`: could not find function &quot;get_round_type&quot; ('test-tt_to_tblfile.R:52:3')">Error in `get_round_type(tt)`: could not find function "get_round_type"
Backtrace:
     x
  1. +-testthat::expect_snapshot_file(...) at test-tt_to_tblfile.R:52:3
  2. | +-tools::file_ext(name)
  3. | | \-base::regexpr("\\.([[:alnum:]]+)$", x)
  4. | |   \-base::is.factor(text)
  5. | \-base::basename(path)
  6. \-junco (local) rtf_out_wrapper(empty_lsting, "testemptylisting")
  7.   \-junco::tt_to_tlgrtf(tt, file = fullfl, ..., combined_rtf = combined) at test-tt_to_tblfile.R:22:3
  8.     +-formatters::matrix_form(...)
  9.     \-rlistings::matrix_form(...)
 10.       \-rlistings (local) .local(...)
 11.         \-base::vapply(...)
 12.           \-formatters (local) FUN(X[[i]], ...)
 13.             \-base::match.arg(round_type)</error>
    </testcase>
    <testcase time="0.0290000000000106" classname="tt_to_tblfile" name="get_ncol_works_as_expected"/>
    <testcase time="1.702" classname="tt_to_tblfile" name="get_ncol_works_as_expected"/>
    <testcase time="0.399000000000001" classname="tt_to_tblfile" name="get_ncol_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tt_to_tblfile" name="get_ncol_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="tt_to_tblfile" name="get_ncol_works_as_expected"/>
    <testcase time="2.194" classname="tt_to_tblfile" name="tt_to_tlgrtf_works_with_wide_table">
      <error type="error" message="Error in `get_round_type(tt)`: could not find function &quot;get_round_type&quot; ('test-tt_to_tblfile.R:96:3')">Error in `get_round_type(tt)`: could not find function "get_round_type"
Backtrace:
     x
  1. +-testthat::expect_silent(...) at test-tt_to_tblfile.R:96:3
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-base::suppressMessages(...)
 10. | \-base::withCallingHandlers(...)
 11. \-junco (local) rtf_out_wrapper(tbl_wide, "test2", part = NA)
 12.   \-junco::tt_to_tlgrtf(tt, file = fullfl, ..., combined_rtf = combined) at test-tt_to_tblfile.R:22:3
 13.     +-formatters::matrix_form(tt[1, ], round_type = round_type)
 14.     \-rtables::matrix_form(tt[1, ], round_type = round_type)
 15.       +-base::cbind(...)
 16.       +-rtables::get_formatted_cells(obj, round_type = round_type)
 17.       \-rtables::get_formatted_cells(obj, round_type = round_type)
 18.         \-base::lapply(...)
 19.           +-rtables (local) FUN(X[[i]], ...)
 20.           \-rtables (local) FUN(X[[i]], ...)
 21.             +-rtables::get_formatted_cells(...)
 22.             \-rtables::get_formatted_cells(...)
 23.               \-base::lapply(...)
 24.                 +-rtables (local) FUN(X[[i]], ...)
 25.                 \-rtables (local) FUN(X[[i]], ...)
 26.                   +-base::matrix(...)
 27.                   +-base::unlist(...)
 28.                   \-base::Map(...)
 29.                     \-base::mapply(FUN = f, ..., SIMPLIFY = FALSE)
 30.                       \-rtables (local) `&lt;fn&gt;`(val = dots[[1L]][[1L]], spn = dots[[2L]][[1L]], shelli = dots[[3L]][[1L]])
 31.                         \-rtables::format_rcell(...)
 32.                           \-formatters::format_value(...)
 33.                             \-base::match.arg(round_type)</error>
    </testcase>
    <testcase time="2.22200000000001" classname="tt_to_tblfile" name="tt_to_tlgrtf_works_with_argument_combined_rtf_TRUE">
      <error type="error" message="Error in `get_round_type(tt)`: could not find function &quot;get_round_type&quot; ('test-tt_to_tblfile.R:115:3')">Error in `get_round_type(tt)`: could not find function "get_round_type"
Backtrace:
     x
  1. +-testthat::expect_silent(...) at test-tt_to_tblfile.R:115:3
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. +-base::suppressMessages(...)
 10. | \-base::withCallingHandlers(...)
 11. \-junco (local) rtf_out_wrapper(tbl_wide, "test3", combined = TRUE)
 12.   \-junco::tt_to_tlgrtf(tt, file = fullfl, ..., combined_rtf = combined) at test-tt_to_tblfile.R:22:3
 13.     +-formatters::matrix_form(tt[1, ], round_type = round_type)
 14.     \-rtables::matrix_form(tt[1, ], round_type = round_type)
 15.       +-base::cbind(...)
 16.       +-rtables::get_formatted_cells(obj, round_type = round_type)
 17.       \-rtables::get_formatted_cells(obj, round_type = round_type)
 18.         \-base::lapply(...)
 19.           +-rtables (local) FUN(X[[i]], ...)
 20.           \-rtables (local) FUN(X[[i]], ...)
 21.             +-rtables::get_formatted_cells(...)
 22.             \-rtables::get_formatted_cells(...)
 23.               \-base::lapply(...)
 24.                 +-rtables (local) FUN(X[[i]], ...)
 25.                 \-rtables (local) FUN(X[[i]], ...)
 26.                   +-base::matrix(...)
 27.                   +-base::unlist(...)
 28.                   \-base::Map(...)
 29.                     \-base::mapply(FUN = f, ..., SIMPLIFY = FALSE)
 30.                       \-rtables (local) `&lt;fn&gt;`(val = dots[[1L]][[1L]], spn = dots[[2L]][[1L]], shelli = dots[[3L]][[1L]])
 31.                         \-rtables::format_rcell(...)
 32.                           \-formatters::format_value(...)
 33.                             \-base::match.arg(round_type)</error>
    </testcase>
    <testcase time="0.111999999999995" classname="tt_to_tblfile" name="tt_to_tlgrtf_converts_table_tree_to_tlg_without_error">
      <error type="error" message="Error in `get_round_type(tt)`: could not find function &quot;get_round_type&quot; ('test-tt_to_tblfile.R:131:3')">Error in `get_round_type(tt)`: could not find function "get_round_type"
Backtrace:
     x
  1. +-testthat::expect_snapshot_file(...) at test-tt_to_tblfile.R:131:3
  2. | +-tools::file_ext(name)
  3. | | \-base::regexpr("\\.([[:alnum:]]+)$", x)
  4. | |   \-base::is.factor(text)
  5. | \-base::basename(path)
  6. \-junco (local) rtf_out_wrapper(tbl, "test1")
  7.   \-junco::tt_to_tlgrtf(tt, file = fullfl, ..., combined_rtf = combined) at test-tt_to_tblfile.R:22:3
  8.     +-formatters::matrix_form(tt[1, ], round_type = round_type)
  9.     \-rtables::matrix_form(tt[1, ], round_type = round_type)
 10.       +-base::cbind(...)
 11.       +-rtables::get_formatted_cells(obj, round_type = round_type)
 12.       \-rtables::get_formatted_cells(obj, round_type = round_type)
 13.         \-base::lapply(...)
 14.           +-rtables (local) FUN(X[[i]], ...)
 15.           \-rtables (local) FUN(X[[i]], ...)
 16.             +-base::matrix(...)
 17.             +-base::unlist(...)
 18.             \-base::Map(...)
 19.               \-base::mapply(FUN = f, ..., SIMPLIFY = FALSE)
 20.                 \-rtables (local) `&lt;fn&gt;`(val = dots[[1L]][[1L]], spn = dots[[2L]][[1L]], shelli = dots[[3L]][[1L]])
 21.                   \-rtables::format_rcell(...)
 22.                     \-formatters::format_value(...)
 23.                       \-base::match.arg(round_type)</error>
    </testcase>
    <testcase time="0.0250000000000057" classname="tt_to_tblfile" name="cwidths_final_adj_calculates_adjusted_column_widths_correctly"/>
    <testcase time="0.00399999999999068" classname="tt_to_tblfile" name="cwidths_final_adj_calculates_adjusted_column_widths_correctly"/>
    <testcase time="0.00600000000000023" classname="tt_to_tblfile" name="make_bordmat_row_creates_border_matrix_row_correctly"/>
    <testcase time="0.00100000000000477" classname="tt_to_tblfile" name="make_bordmat_row_creates_border_matrix_row_correctly"/>
    <testcase time="0.00300000000000011" classname="tt_to_tblfile" name="make_bordmat_row_creates_border_matrix_row_correctly"/>
  </testsuite>
  <testsuite name="varia" timestamp="2025-09-13T14:12:14Z" hostname="4b1fd581cab4" tests="16" skipped="0" failures="0" errors="0" time="2.69">
    <testcase time="0.0450000000000017" classname="varia" name="a_freq_j_works_old_count_unq_case_"/>
    <testcase time="0.034000000000006" classname="varia" name="a_freq_j_works_old_count_unq_case_"/>
    <testcase time="0.156999999999996" classname="varia" name="a_freq_subcol_j_works_old_case_of_cpct_subcol_"/>
    <testcase time="0.512" classname="varia" name="a_freq_combos_j_old_cpct_filter_combos_case_works"/>
    <testcase time="0.846000000000004" classname="varia" name="_a_freq_j_works"/>
    <testcase time="0.213999999999999" classname="varia" name="a_freq_j_works_old_count_subject_case_"/>
    <testcase time="0.465999999999994" classname="varia" name="a_freq_j_works_old_count_subject_case_"/>
    <testcase time="0.00800000000000978" classname="varia" name="a_freq_j_works_old_count_subject_case_"/>
    <testcase time="0.00799999999999557" classname="varia" name="a_freq_j_works_old_count_subject_case_"/>
    <testcase time="0.0679999999999978" classname="varia" name="_a_freq_j_works"/>
    <testcase time="0.0829999999999984" classname="varia" name="a_freq_j_works_old_a_countpat_newlevels_case_"/>
    <testcase time="0.0130000000000052" classname="varia" name="a_freq_j_works_old_a_countpat_newlevels_case_"/>
    <testcase time="0.00199999999999534" classname="varia" name="a_freq_j_works_old_a_countpat_newlevels_case_"/>
    <testcase time="0.180000000000007" classname="varia" name="a_summarize_ex_j_works"/>
    <testcase time="0.0229999999999961" classname="varia" name="a_summarize_ex_j_works"/>
    <testcase time="0.0309999999999917" classname="varia" name="a_summarize_ex_j_works"/>
  </testsuite>
  <testsuite name="visit_levels" timestamp="2025-09-13T14:12:17Z" hostname="4b1fd581cab4" tests="8" skipped="0" failures="0" errors="0" time="0.039">
    <testcase time="0.0100000000000051" classname="visit_levels" name="get_visit_levels_returns_visit_levels_in_correct_order"/>
    <testcase time="0.00300000000000011" classname="visit_levels" name="get_visit_levels_returns_visit_levels_in_correct_order"/>
    <testcase time="0.00300000000000011" classname="visit_levels" name="get_visit_levels_returns_visit_levels_in_correct_order"/>
    <testcase time="0.00300000000000011" classname="visit_levels" name="get_visit_levels_returns_visit_levels_in_correct_order"/>
    <testcase time="0.00799999999999557" classname="visit_levels" name="get_visit_levels_validates_input_correctly"/>
    <testcase time="0.00400000000000489" classname="visit_levels" name="get_visit_levels_validates_input_correctly"/>
    <testcase time="0.00300000000000011" classname="visit_levels" name="get_visit_levels_validates_input_correctly"/>
    <testcase time="0.00499999999999545" classname="visit_levels" name="get_visit_levels_validates_input_correctly"/>
  </testsuite>
</testsuites>
